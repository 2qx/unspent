import{S as Xr,i as Yr,s as jr,a as p,k as n,q as c,a6 as zr,h as e,c as r,l as s,m as o,r as l,n as m,b as u,G as t,B as Dl}from"../../chunks/index-2c07c0a5.js";function Jr(Sr){let vt,yt,Hn,Sa,bt,In,Ua,Et,Nn,Va,v,ee,_t,Sn,Un,ae,Tt,Vn,Fn,wt,Dt,Gn,L,ne,xt,Mn,Wn,se,Bt,Xn,Yn,oe,Rt,jn,zn,At,Ct,Jn,H,ce,Pt,Kn,Qn,le,Ot,Zn,$n,pe,qt,gn,Fa,Lt,ts,Ga,g,re,es,as,Ma,tt,ie,ns,ss,Wa,et,ue,os,cs,Xa,S,de,b,he,ls,ps,fe,rs,is,ke,us,ds,me,hs,fs,d,E,ve,ks,ms,ye,vs,ys,be,bs,Es,Ee,_s,Ts,_,_e,ws,Ds,Te,xs,Bs,we,Rs,As,De,Cs,Ps,T,xe,Os,qs,Be,Ls,Hs,Re,Is,Ns,Ae,Ss,Us,w,Ce,Vs,Fs,Pe,Gs,Ms,Oe,Ws,Xs,qe,Ys,js,D,Le,zs,Js,He,Ks,Qs,Ie,Zs,$s,Ne,gs,to,x,Se,eo,ao,Ue,no,so,Ve,oo,co,Fe,lo,po,B,Ge,ro,io,Me,uo,ho,We,fo,ko,Xe,mo,vo,R,Ye,yo,bo,je,Eo,_o,ze,To,wo,Je,Do,xo,A,Ke,Bo,Ro,Qe,Ao,Co,Ze,Po,Oo,$e,qo,Ya,at,ge,Lo,Ho,ja,C,ta,Io,No,ea,So,Uo,aa,Vo,Fo,za,nt,na,Go,Mo,Ja,st,sa,Wo,Xo,Ka,Ht,Yo,Qa,It,jo,Za,Nt,zo,$a,St,Jo,ga,U,oa,ot,ca,Ko,Qo,la,Zo,$o,I,ct,pa,go,tc,ra,ec,ac,lt,ia,nc,sc,ua,oc,cc,pt,da,lc,pc,ha,rc,tn,Ut,ic,en,Vt,uc,an,V,fa,rt,ka,dc,hc,ma,fc,kc,N,it,va,mc,vc,ya,yc,bc,ut,ba,Ec,_c,Ea,Tc,wc,dt,_a,Dc,xc,Ta,Bc,nn,Ft,Rc,sn,Gt,Ac,on,Mt,Cc,cn,Wt,Pc,ln,Xt,Oc,pn,f,qc,wa,Lc,Hc,Da,Ic,Nc,xa,Sc,Uc,Ba,Vc,Fc,rn,Yt,Gc,un,ht,Ur=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>


<span class="token comment">// Pay equal payments at regular intervals using input locks</span>
<span class="token keyword">contract</span> <span class="token class-name">Annuity</span><span class="token punctuation">(</span>

    <span class="token comment">// interval for payouts, in blocks</span>
    <span class="token builtin">int</span> period<span class="token punctuation">,</span>

    <span class="token comment">// LockingBytecode of the beneficiary, the address receiving payments</span>
    <span class="token builtin">bytes</span> recipientLockingBytecode<span class="token punctuation">,</span>

    <span class="token comment">// amount paid in each installment</span>
    <span class="token builtin">int</span> installment<span class="token punctuation">,</span>

    <span class="token comment">// extra allowance for administration of contract</span>
    <span class="token comment">// fees are paid from executors' allowance.</span>
    <span class="token builtin">int</span> executorAllowance
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token comment">// Check that the first output sends to the recipient</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> recipientLockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Check that time has passed and that time locks are enabled</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// require the second output to match the active bytecode</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Get the total value on the contract</span>
        <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

        <span class="token comment">// Calculate value returned to the contract</span>
        <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> installment <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

        <span class="token comment">// Check that the outputs send the correct amounts</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> installment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,dn,jt,Mc,hn,zt,Wc,fn,k,Xc,Ra,Yc,jc,Aa,zc,Jc,Ca,Kc,Qc,Pa,Zc,$c,kn,F,gc,Oa,tl,el,mn,ft,Vr=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.0</span><span class="token punctuation">;</span>

  <span class="token keyword">contract</span> <span class="token class-name">Divide</span><span class="token punctuation">(</span>
      <span class="token comment">// allowance for party executing the contract</span>
      <span class="token builtin">int</span> executorAllowance<span class="token punctuation">,</span>
      <span class="token comment">// number of outputs receiving payout</span>
      <span class="token builtin">int</span> divisor<span class="token punctuation">,</span>

      <span class="token comment">// for each beneficiary, take the LockingBytecode as input</span>
      <span class="token builtin">bytes</span> r0LockingBytecode<span class="token punctuation">,</span>
      <span class="token builtin">bytes</span> r1LockingBytecode
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token comment">// distributes to each output in order</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> r0LockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> r1LockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Get the total value of inputs</span>
        <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

        <span class="token comment">// Total value paid to beneficiaries, minus executor allowance</span>
        <span class="token builtin">int</span> distributedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

        <span class="token comment">// Value paid to each beneficiary</span>
        <span class="token builtin">int</span> distribution <span class="token operator">=</span> distributedValue <span class="token operator">/</span> divisor<span class="token punctuation">;</span>

        <span class="token comment">// each output must be greater or equal to the distribution amount</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> distribution<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> distribution<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span></code>`,vn,Jt,al,yn,Kt,nl,bn,y,sl,qa,ol,cl,La,ll,pl,Ha,rl,il,En,P,ul,Ia,dl,hl,Na,fl,kl,_n,kt,Fr=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.0</span><span class="token punctuation">;</span>

<span class="token comment">// v20220609</span>

<span class="token keyword">contract</span> <span class="token class-name">Faucet</span><span class="token punctuation">(</span>

    <span class="token comment">// interval for payouts, in blocks</span>
    <span class="token builtin">int</span> period<span class="token punctuation">,</span>

    <span class="token comment">// amount to be paid by faucet allowance. </span>
    <span class="token builtin">int</span> payout<span class="token punctuation">,</span>

    <span class="token comment">// random number input into contract to have more than one</span>
    <span class="token builtin">int</span> index
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">drip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token comment">// Check that time has passed and that time locks are enabled</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
        <span class="token comment">// use the index</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// require the first output to match the active bytecode</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Get the total value on the contract</span>
        <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

        <span class="token comment">// Calculate value returned to the contract</span>
        <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> payout<span class="token punctuation">;</span>

        <span class="token comment">// If the value on the contract exceeds the payout amount</span>
        <span class="token comment">//  then assert that the value must return to the contract</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>currentValue <span class="token operator">></span> payout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`;return{c(){vt=p(),yt=n("h1"),Hn=c("Welcome!"),Sa=p(),bt=n("p"),In=c("Unspent Phi (\u20BF\u2219\u03D5) is an app for creating (and publishing) a set of simple contracts on the Bitcoin Cash (BCH) blockchain that anyone can execute. These contracts lock the value of unspent outputs from earlier transactions (UTXOs), and allow some small reward for any party to call a known contract (if valid according to the rules of BitcoinScript). Although simple, these contracts may be chained together to create complex outcomes."),Ua=p(),Et=n("p"),Nn=c("\u20BF\u2219\u03D5 contracts may be thought of as automata, machines that are unlocked and stepped forward by random participants on the blockchain. No one party has control, it\u2019s a race to spend them first. However, the code to unlock them must be known for the code to stepped forward. Money sent to \u20BF\u2219\u03D5 contracts appear identical to any other pay-to-script UTXOs on the network. Nothing is known about how to spend the contract until it is spent at least once, so in order for the contract to function automatically, both their existence and the parameters to unlock them must be known. While the code to unlock is broadcasted by spending the contract once, not all contracts can be spent right away, so it\u2019s easier and safer just to publish some unlock record and not worry about forgetting how to unlock them."),Va=p(),v=n("ul"),ee=n("li"),_t=n("a"),Sn=c("Welcome!"),Un=p(),ae=n("li"),Tt=n("a"),Vn=c("Definitions"),Fn=p(),wt=n("li"),Dt=n("a"),Gn=c("Contract Types"),L=n("ul"),ne=n("li"),xt=n("a"),Mn=c("Beneficiary Contracts"),Wn=p(),se=n("li"),Bt=n("a"),Xn=c("\u201CFree\u201D contracts"),Yn=p(),oe=n("li"),Rt=n("a"),jn=c("Timelock v non-timelocked"),zn=p(),At=n("li"),Ct=n("a"),Jn=c("Implemented Contracts"),H=n("ul"),ce=n("li"),Pt=n("a"),Kn=c("Annuity"),Qn=p(),le=n("li"),Ot=n("a"),Zn=c("Divide"),$n=p(),pe=n("li"),qt=n("a"),gn=c("Faucet"),Fa=p(),Lt=n("h1"),ts=c("Definitions"),Ga=p(),g=n("p"),re=n("strong"),es=c("covenant"),as=c(": A contract with variable parameters stored in script, which change."),Ma=p(),tt=n("p"),ie=n("strong"),ns=c("satoshis"),ss=c(": A unit of account (on the Bitcoin Cash fork of the initial bitcoin blockchain). A hundred million satoshi are equal to 1 Bitcoin Cash."),Wa=p(),et=n("p"),ue=n("strong"),os=c("blocks (timescale)"),cs=c(": The base unit of time on bitcoin, about 10 minutes on average."),Xa=p(),S=n("table"),de=n("thead"),b=n("tr"),he=n("th"),ls=c("Blocks"),ps=p(),fe=n("th"),rs=c("Minutes"),is=p(),ke=n("th"),us=c("Days"),ds=p(),me=n("th"),hs=c("Years"),fs=p(),d=n("tbody"),E=n("tr"),ve=n("td"),ks=c("1"),ms=p(),ye=n("td"),vs=c("10"),ys=p(),be=n("td"),bs=c("-"),Es=p(),Ee=n("td"),_s=c("-"),Ts=p(),_=n("tr"),_e=n("td"),ws=c("10"),Ds=p(),Te=n("td"),xs=c("100"),Bs=p(),we=n("td"),Rs=c("-"),As=p(),De=n("td"),Cs=c("-"),Ps=p(),T=n("tr"),xe=n("td"),Os=c("100"),qs=p(),Be=n("td"),Ls=c("1000"),Hs=p(),Re=n("td"),Is=c("0.694"),Ns=p(),Ae=n("td"),Ss=c("-"),Us=p(),w=n("tr"),Ce=n("td"),Vs=c("144"),Fs=p(),Pe=n("td"),Gs=c("1440"),Ms=p(),Oe=n("td"),Ws=c("1"),Xs=p(),qe=n("td"),Ys=c("-"),js=p(),D=n("tr"),Le=n("td"),zs=c("1000"),Js=p(),He=n("td"),Ks=c("-"),Qs=p(),Ie=n("td"),Zs=c("6.94"),$s=p(),Ne=n("td"),gs=c("-"),to=p(),x=n("tr"),Se=n("td"),eo=c("4000"),ao=p(),Ue=n("td"),no=c("-"),so=p(),Ve=n("td"),oo=c("27.7"),co=p(),Fe=n("td"),lo=c("-"),po=p(),B=n("tr"),Ge=n("td"),ro=c("13140"),io=p(),Me=n("td"),uo=c("-"),ho=p(),We=n("td"),fo=c("91.25"),ko=p(),Xe=n("td"),mo=c("0.249"),vo=p(),R=n("tr"),Ye=n("td"),yo=c("26280"),bo=p(),je=n("td"),Eo=c("-"),_o=p(),ze=n("td"),To=c("-"),wo=p(),Je=n("td"),Do=c("0.499"),xo=p(),A=n("tr"),Ke=n("td"),Bo=c("52560"),Ro=p(),Qe=n("td"),Ao=c("-"),Co=p(),Ze=n("td"),Po=c("-"),Oo=p(),$e=n("td"),qo=c("0.999"),Ya=p(),at=n("p"),ge=n("strong"),Lo=c("OP_RETURN"),Ho=c(": A code (106) in BitcoinScript for transaction outputs which can store arbitrary data."),ja=p(),C=n("p"),ta=n("strong"),Io=c("OP_RETURN data"),No=c(": Data in OP_RETURNs is commonly encoded by pushing the total number of bytes, followed by the data bytes. For example "),ea=n("code"),So=c("04"),Uo=c(" followed by "),aa=n("code"),Vo=c("7574786f"),Fo=c(" (4 bytes of in two letter hex). This format is used to \u201Cbroadcast\u201D \u20BF\u2219\u03D5 contracts."),za=p(),nt=n("p"),na=n("strong"),Go=c("published"),Mo=c(": In the context of an unspent contract, a contract is published if the parameters to construct and spend it are recorded on the blockchain, either in an OP_RETURN or by reference to the spent output."),Ja=p(),st=n("p"),sa=n("strong"),Wo=c("Unspent Transaction Output (UTXO)"),Xo=c(": some value, defined by the output of a previous transaction, which is locked by some code, either the hash of a public key (cashaddr), or a script."),Ka=p(),Ht=n("h1"),Yo=c("Contract Types"),Qa=p(),It=n("p"),jo=c("Each \u20BF\u2219\u03D5 contract is designed to do one thing. The contracts available (so far) are as follows:"),Za=p(),Nt=n("h2"),zo=c("Beneficiary Contracts"),$a=p(),St=n("p"),Jo=c("Some contracts control value on behalf of the contract creator. They all have an executor allowance which can be claimed by the party which submits a valid spending transactions."),ga=p(),U=n("table"),oa=n("thead"),ot=n("tr"),ca=n("th"),Ko=c("Name"),Qo=p(),la=n("th"),Zo=c("Description"),$o=p(),I=n("tbody"),ct=n("tr"),pa=n("td"),go=c("Annuity"),tc=p(),ra=n("td"),ec=c("Equal payments over time."),ac=p(),lt=n("tr"),ia=n("td"),nc=c("Divide"),sc=p(),ua=n("td"),oc=c("Divide money into equal payments, up to four addresses"),cc=p(),pt=n("tr"),da=n("td"),lc=c("Perpetuity"),pc=p(),ha=n("td"),rc=c("Pay a fixed fraction of total value at intervals"),tn=p(),Ut=n("h2"),ic=c("\u201CFree\u201D contracts"),en=p(),Vt=n("p"),uc=c("Contracts with locked value that can be spent by anyone can be characterized as \u201Cfree\u201D. At present these include faucets, mining covenants, and a contract providing the facility to record data for free."),an=p(),V=n("table"),fa=n("thead"),rt=n("tr"),ka=n("th"),dc=c("Name"),hc=p(),ma=n("th"),fc=c("Description"),kc=p(),N=n("tbody"),it=n("tr"),va=n("td"),mc=c("Faucet"),vc=p(),ya=n("td"),yc=c("Distributes some free bitcoin per period"),bc=p(),ut=n("tr"),ba=n("td"),Ec=c("Mine"),_c=p(),Ea=n("td"),Tc=c("Distributes some bitcoin per period, for proof of work"),wc=p(),dt=n("tr"),_a=n("td"),Dc=c("Record"),xc=p(),Ta=n("td"),Bc=c("Broadcast a contract to the blockchain"),nn=p(),Ft=n("h2"),Rc=c("Timelock v non-timelocked"),sn=p(),Gt=n("p"),Ac=c("The Divide and Record contracts are not timelocked, they may be called at anytime."),on=p(),Mt=n("h1"),Cc=c("Implemented Contracts"),cn=p(),Wt=n("h2"),Pc=c("Annuity"),ln=p(),Xt=n("p"),Oc=c("The annuity contract pays a fixed amount (in satoshis) to a predefined locking bytecode (i.e. address)."),pn=p(),f=n("p"),qc=c("To prevent the contract from being called successively (thus paying out all at once), a timelock is added restricting input be of a certain age (in blocks), this parameter is called the "),wa=n("code"),Lc=c("period"),Hc=c(". The beneficiary address (or contract) is denoted by the "),Da=n("code"),Ic=c("recipientLockingBytecode"),Nc=c(". The amount paid in each period is the "),xa=n("code"),Sc=c("installment"),Uc=c(". To aid in execution, a small fee is left as "),Ba=n("code"),Vc=c("executorAllowance"),Fc=c(" for each execution of the contract, it may be paid to anyone."),rn=p(),Yt=n("p"),Gc=c("This contract: checks that the first output pays to the beneficiary; checks that the timelock is satisfied; checks that the second output pays back to the contract; gets the total value being spent; calculates the amount to be returned, and finally, checks that both the installment amount of the first output & the total returned to the contract exceed the required amounts."),un=p(),ht=n("pre"),dn=p(),jt=n("h2"),Mc=c("Divide"),hn=p(),zt=n("p"),Wc=c("The divide contract splits inputs across a predefined set of output destinations."),fn=p(),k=n("p"),Xc=c("Each output is denoted by "),Ra=n("code"),Yc=c("r#LockingBytecode"),jc=c(", where "),Aa=n("code"),zc=c("#"),Jc=c(" is the index of the output. Since early BitcoinScript did not have loops, this contract was written with a static list of outputs and a "),Ca=n("code"),Kc=c("divisor"),Qc=c(", which is simply the number of outputs. An "),Pa=n("code"),Zc=c("executorAllowance"),$c=c(" amount is subtracted from the total distribution amount, which may be spent by anyone as long as the amount payed to the hardcoded receipts equals or exceeds the alloted share."),kn=p(),F=n("p"),gc=c("This contract: checks that each of the output destinations match the predefined output; calculates the total value on the contract; calculates the amount to be paid to each receipt ("),Oa=n("code"),tl=c("distribution"),el=c("), and finally calculates that each receipt receives an output greater than, or equal to, the distribution amount."),mn=p(),ft=n("pre"),vn=p(),Jt=n("h2"),al=c("Faucet"),yn=p(),Kt=n("p"),nl=c("The faucet contract pays \u201Cfree\u201D bitcoin."),bn=p(),y=n("p"),sl=c("To prevent the faucet from being drained by successive calls, a "),qa=n("code"),ol=c("period"),cl=c(" timeout is set to specify the minimum age of the input being spent. The amount available to be spent is defined by a "),La=n("code"),ll=c("payout"),pl=c(".  As a convenience, and to have multiple faucets with the same payout, an "),Ha=n("code"),rl=c("index"),il=c(" parameter is added to distinguish identical contracts."),En=p(),P=n("p"),ul=c("The steps of this contract are as follows: first, it requires that the transaction be called with an age that is greater than the current "),Ia=n("code"),dl=c("period"),hl=c("; the "),Na=n("code"),fl=c("index"),kl=c(" is used so that it is not unused; next the first output must return all value to the faucet contract, and finally the returned value is calculate and must be returned to the faucet if the current value exceeds the payout."),_n=p(),kt=n("pre"),this.h()},l(a){zr("svelte-14lk5k5",document.head).forEach(e),vt=r(a),yt=s(a,"H1",{});var xl=o(yt);Hn=l(xl,"Welcome!"),xl.forEach(e),Sa=r(a),bt=s(a,"P",{});var Bl=o(bt);In=l(Bl,"Unspent Phi (\u20BF\u2219\u03D5) is an app for creating (and publishing) a set of simple contracts on the Bitcoin Cash (BCH) blockchain that anyone can execute. These contracts lock the value of unspent outputs from earlier transactions (UTXOs), and allow some small reward for any party to call a known contract (if valid according to the rules of BitcoinScript). Although simple, these contracts may be chained together to create complex outcomes."),Bl.forEach(e),Ua=r(a),Et=s(a,"P",{});var Rl=o(Et);Nn=l(Rl,"\u20BF\u2219\u03D5 contracts may be thought of as automata, machines that are unlocked and stepped forward by random participants on the blockchain. No one party has control, it\u2019s a race to spend them first. However, the code to unlock them must be known for the code to stepped forward. Money sent to \u20BF\u2219\u03D5 contracts appear identical to any other pay-to-script UTXOs on the network. Nothing is known about how to spend the contract until it is spent at least once, so in order for the contract to function automatically, both their existence and the parameters to unlock them must be known. While the code to unlock is broadcasted by spending the contract once, not all contracts can be spent right away, so it\u2019s easier and safer just to publish some unlock record and not worry about forgetting how to unlock them."),Rl.forEach(e),Va=r(a),v=s(a,"UL",{});var G=o(v);ee=s(G,"LI",{});var Al=o(ee);_t=s(Al,"A",{href:!0});var Cl=o(_t);Sn=l(Cl,"Welcome!"),Cl.forEach(e),Al.forEach(e),Un=r(G),ae=s(G,"LI",{});var Pl=o(ae);Tt=s(Pl,"A",{href:!0});var Ol=o(Tt);Vn=l(Ol,"Definitions"),Ol.forEach(e),Pl.forEach(e),Fn=r(G),wt=s(G,"LI",{});var ml=o(wt);Dt=s(ml,"A",{href:!0});var ql=o(Dt);Gn=l(ql,"Contract Types"),ql.forEach(e),L=s(ml,"UL",{});var Qt=o(L);ne=s(Qt,"LI",{});var Ll=o(ne);xt=s(Ll,"A",{href:!0});var Hl=o(xt);Mn=l(Hl,"Beneficiary Contracts"),Hl.forEach(e),Ll.forEach(e),Wn=r(Qt),se=s(Qt,"LI",{});var Il=o(se);Bt=s(Il,"A",{href:!0});var Nl=o(Bt);Xn=l(Nl,"\u201CFree\u201D contracts"),Nl.forEach(e),Il.forEach(e),Yn=r(Qt),oe=s(Qt,"LI",{});var Sl=o(oe);Rt=s(Sl,"A",{href:!0});var Ul=o(Rt);jn=l(Ul,"Timelock v non-timelocked"),Ul.forEach(e),Sl.forEach(e),Qt.forEach(e),ml.forEach(e),zn=r(G),At=s(G,"LI",{});var vl=o(At);Ct=s(vl,"A",{href:!0});var Vl=o(Ct);Jn=l(Vl,"Implemented Contracts"),Vl.forEach(e),H=s(vl,"UL",{});var Zt=o(H);ce=s(Zt,"LI",{});var Fl=o(ce);Pt=s(Fl,"A",{href:!0});var Gl=o(Pt);Kn=l(Gl,"Annuity"),Gl.forEach(e),Fl.forEach(e),Qn=r(Zt),le=s(Zt,"LI",{});var Ml=o(le);Ot=s(Ml,"A",{href:!0});var Wl=o(Ot);Zn=l(Wl,"Divide"),Wl.forEach(e),Ml.forEach(e),$n=r(Zt),pe=s(Zt,"LI",{});var Xl=o(pe);qt=s(Xl,"A",{href:!0});var Yl=o(qt);gn=l(Yl,"Faucet"),Yl.forEach(e),Xl.forEach(e),Zt.forEach(e),vl.forEach(e),G.forEach(e),Fa=r(a),Lt=s(a,"H1",{});var jl=o(Lt);ts=l(jl,"Definitions"),jl.forEach(e),Ga=r(a),g=s(a,"P",{});var yl=o(g);re=s(yl,"STRONG",{});var zl=o(re);es=l(zl,"covenant"),zl.forEach(e),as=l(yl,": A contract with variable parameters stored in script, which change."),yl.forEach(e),Ma=r(a),tt=s(a,"P",{});var bl=o(tt);ie=s(bl,"STRONG",{});var Jl=o(ie);ns=l(Jl,"satoshis"),Jl.forEach(e),ss=l(bl,": A unit of account (on the Bitcoin Cash fork of the initial bitcoin blockchain). A hundred million satoshi are equal to 1 Bitcoin Cash."),bl.forEach(e),Wa=r(a),et=s(a,"P",{});var El=o(et);ue=s(El,"STRONG",{});var Kl=o(ue);os=l(Kl,"blocks (timescale)"),Kl.forEach(e),cs=l(El,": The base unit of time on bitcoin, about 10 minutes on average."),El.forEach(e),Xa=r(a),S=s(a,"TABLE",{});var Tn=o(S);de=s(Tn,"THEAD",{});var Ql=o(de);b=s(Ql,"TR",{});var M=o(b);he=s(M,"TH",{});var Zl=o(he);ls=l(Zl,"Blocks"),Zl.forEach(e),ps=r(M),fe=s(M,"TH",{});var $l=o(fe);rs=l($l,"Minutes"),$l.forEach(e),is=r(M),ke=s(M,"TH",{});var gl=o(ke);us=l(gl,"Days"),gl.forEach(e),ds=r(M),me=s(M,"TH",{});var tp=o(me);hs=l(tp,"Years"),tp.forEach(e),M.forEach(e),Ql.forEach(e),fs=r(Tn),d=s(Tn,"TBODY",{});var h=o(d);E=s(h,"TR",{});var W=o(E);ve=s(W,"TD",{});var ep=o(ve);ks=l(ep,"1"),ep.forEach(e),ms=r(W),ye=s(W,"TD",{});var ap=o(ye);vs=l(ap,"10"),ap.forEach(e),ys=r(W),be=s(W,"TD",{});var np=o(be);bs=l(np,"-"),np.forEach(e),Es=r(W),Ee=s(W,"TD",{});var sp=o(Ee);_s=l(sp,"-"),sp.forEach(e),W.forEach(e),Ts=r(h),_=s(h,"TR",{});var X=o(_);_e=s(X,"TD",{});var op=o(_e);ws=l(op,"10"),op.forEach(e),Ds=r(X),Te=s(X,"TD",{});var cp=o(Te);xs=l(cp,"100"),cp.forEach(e),Bs=r(X),we=s(X,"TD",{});var lp=o(we);Rs=l(lp,"-"),lp.forEach(e),As=r(X),De=s(X,"TD",{});var pp=o(De);Cs=l(pp,"-"),pp.forEach(e),X.forEach(e),Ps=r(h),T=s(h,"TR",{});var Y=o(T);xe=s(Y,"TD",{});var rp=o(xe);Os=l(rp,"100"),rp.forEach(e),qs=r(Y),Be=s(Y,"TD",{});var ip=o(Be);Ls=l(ip,"1000"),ip.forEach(e),Hs=r(Y),Re=s(Y,"TD",{});var up=o(Re);Is=l(up,"0.694"),up.forEach(e),Ns=r(Y),Ae=s(Y,"TD",{});var dp=o(Ae);Ss=l(dp,"-"),dp.forEach(e),Y.forEach(e),Us=r(h),w=s(h,"TR",{});var j=o(w);Ce=s(j,"TD",{});var hp=o(Ce);Vs=l(hp,"144"),hp.forEach(e),Fs=r(j),Pe=s(j,"TD",{});var fp=o(Pe);Gs=l(fp,"1440"),fp.forEach(e),Ms=r(j),Oe=s(j,"TD",{});var kp=o(Oe);Ws=l(kp,"1"),kp.forEach(e),Xs=r(j),qe=s(j,"TD",{});var mp=o(qe);Ys=l(mp,"-"),mp.forEach(e),j.forEach(e),js=r(h),D=s(h,"TR",{});var z=o(D);Le=s(z,"TD",{});var vp=o(Le);zs=l(vp,"1000"),vp.forEach(e),Js=r(z),He=s(z,"TD",{});var yp=o(He);Ks=l(yp,"-"),yp.forEach(e),Qs=r(z),Ie=s(z,"TD",{});var bp=o(Ie);Zs=l(bp,"6.94"),bp.forEach(e),$s=r(z),Ne=s(z,"TD",{});var Ep=o(Ne);gs=l(Ep,"-"),Ep.forEach(e),z.forEach(e),to=r(h),x=s(h,"TR",{});var J=o(x);Se=s(J,"TD",{});var _p=o(Se);eo=l(_p,"4000"),_p.forEach(e),ao=r(J),Ue=s(J,"TD",{});var Tp=o(Ue);no=l(Tp,"-"),Tp.forEach(e),so=r(J),Ve=s(J,"TD",{});var wp=o(Ve);oo=l(wp,"27.7"),wp.forEach(e),co=r(J),Fe=s(J,"TD",{});var Dp=o(Fe);lo=l(Dp,"-"),Dp.forEach(e),J.forEach(e),po=r(h),B=s(h,"TR",{});var K=o(B);Ge=s(K,"TD",{});var xp=o(Ge);ro=l(xp,"13140"),xp.forEach(e),io=r(K),Me=s(K,"TD",{});var Bp=o(Me);uo=l(Bp,"-"),Bp.forEach(e),ho=r(K),We=s(K,"TD",{});var Rp=o(We);fo=l(Rp,"91.25"),Rp.forEach(e),ko=r(K),Xe=s(K,"TD",{});var Ap=o(Xe);mo=l(Ap,"0.249"),Ap.forEach(e),K.forEach(e),vo=r(h),R=s(h,"TR",{});var Q=o(R);Ye=s(Q,"TD",{});var Cp=o(Ye);yo=l(Cp,"26280"),Cp.forEach(e),bo=r(Q),je=s(Q,"TD",{});var Pp=o(je);Eo=l(Pp,"-"),Pp.forEach(e),_o=r(Q),ze=s(Q,"TD",{});var Op=o(ze);To=l(Op,"-"),Op.forEach(e),wo=r(Q),Je=s(Q,"TD",{});var qp=o(Je);Do=l(qp,"0.499"),qp.forEach(e),Q.forEach(e),xo=r(h),A=s(h,"TR",{});var Z=o(A);Ke=s(Z,"TD",{});var Lp=o(Ke);Bo=l(Lp,"52560"),Lp.forEach(e),Ro=r(Z),Qe=s(Z,"TD",{});var Hp=o(Qe);Ao=l(Hp,"-"),Hp.forEach(e),Co=r(Z),Ze=s(Z,"TD",{});var Ip=o(Ze);Po=l(Ip,"-"),Ip.forEach(e),Oo=r(Z),$e=s(Z,"TD",{});var Np=o($e);qo=l(Np,"0.999"),Np.forEach(e),Z.forEach(e),h.forEach(e),Tn.forEach(e),Ya=r(a),at=s(a,"P",{});var _l=o(at);ge=s(_l,"STRONG",{});var Sp=o(ge);Lo=l(Sp,"OP_RETURN"),Sp.forEach(e),Ho=l(_l,": A code (106) in BitcoinScript for transaction outputs which can store arbitrary data."),_l.forEach(e),ja=r(a),C=s(a,"P",{});var mt=o(C);ta=s(mt,"STRONG",{});var Up=o(ta);Io=l(Up,"OP_RETURN data"),Up.forEach(e),No=l(mt,": Data in OP_RETURNs is commonly encoded by pushing the total number of bytes, followed by the data bytes. For example "),ea=s(mt,"CODE",{});var Vp=o(ea);So=l(Vp,"04"),Vp.forEach(e),Uo=l(mt," followed by "),aa=s(mt,"CODE",{});var Fp=o(aa);Vo=l(Fp,"7574786f"),Fp.forEach(e),Fo=l(mt," (4 bytes of in two letter hex). This format is used to \u201Cbroadcast\u201D \u20BF\u2219\u03D5 contracts."),mt.forEach(e),za=r(a),nt=s(a,"P",{});var Tl=o(nt);na=s(Tl,"STRONG",{});var Gp=o(na);Go=l(Gp,"published"),Gp.forEach(e),Mo=l(Tl,": In the context of an unspent contract, a contract is published if the parameters to construct and spend it are recorded on the blockchain, either in an OP_RETURN or by reference to the spent output."),Tl.forEach(e),Ja=r(a),st=s(a,"P",{});var wl=o(st);sa=s(wl,"STRONG",{});var Mp=o(sa);Wo=l(Mp,"Unspent Transaction Output (UTXO)"),Mp.forEach(e),Xo=l(wl,": some value, defined by the output of a previous transaction, which is locked by some code, either the hash of a public key (cashaddr), or a script."),wl.forEach(e),Ka=r(a),Ht=s(a,"H1",{});var Wp=o(Ht);Yo=l(Wp,"Contract Types"),Wp.forEach(e),Qa=r(a),It=s(a,"P",{});var Xp=o(It);jo=l(Xp,"Each \u20BF\u2219\u03D5 contract is designed to do one thing. The contracts available (so far) are as follows:"),Xp.forEach(e),Za=r(a),Nt=s(a,"H2",{});var Yp=o(Nt);zo=l(Yp,"Beneficiary Contracts"),Yp.forEach(e),$a=r(a),St=s(a,"P",{});var jp=o(St);Jo=l(jp,"Some contracts control value on behalf of the contract creator. They all have an executor allowance which can be claimed by the party which submits a valid spending transactions."),jp.forEach(e),ga=r(a),U=s(a,"TABLE",{});var wn=o(U);oa=s(wn,"THEAD",{});var zp=o(oa);ot=s(zp,"TR",{});var Dn=o(ot);ca=s(Dn,"TH",{});var Jp=o(ca);Ko=l(Jp,"Name"),Jp.forEach(e),Qo=r(Dn),la=s(Dn,"TH",{});var Kp=o(la);Zo=l(Kp,"Description"),Kp.forEach(e),Dn.forEach(e),zp.forEach(e),$o=r(wn),I=s(wn,"TBODY",{});var $t=o(I);ct=s($t,"TR",{});var xn=o(ct);pa=s(xn,"TD",{});var Qp=o(pa);go=l(Qp,"Annuity"),Qp.forEach(e),tc=r(xn),ra=s(xn,"TD",{});var Zp=o(ra);ec=l(Zp,"Equal payments over time."),Zp.forEach(e),xn.forEach(e),ac=r($t),lt=s($t,"TR",{});var Bn=o(lt);ia=s(Bn,"TD",{});var $p=o(ia);nc=l($p,"Divide"),$p.forEach(e),sc=r(Bn),ua=s(Bn,"TD",{});var gp=o(ua);oc=l(gp,"Divide money into equal payments, up to four addresses"),gp.forEach(e),Bn.forEach(e),cc=r($t),pt=s($t,"TR",{});var Rn=o(pt);da=s(Rn,"TD",{});var tr=o(da);lc=l(tr,"Perpetuity"),tr.forEach(e),pc=r(Rn),ha=s(Rn,"TD",{});var er=o(ha);rc=l(er,"Pay a fixed fraction of total value at intervals"),er.forEach(e),Rn.forEach(e),$t.forEach(e),wn.forEach(e),tn=r(a),Ut=s(a,"H2",{});var ar=o(Ut);ic=l(ar,"\u201CFree\u201D contracts"),ar.forEach(e),en=r(a),Vt=s(a,"P",{});var nr=o(Vt);uc=l(nr,"Contracts with locked value that can be spent by anyone can be characterized as \u201Cfree\u201D. At present these include faucets, mining covenants, and a contract providing the facility to record data for free."),nr.forEach(e),an=r(a),V=s(a,"TABLE",{});var An=o(V);fa=s(An,"THEAD",{});var sr=o(fa);rt=s(sr,"TR",{});var Cn=o(rt);ka=s(Cn,"TH",{});var or=o(ka);dc=l(or,"Name"),or.forEach(e),hc=r(Cn),ma=s(Cn,"TH",{});var cr=o(ma);fc=l(cr,"Description"),cr.forEach(e),Cn.forEach(e),sr.forEach(e),kc=r(An),N=s(An,"TBODY",{});var gt=o(N);it=s(gt,"TR",{});var Pn=o(it);va=s(Pn,"TD",{});var lr=o(va);mc=l(lr,"Faucet"),lr.forEach(e),vc=r(Pn),ya=s(Pn,"TD",{});var pr=o(ya);yc=l(pr,"Distributes some free bitcoin per period"),pr.forEach(e),Pn.forEach(e),bc=r(gt),ut=s(gt,"TR",{});var On=o(ut);ba=s(On,"TD",{});var rr=o(ba);Ec=l(rr,"Mine"),rr.forEach(e),_c=r(On),Ea=s(On,"TD",{});var ir=o(Ea);Tc=l(ir,"Distributes some bitcoin per period, for proof of work"),ir.forEach(e),On.forEach(e),wc=r(gt),dt=s(gt,"TR",{});var qn=o(dt);_a=s(qn,"TD",{});var ur=o(_a);Dc=l(ur,"Record"),ur.forEach(e),xc=r(qn),Ta=s(qn,"TD",{});var dr=o(Ta);Bc=l(dr,"Broadcast a contract to the blockchain"),dr.forEach(e),qn.forEach(e),gt.forEach(e),An.forEach(e),nn=r(a),Ft=s(a,"H2",{});var hr=o(Ft);Rc=l(hr,"Timelock v non-timelocked"),hr.forEach(e),sn=r(a),Gt=s(a,"P",{});var fr=o(Gt);Ac=l(fr,"The Divide and Record contracts are not timelocked, they may be called at anytime."),fr.forEach(e),on=r(a),Mt=s(a,"H1",{});var kr=o(Mt);Cc=l(kr,"Implemented Contracts"),kr.forEach(e),cn=r(a),Wt=s(a,"H2",{});var mr=o(Wt);Pc=l(mr,"Annuity"),mr.forEach(e),ln=r(a),Xt=s(a,"P",{});var vr=o(Xt);Oc=l(vr,"The annuity contract pays a fixed amount (in satoshis) to a predefined locking bytecode (i.e. address)."),vr.forEach(e),pn=r(a),f=s(a,"P",{});var O=o(f);qc=l(O,"To prevent the contract from being called successively (thus paying out all at once), a timelock is added restricting input be of a certain age (in blocks), this parameter is called the "),wa=s(O,"CODE",{});var yr=o(wa);Lc=l(yr,"period"),yr.forEach(e),Hc=l(O,". The beneficiary address (or contract) is denoted by the "),Da=s(O,"CODE",{});var br=o(Da);Ic=l(br,"recipientLockingBytecode"),br.forEach(e),Nc=l(O,". The amount paid in each period is the "),xa=s(O,"CODE",{});var Er=o(xa);Sc=l(Er,"installment"),Er.forEach(e),Uc=l(O,". To aid in execution, a small fee is left as "),Ba=s(O,"CODE",{});var _r=o(Ba);Vc=l(_r,"executorAllowance"),_r.forEach(e),Fc=l(O," for each execution of the contract, it may be paid to anyone."),O.forEach(e),rn=r(a),Yt=s(a,"P",{});var Tr=o(Yt);Gc=l(Tr,"This contract: checks that the first output pays to the beneficiary; checks that the timelock is satisfied; checks that the second output pays back to the contract; gets the total value being spent; calculates the amount to be returned, and finally, checks that both the installment amount of the first output & the total returned to the contract exceed the required amounts."),Tr.forEach(e),un=r(a),ht=s(a,"PRE",{class:!0});var Gr=o(ht);Gr.forEach(e),dn=r(a),jt=s(a,"H2",{});var wr=o(jt);Mc=l(wr,"Divide"),wr.forEach(e),hn=r(a),zt=s(a,"P",{});var Dr=o(zt);Wc=l(Dr,"The divide contract splits inputs across a predefined set of output destinations."),Dr.forEach(e),fn=r(a),k=s(a,"P",{});var q=o(k);Xc=l(q,"Each output is denoted by "),Ra=s(q,"CODE",{});var xr=o(Ra);Yc=l(xr,"r#LockingBytecode"),xr.forEach(e),jc=l(q,", where "),Aa=s(q,"CODE",{});var Br=o(Aa);zc=l(Br,"#"),Br.forEach(e),Jc=l(q," is the index of the output. Since early BitcoinScript did not have loops, this contract was written with a static list of outputs and a "),Ca=s(q,"CODE",{});var Rr=o(Ca);Kc=l(Rr,"divisor"),Rr.forEach(e),Qc=l(q,", which is simply the number of outputs. An "),Pa=s(q,"CODE",{});var Ar=o(Pa);Zc=l(Ar,"executorAllowance"),Ar.forEach(e),$c=l(q," amount is subtracted from the total distribution amount, which may be spent by anyone as long as the amount payed to the hardcoded receipts equals or exceeds the alloted share."),q.forEach(e),kn=r(a),F=s(a,"P",{});var Ln=o(F);gc=l(Ln,"This contract: checks that each of the output destinations match the predefined output; calculates the total value on the contract; calculates the amount to be paid to each receipt ("),Oa=s(Ln,"CODE",{});var Cr=o(Oa);tl=l(Cr,"distribution"),Cr.forEach(e),el=l(Ln,"), and finally calculates that each receipt receives an output greater than, or equal to, the distribution amount."),Ln.forEach(e),mn=r(a),ft=s(a,"PRE",{class:!0});var Mr=o(ft);Mr.forEach(e),vn=r(a),Jt=s(a,"H2",{});var Pr=o(Jt);al=l(Pr,"Faucet"),Pr.forEach(e),yn=r(a),Kt=s(a,"P",{});var Or=o(Kt);nl=l(Or,"The faucet contract pays \u201Cfree\u201D bitcoin."),Or.forEach(e),bn=r(a),y=s(a,"P",{});var $=o(y);sl=l($,"To prevent the faucet from being drained by successive calls, a "),qa=s($,"CODE",{});var qr=o(qa);ol=l(qr,"period"),qr.forEach(e),cl=l($," timeout is set to specify the minimum age of the input being spent. The amount available to be spent is defined by a "),La=s($,"CODE",{});var Lr=o(La);ll=l(Lr,"payout"),Lr.forEach(e),pl=l($,".  As a convenience, and to have multiple faucets with the same payout, an "),Ha=s($,"CODE",{});var Hr=o(Ha);rl=l(Hr,"index"),Hr.forEach(e),il=l($," parameter is added to distinguish identical contracts."),$.forEach(e),En=r(a),P=s(a,"P",{});var te=o(P);ul=l(te,"The steps of this contract are as follows: first, it requires that the transaction be called with an age that is greater than the current "),Ia=s(te,"CODE",{});var Ir=o(Ia);dl=l(Ir,"period"),Ir.forEach(e),hl=l(te,"; the "),Na=s(te,"CODE",{});var Nr=o(Na);fl=l(Nr,"index"),Nr.forEach(e),kl=l(te," is used so that it is not unused; next the first output must return all value to the faucet contract, and finally the returned value is calculate and must be returned to the faucet if the current value exceeds the payout."),te.forEach(e),_n=r(a),kt=s(a,"PRE",{class:!0});var Wr=o(kt);Wr.forEach(e),this.h()},h(){document.title="\u20BF\u2219\u03D5",m(_t,"href","#welcome"),m(Tt,"href","#definitions"),m(Dt,"href","#contract-types"),m(xt,"href","#beneficiary-contracts"),m(Bt,"href","#free-contracts"),m(Rt,"href","#timelock-v-non-timelocked"),m(Ct,"href","#implemented-contracts"),m(Pt,"href","#annuity"),m(Ot,"href","#divide"),m(qt,"href","#faucet"),m(ht,"class","language-solidity"),m(ft,"class","language-solidity"),m(kt,"class","language-solidity")},m(a,i){u(a,vt,i),u(a,yt,i),t(yt,Hn),u(a,Sa,i),u(a,bt,i),t(bt,In),u(a,Ua,i),u(a,Et,i),t(Et,Nn),u(a,Va,i),u(a,v,i),t(v,ee),t(ee,_t),t(_t,Sn),t(v,Un),t(v,ae),t(ae,Tt),t(Tt,Vn),t(v,Fn),t(v,wt),t(wt,Dt),t(Dt,Gn),t(wt,L),t(L,ne),t(ne,xt),t(xt,Mn),t(L,Wn),t(L,se),t(se,Bt),t(Bt,Xn),t(L,Yn),t(L,oe),t(oe,Rt),t(Rt,jn),t(v,zn),t(v,At),t(At,Ct),t(Ct,Jn),t(At,H),t(H,ce),t(ce,Pt),t(Pt,Kn),t(H,Qn),t(H,le),t(le,Ot),t(Ot,Zn),t(H,$n),t(H,pe),t(pe,qt),t(qt,gn),u(a,Fa,i),u(a,Lt,i),t(Lt,ts),u(a,Ga,i),u(a,g,i),t(g,re),t(re,es),t(g,as),u(a,Ma,i),u(a,tt,i),t(tt,ie),t(ie,ns),t(tt,ss),u(a,Wa,i),u(a,et,i),t(et,ue),t(ue,os),t(et,cs),u(a,Xa,i),u(a,S,i),t(S,de),t(de,b),t(b,he),t(he,ls),t(b,ps),t(b,fe),t(fe,rs),t(b,is),t(b,ke),t(ke,us),t(b,ds),t(b,me),t(me,hs),t(S,fs),t(S,d),t(d,E),t(E,ve),t(ve,ks),t(E,ms),t(E,ye),t(ye,vs),t(E,ys),t(E,be),t(be,bs),t(E,Es),t(E,Ee),t(Ee,_s),t(d,Ts),t(d,_),t(_,_e),t(_e,ws),t(_,Ds),t(_,Te),t(Te,xs),t(_,Bs),t(_,we),t(we,Rs),t(_,As),t(_,De),t(De,Cs),t(d,Ps),t(d,T),t(T,xe),t(xe,Os),t(T,qs),t(T,Be),t(Be,Ls),t(T,Hs),t(T,Re),t(Re,Is),t(T,Ns),t(T,Ae),t(Ae,Ss),t(d,Us),t(d,w),t(w,Ce),t(Ce,Vs),t(w,Fs),t(w,Pe),t(Pe,Gs),t(w,Ms),t(w,Oe),t(Oe,Ws),t(w,Xs),t(w,qe),t(qe,Ys),t(d,js),t(d,D),t(D,Le),t(Le,zs),t(D,Js),t(D,He),t(He,Ks),t(D,Qs),t(D,Ie),t(Ie,Zs),t(D,$s),t(D,Ne),t(Ne,gs),t(d,to),t(d,x),t(x,Se),t(Se,eo),t(x,ao),t(x,Ue),t(Ue,no),t(x,so),t(x,Ve),t(Ve,oo),t(x,co),t(x,Fe),t(Fe,lo),t(d,po),t(d,B),t(B,Ge),t(Ge,ro),t(B,io),t(B,Me),t(Me,uo),t(B,ho),t(B,We),t(We,fo),t(B,ko),t(B,Xe),t(Xe,mo),t(d,vo),t(d,R),t(R,Ye),t(Ye,yo),t(R,bo),t(R,je),t(je,Eo),t(R,_o),t(R,ze),t(ze,To),t(R,wo),t(R,Je),t(Je,Do),t(d,xo),t(d,A),t(A,Ke),t(Ke,Bo),t(A,Ro),t(A,Qe),t(Qe,Ao),t(A,Co),t(A,Ze),t(Ze,Po),t(A,Oo),t(A,$e),t($e,qo),u(a,Ya,i),u(a,at,i),t(at,ge),t(ge,Lo),t(at,Ho),u(a,ja,i),u(a,C,i),t(C,ta),t(ta,Io),t(C,No),t(C,ea),t(ea,So),t(C,Uo),t(C,aa),t(aa,Vo),t(C,Fo),u(a,za,i),u(a,nt,i),t(nt,na),t(na,Go),t(nt,Mo),u(a,Ja,i),u(a,st,i),t(st,sa),t(sa,Wo),t(st,Xo),u(a,Ka,i),u(a,Ht,i),t(Ht,Yo),u(a,Qa,i),u(a,It,i),t(It,jo),u(a,Za,i),u(a,Nt,i),t(Nt,zo),u(a,$a,i),u(a,St,i),t(St,Jo),u(a,ga,i),u(a,U,i),t(U,oa),t(oa,ot),t(ot,ca),t(ca,Ko),t(ot,Qo),t(ot,la),t(la,Zo),t(U,$o),t(U,I),t(I,ct),t(ct,pa),t(pa,go),t(ct,tc),t(ct,ra),t(ra,ec),t(I,ac),t(I,lt),t(lt,ia),t(ia,nc),t(lt,sc),t(lt,ua),t(ua,oc),t(I,cc),t(I,pt),t(pt,da),t(da,lc),t(pt,pc),t(pt,ha),t(ha,rc),u(a,tn,i),u(a,Ut,i),t(Ut,ic),u(a,en,i),u(a,Vt,i),t(Vt,uc),u(a,an,i),u(a,V,i),t(V,fa),t(fa,rt),t(rt,ka),t(ka,dc),t(rt,hc),t(rt,ma),t(ma,fc),t(V,kc),t(V,N),t(N,it),t(it,va),t(va,mc),t(it,vc),t(it,ya),t(ya,yc),t(N,bc),t(N,ut),t(ut,ba),t(ba,Ec),t(ut,_c),t(ut,Ea),t(Ea,Tc),t(N,wc),t(N,dt),t(dt,_a),t(_a,Dc),t(dt,xc),t(dt,Ta),t(Ta,Bc),u(a,nn,i),u(a,Ft,i),t(Ft,Rc),u(a,sn,i),u(a,Gt,i),t(Gt,Ac),u(a,on,i),u(a,Mt,i),t(Mt,Cc),u(a,cn,i),u(a,Wt,i),t(Wt,Pc),u(a,ln,i),u(a,Xt,i),t(Xt,Oc),u(a,pn,i),u(a,f,i),t(f,qc),t(f,wa),t(wa,Lc),t(f,Hc),t(f,Da),t(Da,Ic),t(f,Nc),t(f,xa),t(xa,Sc),t(f,Uc),t(f,Ba),t(Ba,Vc),t(f,Fc),u(a,rn,i),u(a,Yt,i),t(Yt,Gc),u(a,un,i),u(a,ht,i),ht.innerHTML=Ur,u(a,dn,i),u(a,jt,i),t(jt,Mc),u(a,hn,i),u(a,zt,i),t(zt,Wc),u(a,fn,i),u(a,k,i),t(k,Xc),t(k,Ra),t(Ra,Yc),t(k,jc),t(k,Aa),t(Aa,zc),t(k,Jc),t(k,Ca),t(Ca,Kc),t(k,Qc),t(k,Pa),t(Pa,Zc),t(k,$c),u(a,kn,i),u(a,F,i),t(F,gc),t(F,Oa),t(Oa,tl),t(F,el),u(a,mn,i),u(a,ft,i),ft.innerHTML=Vr,u(a,vn,i),u(a,Jt,i),t(Jt,al),u(a,yn,i),u(a,Kt,i),t(Kt,nl),u(a,bn,i),u(a,y,i),t(y,sl),t(y,qa),t(qa,ol),t(y,cl),t(y,La),t(La,ll),t(y,pl),t(y,Ha),t(Ha,rl),t(y,il),u(a,En,i),u(a,P,i),t(P,ul),t(P,Ia),t(Ia,dl),t(P,hl),t(P,Na),t(Na,fl),t(P,kl),u(a,_n,i),u(a,kt,i),kt.innerHTML=Fr},p:Dl,i:Dl,o:Dl,d(a){a&&e(vt),a&&e(yt),a&&e(Sa),a&&e(bt),a&&e(Ua),a&&e(Et),a&&e(Va),a&&e(v),a&&e(Fa),a&&e(Lt),a&&e(Ga),a&&e(g),a&&e(Ma),a&&e(tt),a&&e(Wa),a&&e(et),a&&e(Xa),a&&e(S),a&&e(Ya),a&&e(at),a&&e(ja),a&&e(C),a&&e(za),a&&e(nt),a&&e(Ja),a&&e(st),a&&e(Ka),a&&e(Ht),a&&e(Qa),a&&e(It),a&&e(Za),a&&e(Nt),a&&e($a),a&&e(St),a&&e(ga),a&&e(U),a&&e(tn),a&&e(Ut),a&&e(en),a&&e(Vt),a&&e(an),a&&e(V),a&&e(nn),a&&e(Ft),a&&e(sn),a&&e(Gt),a&&e(on),a&&e(Mt),a&&e(cn),a&&e(Wt),a&&e(ln),a&&e(Xt),a&&e(pn),a&&e(f),a&&e(rn),a&&e(Yt),a&&e(un),a&&e(ht),a&&e(dn),a&&e(jt),a&&e(hn),a&&e(zt),a&&e(fn),a&&e(k),a&&e(kn),a&&e(F),a&&e(mn),a&&e(ft),a&&e(vn),a&&e(Jt),a&&e(yn),a&&e(Kt),a&&e(bn),a&&e(y),a&&e(En),a&&e(P),a&&e(_n),a&&e(kt)}}}class Qr extends Xr{constructor(vt){super(),Yr(this,vt,null,Jr,jr,{})}}export{Qr as default};
//# sourceMappingURL=_page.md-49606e28.js.map
