import{S as pk,i as lk,s as ik,a2 as xk,a3 as Dk,a4 as Pk,a5 as Ck,f as uk,t as rk,K as Ei,k as s,q as c,a as u,w as Ak,l as e,m as o,r as p,h as n,c as r,a6 as Bk,x as Rk,n as k,b as i,G as a,y as Hk,T as Lk,U as ek,z as qk,a7 as ok,E as Ok,B as Ik}from"../../chunks/index-ae8bb011.js";function Sk(I){let d;const v=I[1].default,f=xk(v,I,I[0],null);return{c(){f&&f.c()},l(h){f&&f.l(h)},m(h,x){f&&f.m(h,x),d=!0},p(h,[x]){f&&f.p&&(!d||x&1)&&Dk(f,v,h,h[0],d?Ck(v,h[0],x,null):Pk(h[0]),null)},i(h){d||(uk(f,h),d=!0)},o(h){rk(f,h),d=!1},d(h){f&&f.d(h)}}}function Uk(I,d,v){let{$$slots:f={},$$scope:h}=d;return I.$$set=x=>{"$$scope"in x&&v(0,h=x.$$scope)},[h,f]}class Nk extends pk{constructor(d){super(),lk(this,d,Uk,Sk,ik,{})}}function Fk(I){let d,v,f,h,x,z,P,Pa,C,A,X,Jt,S,j,Qt,B,K,Zt,U,J,gt,T,N,Q,_,Et,Z,$t,wt,g,F,R,V,Ca,Tt,M,Aa,xt,D,Gt,Dt,tt,Yt,at,nt,st,H,Pt,et,Wt,Ct,$,ot,At,G,Bt,ta,Xt,E,Rt,ct,jt,m,w,L,_n,En,pt,Ht,lt,wn,Tn,aa,xn,Dn,Lt,na,Pn,Ba,sa,it,Ra,qt,Cn,Ha,Kt,An,La,ut,ea,Ot,oa,Bn,qa,ca,pa,Rn,la,It,ia,Hn,Ln,qn,Mo,fe,Oa,zo,me,Ia,$o,Sa,Go,ve,On,Yo,ye,Ua,Wo,be,Na,Xo,_e,In,jo,Ee,q,Ko,ss,Jo,Qo,es,Zo,go,os,tc,ac,cs,nc,sc,we,Sn,ec,Te,Fa,kk=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>

<span class="token comment">// v202205626</span>

<span class="token comment">// Pay equal payments at regular intervals using input locks</span>
<span class="token keyword">contract</span> <span class="token class-name">Annuity</span><span class="token punctuation">(</span>

  <span class="token comment">// interval for payouts, in blocks</span>
  <span class="token builtin">int</span> period<span class="token punctuation">,</span>

  <span class="token comment">// LockingBytecode of the beneficiary,</span>
  <span class="token comment">// the address receiving payments</span>
  <span class="token builtin">bytes</span> recipientLockingBytecode<span class="token punctuation">,</span>

  <span class="token comment">// amount paid in each installment</span>
  <span class="token builtin">int</span> installment<span class="token punctuation">,</span>

  <span class="token comment">// extra allowance for administration of contract</span>
  <span class="token comment">// fees are paid from executors' allowance.</span>
  <span class="token builtin">int</span> executorAllowance
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Check that the first output sends to the recipient</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> recipientLockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Check that time has passed and that time locks are enabled</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// require the second output to match the active bytecode</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value on the contract</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Calculate value returned to the contract</span>
    <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> installment <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

    <span class="token comment">// Check that the outputs send the correct amounts</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> installment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,xe,Va,oc,De,Un,cc,Pe,O,pc,ps,lc,ic,ls,uc,rc,is,kc,dc,us,hc,fc,Ce,ua,mc,rs,vc,yc,Ae,Ma,dk=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.0</span><span class="token punctuation">;</span>

 <span class="token keyword">contract</span> <span class="token class-name">Divide</span><span class="token punctuation">(</span>
   <span class="token comment">// allowance for party executing the contract</span>
   <span class="token builtin">int</span> executorAllowance<span class="token punctuation">,</span>
   <span class="token comment">// number of outputs receiving payout</span>
   <span class="token builtin">int</span> divisor<span class="token punctuation">,</span>

   <span class="token comment">// for each beneficiary,</span>
   <span class="token comment">// take the LockingBytecode as input</span>
   <span class="token builtin">bytes</span> r0LockingBytecode<span class="token punctuation">,</span>
   <span class="token builtin">bytes</span> r1LockingBytecode
 <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// distributes to each output in order</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> r0LockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> r1LockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value of inputs</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Total value paid to beneficiaries,</span>
    <span class="token comment">// minus executor allowance</span>
    <span class="token builtin">int</span> distributedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

    <span class="token comment">// Value paid to each beneficiary</span>
    <span class="token builtin">int</span> distribution <span class="token operator">=</span> distributedValue <span class="token operator">/</span> divisor<span class="token punctuation">;</span>

    <span class="token comment">// each output must be greater</span>
    <span class="token comment">// or equal to the distribution amount</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> distribution<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> distribution<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span></code>`,Be,za,bc,Re,Nn,_c,He,Y,Ec,ks,wc,Tc,ds,xc,Dc,hs,Pc,Cc,Le,St,Ac,fs,Bc,Rc,ms,Hc,Lc,qe,$a,hk=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.0</span><span class="token punctuation">;</span>

<span class="token comment">// v20220609</span>

<span class="token keyword">contract</span> <span class="token class-name">Faucet</span><span class="token punctuation">(</span>

  <span class="token comment">// interval for payouts, in blocks</span>
  <span class="token builtin">int</span> period<span class="token punctuation">,</span>

  <span class="token comment">// amount to be paid by faucet allowance.</span>
  <span class="token builtin">int</span> payout<span class="token punctuation">,</span>

  <span class="token comment">// random number input into contract to have more than one</span>
  <span class="token builtin">int</span> index
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">drip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Check that time has passed and that time locks are enabled</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// use the index</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// require the first output to match the active bytecode</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value on the contract</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Calculate value returned to the contract</span>
    <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> payout<span class="token punctuation">;</span>

    <span class="token comment">// If the value on the contract exceeds the payout amount</span>
    <span class="token comment">// then assert that the value must return to the contract</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>currentValue <span class="token operator">></span> payout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,Oe,Ga,qc,Ie,Fn,Oc,Se,Ut,Ic,vs,Sc,Uc,ys,Nc,Fc,Ue,W,Vc,bs,Mc,zc,_s,$c,Gc,Es,Yc,Wc,Ne,Ya,Wa,wi,Xc,Fe,Xa,fk=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>

<span class="token comment">// v20220727</span>

<span class="token comment">// A faucet with proof of work.</span>
<span class="token keyword">contract</span> <span class="token class-name">Mine</span><span class="token punctuation">(</span>

  <span class="token comment">// interval for payouts, in blocks</span>
  <span class="token builtin">int</span> period<span class="token punctuation">,</span>

  <span class="token comment">// amount to be paid by faucet allowance.</span>
  <span class="token builtin">int</span> payout<span class="token punctuation">,</span>

  <span class="token comment">// how many leading zeros should the hash of the nonce and current bytecode have</span>
  <span class="token builtin">int</span> difficulty<span class="token punctuation">,</span>

  <span class="token comment">// the old nonce, which is replaced each time.</span>
  <span class="token builtin">bytes7</span> canary
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token builtin">bytes7</span> nonce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Check that time has passed and that time locks are enabled</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Use the old nonce</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>canary<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Check that the new nonce creates a hash with</span>
    <span class="token comment">// some D (difficulty) leading zeros when hashed with the active bytecode</span>
    <span class="token builtin">bytes</span> version <span class="token operator">=</span> <span class="token builtin">byte</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes</span> zeros <span class="token operator">=</span> <span class="token builtin">bytes7</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes</span> hash <span class="token operator">=</span> <span class="token function">sha256</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode <span class="token operator">+</span> <span class="token builtin">bytes7</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> zeros<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// calculate the locking bytecode</span>
    <span class="token comment">// of a new mining contract with the nonce as canary</span>
    <span class="token builtin">bytes</span> newContract <span class="token operator">=</span> <span class="token number">0x7</span> <span class="token operator">+</span> <span class="token builtin">bytes7</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes20</span> contractHash <span class="token operator">=</span> <span class="token function">hash160</span><span class="token punctuation">(</span>newContract<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes23</span> lockingCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span>contractHash<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// Require the first output details the parameters</span>
    <span class="token comment">// of the mining contract in a zero value OP_RETURN</span>
    <span class="token builtin">bytes</span> announcement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeNullData</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token comment">// The protocol</span>
      <span class="token number">0x7574786f</span><span class="token punctuation">,</span>
      <span class="token comment">// M for mining contract</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// version</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The period,</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The payout,</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>payout<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// preceding zeros on solution</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The current nonce (future canary), of the mining contract,</span>
      <span class="token comment">// where funds are simultaneously sent to</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The new bytecode</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>lockingCode<span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Assure that the first output matches the arguments to the contract</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> announcement<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// check that the change output sends to that contract</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> lockingCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value on the contract</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Calculate value returned to the contract</span>
    <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> payout<span class="token punctuation">;</span>

    <span class="token comment">// If the value on the contract exceeds the payout amount</span>
    <span class="token comment">// then assert that the value must return to the contract</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>currentValue <span class="token operator">></span> payout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Assure it has zero value</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,Ve,ja,jc,Me,Vn,Kc,ze,Nt,Jc,ws,Qc,Zc,Ts,gc,tp,$e,Ka,mk=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>

<span class="token comment">// v20220522</span>

<span class="token keyword">contract</span> <span class="token class-name">Perpetuity</span><span class="token punctuation">(</span>

 <span class="token comment">// interval for payouts, in blocks</span>
 <span class="token builtin">int</span> period<span class="token punctuation">,</span>

 <span class="token comment">// lockingBytecode of the beneficiary,</span>
 <span class="token comment">// the address receiving payments</span>
 <span class="token builtin">bytes</span> recipientLockingBytecode<span class="token punctuation">,</span>

 <span class="token comment">// extra allowance for administration of contract</span>
 <span class="token comment">// fees are paid from executors' allowance.</span>
 <span class="token builtin">int</span> executorAllowance<span class="token punctuation">,</span>

 <span class="token comment">// divisor for the payout,</span>
 <span class="token comment">// each payout must be greater than</span>
 <span class="token comment">// the total amount held on the contract</span>
 <span class="token comment">// divided by this number</span>
 <span class="token builtin">int</span> decay

<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">// Check that the first output sends to the recipient</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> recipientLockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that time has passed and that time locks are enabled</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// require the second output to match the active bytecode</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Get the total value on the contract</span>
  <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

  <span class="token comment">// The payout is the current value divided by the decay</span>
  <span class="token builtin">int</span> installment <span class="token operator">=</span> currentValue<span class="token operator">/</span>decay<span class="token punctuation">;</span>

  <span class="token comment">// Calculate value returned to the contract</span>
  <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> installment <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

  <span class="token comment">// Check that the outputs send the correct amounts</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> installment<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ge,Ja,ap,Ye,Mn,np,We,Qa,vk=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">^</span><span class="token version number">0.7.0</span><span class="token punctuation">;</span>

<span class="token comment">/* Allows publishing some OP_RETURN message,
 * given that:
 * 1. the hash160 value of the zero value OP_RETURN message is passed
 * 2. the first output has zero value
 * 3. the remaining value is pass back to the contract, mostly.
 */</span>


<span class="token keyword">contract</span> <span class="token class-name">Record</span><span class="token punctuation">(</span><span class="token builtin">int</span> maxFee<span class="token punctuation">,</span> <span class="token builtin">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token builtin">bytes20</span> dataHash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">// this does nothing</span>
  <span class="token comment">// different indices enable different contract addresses</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that the first tx output is a zero value opcode matching the provided hash</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode<span class="token punctuation">)</span> <span class="token operator">==</span> dataHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// calculate the fee required to propagate the transaction 1 sat/ byte</span>
  <span class="token builtin">int</span> baseFee <span class="token operator">=</span> <span class="token number">162</span><span class="token punctuation">;</span>

  <span class="token builtin">int</span> fee <span class="token operator">=</span> baseFee <span class="token operator">+</span> tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>fee<span class="token operator">&lt;=</span>maxFee<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that the second tx output sends the change back</span>
  <span class="token builtin">int</span> newValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">-</span> fee<span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Xe,Za,sp,je,ga,ep,Ke,ra,op,xs,cp,pp,Je,tn,lp,Qe,zn,ip,Ze,an,up,ge,$n,rp,to,ka,Ds,rt,Ps,kp,dp,Cs,hp,fp,As,mp,vp,Bs,yp,bp,y,kt,Rs,_p,Ep,Hs,wp,Tp,Ls,xp,Dp,qs,Pp,Cp,dt,Os,Ap,Bp,Is,Rp,Hp,Ss,Lp,qp,Us,Op,Ip,ht,Ns,Sp,Up,Fs,Np,Fp,Vs,Vp,Mp,Ms,zp,$p,ft,zs,Gp,Yp,$s,Wp,Xp,Gs,jp,Kp,Ys,Jp,Qp,mt,Ws,Zp,gp,Xs,tl,al,js,nl,sl,Ks,el,ol,vt,Js,cl,pl,Qs,ll,il,Zs,ul,rl,gs,kl,dl,yt,te,hl,fl,ae,ml,vl,ne,yl,bl,se,_l,El,bt,ee,wl,Tl,oe,xl,Dl,ce,Pl,Cl,pe,Al,Bl,_t,le,Rl,Hl,ie,Ll,ql,ue,Ol,Il,re,Sl,ao,Ft,Ul,nn,Nl,Fl,ke,Vl,Ml,no,sn,zl,so,en,$l,eo,da,Gl,on,Yl,Wl,oo,cn,Xl,co,pn,ln,jl,Kl,po,un,Jl,lo,rn,Ql,io,kn,Zl,dn,gl,uo,hn,ti,ro,Gn,ai,ko,Yn,fn,ni,ho,mn,si,fo,Wn,ei,mo,vn,oi,vo,Vt,ci,de,pi,li,he,ii,ui,yo,yn,ri,bo,Xn,ki,_o,jn,di,Eo,bn,hi,wo,Kn,fi,To,Jn,mi;return{c(){d=s("h1"),v=c("Welcome!"),f=u(),h=s("p"),x=c("Unspent Phi (\u20BF\u2219\u03D5) is an app for creating (and publishing) a set of simple contracts on the Bitcoin Cash (BCH) blockchain that anyone can execute. These contracts lock the value of unspent outputs from earlier transactions (UTXOs), and allow some small reward for any party to call a known contract (if valid according to the rules of BitcoinScript). Although simple, these contracts may be chained together to create complex outcomes."),z=u(),P=s("p"),Pa=c("\u20BF\u2219\u03D5 contracts may be thought of as automata, machines that are unlocked and stepped forward by random participants on the blockchain. No one party has control, it\u2019s a race to spend them first. However, the code to unlock them must be known for the code to stepped forward. Money sent to \u20BF\u2219\u03D5 contracts appear identical to any other pay-to-script UTXOs on the network. Nothing is known about how to spend the contract until it is spent at least once, so in order for the contract to function automatically, both their existence and the parameters to unlock them must be known. While the code to unlock is broadcasted by spending the contract once, not all contracts can be spent right away, so it\u2019s easier and safer just to publish some unlock record and not worry about forgetting how to unlock them."),C=u(),A=s("h1"),X=c("Contract Types"),Jt=u(),S=s("p"),j=c("Each \u20BF\u2219\u03D5 contract is designed to do one thing. The contracts available (so far) are as follows:"),Qt=u(),B=s("h2"),K=c("Beneficiary Contracts"),Zt=u(),U=s("p"),J=c("Some contracts control value on behalf of the contract creator. They all have an executor allowance which can be claimed by the party which submits a valid spending transactions."),gt=u(),T=s("table"),N=s("thead"),Q=s("tr"),_=s("th"),Et=c("Name"),Z=u(),$t=s("th"),wt=c("Description"),g=u(),F=s("tbody"),R=s("tr"),V=s("td"),Ca=c("Annuity"),Tt=u(),M=s("td"),Aa=c("Equal payments over time."),xt=u(),D=s("tr"),Gt=s("td"),Dt=c("Divide"),tt=u(),Yt=s("td"),at=c("Divide money into equal payments, up to four addresses"),nt=u(),st=s("tr"),H=s("td"),Pt=c("Perpetuity"),et=u(),Wt=s("td"),Ct=c("Pay a fixed fraction of total value at intervals"),$=u(),ot=s("h2"),At=c("Distributive Contracts"),G=u(),Bt=s("p"),ta=c("Contracts with locked value that can be spent by anyone can be characterized as \u201Cfree\u201D. At present these include faucets, mining contracts."),Xt=u(),E=s("table"),Rt=s("thead"),ct=s("tr"),jt=s("th"),m=c("Name"),w=u(),L=s("th"),_n=c("Description"),En=u(),pt=s("tbody"),Ht=s("tr"),lt=s("td"),wn=c("Faucet"),Tn=u(),aa=s("td"),xn=c("Distributes some free bitcoin per period"),Dn=u(),Lt=s("tr"),na=s("td"),Pn=c("Mine"),Ba=u(),sa=s("td"),it=c("Distributes some bitcoin per period, for proof of work"),Ra=u(),qt=s("h2"),Cn=c("Informational Contracts"),Ha=u(),Kt=s("p"),An=c("A contract providing the facility to record data for free."),La=u(),ut=s("table"),ea=s("thead"),Ot=s("tr"),oa=s("th"),Bn=c("Name"),qa=u(),ca=s("th"),pa=c("Description"),Rn=u(),la=s("tbody"),It=s("tr"),ia=s("td"),Hn=c("Record"),Ln=u(),qn=s("td"),Mo=c("Broadcast a contract to the blockchain"),fe=u(),Oa=s("h2"),zo=c("Timelock v non-timelocked"),me=u(),Ia=s("p"),$o=c("Contracts in BitcoinScript may be locked using "),Sa=s("a"),Go=c("BIP68"),ve=u(),On=s("p"),Yo=c("The Divide and Record contracts are not time-locked, they may be called at anytime."),ye=u(),Ua=s("h1"),Wo=c("Contracts"),be=u(),Na=s("h2"),Xo=c("Annuity"),_e=u(),In=s("p"),jo=c("The annuity contract pays a fixed amount (in satoshis) to a predefined locking bytecode (i.e. address)."),Ee=u(),q=s("p"),Ko=c("To prevent the contract from being called successively (thus paying out all at once), a timelock is added restricting input be of a certain age (in blocks), this parameter is called the "),ss=s("code"),Jo=c("period"),Qo=c(". The beneficiary address (or contract) is denoted by the "),es=s("code"),Zo=c("recipientLockingBytecode"),go=c(". The amount paid in each period is the "),os=s("code"),tc=c("installment"),ac=c(". To aid in execution, a small fee is left as "),cs=s("code"),nc=c("executorAllowance"),sc=c(" for each execution of the contract, it may be paid to anyone."),we=u(),Sn=s("p"),ec=c("This contract: checks that the first output pays to the beneficiary; checks that the timelock is satisfied; checks that the second output pays back to the contract; gets the total value being spent; calculates the amount to be returned, and finally, checks that both the installment amount of the first output & the total returned to the contract exceed the required amounts."),Te=u(),Fa=s("pre"),xe=u(),Va=s("h2"),oc=c("Divide"),De=u(),Un=s("p"),cc=c("The divide contract splits inputs across a predefined set of output destinations."),Pe=u(),O=s("p"),pc=c("Each output is denoted by "),ps=s("code"),lc=c("r#LockingBytecode"),ic=c(", where "),ls=s("code"),uc=c("#"),rc=c(" is the index of the output. Since early BitcoinScript did not have loops, this contract was written with a static list of outputs and a "),is=s("code"),kc=c("divisor"),dc=c(", which is simply the number of outputs. An "),us=s("code"),hc=c("executorAllowance"),fc=c(" amount is subtracted from the total distribution amount, which may be spent by anyone as long as the amount payed to the hardcoded receipts equals or exceeds the alloted share."),Ce=u(),ua=s("p"),mc=c("This contract: checks that each of the output destinations match the predefined output; calculates the total value on the contract; calculates the amount to be paid to each receipt ("),rs=s("code"),vc=c("distribution"),yc=c("), and finally calculates that each receipt receives an output greater than, or equal to, the distribution amount."),Ae=u(),Ma=s("pre"),Be=u(),za=s("h2"),bc=c("Faucet"),Re=u(),Nn=s("p"),_c=c("The faucet contract pays \u201Cfree\u201D bitcoin."),He=u(),Y=s("p"),Ec=c("To prevent the faucet from being drained by successive calls, a "),ks=s("code"),wc=c("period"),Tc=c(" timeout is set to specify the minimum age of the input being spent. The amount available to be spent is defined by a "),ds=s("code"),xc=c("payout"),Dc=c(". As a convenience, and to have multiple faucets with the same payout, an "),hs=s("code"),Pc=c("index"),Cc=c(" parameter is added to distinguish identical contracts."),Le=u(),St=s("p"),Ac=c("The steps of this contract are as follows: first, it requires that the transaction be called with an age that is greater than the current "),fs=s("code"),Bc=c("period"),Rc=c("; the "),ms=s("code"),Hc=c("index"),Lc=c(" is used so that it is not unused; next the first output must return all value to the faucet contract, and finally the returned value is calculate and must be returned to the faucet if the current value exceeds the payout."),qe=u(),$a=s("pre"),Oe=u(),Ga=s("h2"),qc=c("Mine-able Faucet"),Ie=u(),Fn=s("p"),Oc=c("The \u20BF\u2219\u03D5 mining covenant is very much like the faucet, with some additional requirements."),Se=u(),Ut=s("p"),Ic=c("First, execution of the contract must be called with a "),vs=s("code"),Sc=c("nonce"),Uc=c(` [a random value used once]
which when added to the current locking bytecode and hashed results in a value starting with some number of zeros.
How many zeros is the `),ys=s("code"),Nc=c("difficulty"),Fc=c("."),Ue=u(),W=s("p"),Vc=c("Finally, prior to spending the the mining "),bs=s("code"),Mc=c("payout"),zc=c(`, the spender must announce
the winning `),_s=s("code"),$c=c("nonce"),Gc=c(" in an OP_RETURN of the first output, and send the balance of the contract to a new mining covenant with the new nonce as a "),Es=s("code"),Yc=c("canary"),Wc=c("."),Ne=u(),Ya=s("p"),Wa=s("img"),Xc=c(`
Like an infinite series of Failures to Deliver (FTDs) for a stock, or banging forex futures to manipulate an outcome in currency markets, the canary is always brought back to life with a new copy of itself. You don\u2019t have to take over a whole blockchain to create a market for your energy, just mine a covenant\u2014there will be far less idiosyncratic risk.`),Fe=u(),Xa=s("pre"),Ve=u(),ja=s("h2"),jc=c("Perpetuity"),Me=u(),Vn=s("p"),Kc=c("The Perpetuity contract works like an Annuity, however rather than pay a fixed amount, a fixed fraction of the total is paid each period."),ze=u(),Nt=s("p"),Jc=c("The fraction paid is determined by the "),ws=s("code"),Qc=c("decay"),Zc=c(" parameter. If a "),Ts=s("code"),gc=c("decay"),tp=c(" of 10 is specified, then one tenth the value is paid each period."),$e=u(),Ka=s("pre"),Ge=u(),Ja=s("h2"),ap=c("Record"),Ye=u(),Mn=s("p"),np=c("A utility function to broadcast new contracts as OP_RETURN messages."),We=u(),Qa=s("pre"),Xe=u(),Za=s("h1"),sp=c("Definitions"),je=u(),ga=s("h2"),ep=c("Units"),Ke=u(),ra=s("p"),op=c("bitcoin has it\u2019s own units of value and time. Although there are whole coins and it\u2019s possible to use epoch time (seconds since 1970) in some cases, we\u2019ll stick to two here to steer clear of the politics surrounding \u201Cleap seconds\u201D and what is a "),xs=s("em"),cp=c("unit of account"),pp=c("."),Je=u(),tn=s("h3"),lp=c("satoshis"),Qe=u(),zn=s("p"),ip=c("A unit of account (on the Bitcoin Cash fork of the initial bitcoin blockchain). A hundred million satoshi are equal to 1 Bitcoin Cash."),Ze=u(),an=s("h3"),up=c("blocks (time)"),ge=u(),$n=s("p"),rp=c("The base unit of time on bitcoin is called a block, blocktimes very, but are about 10 minutes on average."),to=u(),ka=s("table"),Ds=s("thead"),rt=s("tr"),Ps=s("th"),kp=c("Blocks"),dp=u(),Cs=s("th"),hp=c("Minutes"),fp=u(),As=s("th"),mp=c("Days"),vp=u(),Bs=s("th"),yp=c("Years"),bp=u(),y=s("tbody"),kt=s("tr"),Rs=s("td"),_p=c("1"),Ep=u(),Hs=s("td"),wp=c("10"),Tp=u(),Ls=s("td"),xp=c("-"),Dp=u(),qs=s("td"),Pp=c("-"),Cp=u(),dt=s("tr"),Os=s("td"),Ap=c("10"),Bp=u(),Is=s("td"),Rp=c("100"),Hp=u(),Ss=s("td"),Lp=c("-"),qp=u(),Us=s("td"),Op=c("-"),Ip=u(),ht=s("tr"),Ns=s("td"),Sp=c("100"),Up=u(),Fs=s("td"),Np=c("1000"),Fp=u(),Vs=s("td"),Vp=c("0.694"),Mp=u(),Ms=s("td"),zp=c("-"),$p=u(),ft=s("tr"),zs=s("td"),Gp=c("144"),Yp=u(),$s=s("td"),Wp=c("1440"),Xp=u(),Gs=s("td"),jp=c("1"),Kp=u(),Ys=s("td"),Jp=c("-"),Qp=u(),mt=s("tr"),Ws=s("td"),Zp=c("1000"),gp=u(),Xs=s("td"),tl=c("-"),al=u(),js=s("td"),nl=c("6.94"),sl=u(),Ks=s("td"),el=c("-"),ol=u(),vt=s("tr"),Js=s("td"),cl=c("4000"),pl=u(),Qs=s("td"),ll=c("-"),il=u(),Zs=s("td"),ul=c("27.7"),rl=u(),gs=s("td"),kl=c("-"),dl=u(),yt=s("tr"),te=s("td"),hl=c("13140"),fl=u(),ae=s("td"),ml=c("-"),vl=u(),ne=s("td"),yl=c("91.25"),bl=u(),se=s("td"),_l=c("0.249"),El=u(),bt=s("tr"),ee=s("td"),wl=c("26280"),Tl=u(),oe=s("td"),xl=c("-"),Dl=u(),ce=s("td"),Pl=c("-"),Cl=u(),pe=s("td"),Al=c("0.499"),Bl=u(),_t=s("tr"),le=s("td"),Rl=c("52560"),Hl=u(),ie=s("td"),Ll=c("-"),ql=u(),ue=s("td"),Ol=c("-"),Il=u(),re=s("td"),Sl=c("0.999"),ao=u(),Ft=s("p"),Ul=c("The largest value specified by the timelock upgrade "),nn=s("a"),Nl=c("(BIP68)"),Fl=c(" is a 16-bit value. Contracts with locking periods larger than the maximum value (65536) have "),ke=s("strong"),Vl=c("not"),Ml=c(" been tested, and should not be expected to work."),no=u(),sn=s("h2"),zl=c("Languages"),so=u(),en=s("h3"),$l=c("BitcoinScript"),eo=u(),da=s("p"),Gl=c("A procedural, stack-oriented programming language (Forth-like) with different rules and operations. In practice, it is "),on=s("a"),Yl=c("Script"),Wl=c(" that mostly unlocks value on a bitcoin network."),oo=u(),cn=s("h3"),Xl=c("CashScript"),co=u(),pn=s("p"),ln=s("a"),jl=c("CashScript is a high-level programming language for smart contracts on Bitcoin Cash"),Kl=c(" that transpiles to BitcoinScript."),po=u(),un=s("h2"),Jl=c("Script Components"),lo=u(),rn=s("h3"),Ql=c("Unlocking Script"),io=u(),kn=s("p"),Zl=c(`Code that is run before running the unlocking code. If execution doesn\u2019t trigger failures and leaves a single non-zero value, it is considered unlocked.
`),dn=s("a"),gl=c("More"),uo=u(),hn=s("h3"),ti=c("Locking Script"),ro=u(),Gn=s("p"),ai=c("At present (Nov 2022), there are two types of unlocking script (actually 4). P2PKH (pay-to-publicKeyHash), which pays to the hash of a public key. And Pay to Script (P2PSH) which pay to an unlocking script hash."),ko=u(),Yn=s("p"),fn=s("a"),ni=c("More info"),ho=u(),mn=s("h3"),si=c("OP_RETURN"),fo=u(),Wn=s("p"),ei=c("A code (106) in BitcoinScript for transaction outputs which can store arbitrary data."),mo=u(),vn=s("h3"),oi=c("OP_RETURN data"),vo=u(),Vt=s("p"),ci=c("Data in OP_RETURNs is commonly encoded by pushing the total number of bytes, followed by the data bytes. For example "),de=s("code"),pi=c("04"),li=c(" followed by "),he=s("code"),ii=c("7574786f"),ui=c(" (4 bytes of in two letter hex). This format is used to \u201Cbroadcast\u201D \u20BF\u2219\u03D5 contracts."),yo=u(),yn=s("h3"),ri=c("Published"),bo=u(),Xn=s("p"),ki=c("In the context of an unspent contract, a contract is published if the parameters to construct and spend it are recorded on the blockchain, either in an OP_RETURN or by reference to the spent output."),_o=u(),jn=s("p"),di=c("A cashaddress locks value, the parameters of the contract allow unlocking the value."),Eo=u(),bn=s("h3"),hi=c("Unspent Transaction Output (UTXO)"),wo=u(),Kn=s("p"),fi=c("some value, defined by the output of a previous transaction, which is locked by some code, either the hash of a public key (cashaddr), or a script that, when executed, satisfies a locking code."),To=u(),Jn=s("p"),mi=c("The value may be zero, in the case of an OP_RETURN."),this.h()},l(t){d=e(t,"H1",{id:!0});var l=o(d);v=p(l,"Welcome!"),l.forEach(n),f=r(t),h=e(t,"P",{});var Ti=o(h);x=p(Ti,"Unspent Phi (\u20BF\u2219\u03D5) is an app for creating (and publishing) a set of simple contracts on the Bitcoin Cash (BCH) blockchain that anyone can execute. These contracts lock the value of unspent outputs from earlier transactions (UTXOs), and allow some small reward for any party to call a known contract (if valid according to the rules of BitcoinScript). Although simple, these contracts may be chained together to create complex outcomes."),Ti.forEach(n),z=r(t),P=e(t,"P",{});var xi=o(P);Pa=p(xi,"\u20BF\u2219\u03D5 contracts may be thought of as automata, machines that are unlocked and stepped forward by random participants on the blockchain. No one party has control, it\u2019s a race to spend them first. However, the code to unlock them must be known for the code to stepped forward. Money sent to \u20BF\u2219\u03D5 contracts appear identical to any other pay-to-script UTXOs on the network. Nothing is known about how to spend the contract until it is spent at least once, so in order for the contract to function automatically, both their existence and the parameters to unlock them must be known. While the code to unlock is broadcasted by spending the contract once, not all contracts can be spent right away, so it\u2019s easier and safer just to publish some unlock record and not worry about forgetting how to unlock them."),xi.forEach(n),C=r(t),A=e(t,"H1",{id:!0});var Di=o(A);X=p(Di,"Contract Types"),Di.forEach(n),Jt=r(t),S=e(t,"P",{});var Pi=o(S);j=p(Pi,"Each \u20BF\u2219\u03D5 contract is designed to do one thing. The contracts available (so far) are as follows:"),Pi.forEach(n),Qt=r(t),B=e(t,"H2",{id:!0});var Ci=o(B);K=p(Ci,"Beneficiary Contracts"),Ci.forEach(n),Zt=r(t),U=e(t,"P",{});var Ai=o(U);J=p(Ai,"Some contracts control value on behalf of the contract creator. They all have an executor allowance which can be claimed by the party which submits a valid spending transactions."),Ai.forEach(n),gt=r(t),T=e(t,"TABLE",{});var xo=o(T);N=e(xo,"THEAD",{});var Bi=o(N);Q=e(Bi,"TR",{});var Do=o(Q);_=e(Do,"TH",{});var Ri=o(_);Et=p(Ri,"Name"),Ri.forEach(n),Z=r(Do),$t=e(Do,"TH",{});var Hi=o($t);wt=p(Hi,"Description"),Hi.forEach(n),Do.forEach(n),Bi.forEach(n),g=r(xo),F=e(xo,"TBODY",{});var Qn=o(F);R=e(Qn,"TR",{});var Po=o(R);V=e(Po,"TD",{});var Li=o(V);Ca=p(Li,"Annuity"),Li.forEach(n),Tt=r(Po),M=e(Po,"TD",{});var qi=o(M);Aa=p(qi,"Equal payments over time."),qi.forEach(n),Po.forEach(n),xt=r(Qn),D=e(Qn,"TR",{});var Co=o(D);Gt=e(Co,"TD",{});var Oi=o(Gt);Dt=p(Oi,"Divide"),Oi.forEach(n),tt=r(Co),Yt=e(Co,"TD",{});var Ii=o(Yt);at=p(Ii,"Divide money into equal payments, up to four addresses"),Ii.forEach(n),Co.forEach(n),nt=r(Qn),st=e(Qn,"TR",{});var Ao=o(st);H=e(Ao,"TD",{});var Si=o(H);Pt=p(Si,"Perpetuity"),Si.forEach(n),et=r(Ao),Wt=e(Ao,"TD",{});var Ui=o(Wt);Ct=p(Ui,"Pay a fixed fraction of total value at intervals"),Ui.forEach(n),Ao.forEach(n),Qn.forEach(n),xo.forEach(n),$=r(t),ot=e(t,"H2",{id:!0});var Ni=o(ot);At=p(Ni,"Distributive Contracts"),Ni.forEach(n),G=r(t),Bt=e(t,"P",{});var Fi=o(Bt);ta=p(Fi,"Contracts with locked value that can be spent by anyone can be characterized as \u201Cfree\u201D. At present these include faucets, mining contracts."),Fi.forEach(n),Xt=r(t),E=e(t,"TABLE",{});var Bo=o(E);Rt=e(Bo,"THEAD",{});var Vi=o(Rt);ct=e(Vi,"TR",{});var Ro=o(ct);jt=e(Ro,"TH",{});var Mi=o(jt);m=p(Mi,"Name"),Mi.forEach(n),w=r(Ro),L=e(Ro,"TH",{});var zi=o(L);_n=p(zi,"Description"),zi.forEach(n),Ro.forEach(n),Vi.forEach(n),En=r(Bo),pt=e(Bo,"TBODY",{});var Ho=o(pt);Ht=e(Ho,"TR",{});var Lo=o(Ht);lt=e(Lo,"TD",{});var $i=o(lt);wn=p($i,"Faucet"),$i.forEach(n),Tn=r(Lo),aa=e(Lo,"TD",{});var Gi=o(aa);xn=p(Gi,"Distributes some free bitcoin per period"),Gi.forEach(n),Lo.forEach(n),Dn=r(Ho),Lt=e(Ho,"TR",{});var qo=o(Lt);na=e(qo,"TD",{});var Yi=o(na);Pn=p(Yi,"Mine"),Yi.forEach(n),Ba=r(qo),sa=e(qo,"TD",{});var Wi=o(sa);it=p(Wi,"Distributes some bitcoin per period, for proof of work"),Wi.forEach(n),qo.forEach(n),Ho.forEach(n),Bo.forEach(n),Ra=r(t),qt=e(t,"H2",{id:!0});var Xi=o(qt);Cn=p(Xi,"Informational Contracts"),Xi.forEach(n),Ha=r(t),Kt=e(t,"P",{});var ji=o(Kt);An=p(ji,"A contract providing the facility to record data for free."),ji.forEach(n),La=r(t),ut=e(t,"TABLE",{});var Oo=o(ut);ea=e(Oo,"THEAD",{});var Ki=o(ea);Ot=e(Ki,"TR",{});var Io=o(Ot);oa=e(Io,"TH",{});var Ji=o(oa);Bn=p(Ji,"Name"),Ji.forEach(n),qa=r(Io),ca=e(Io,"TH",{});var Qi=o(ca);pa=p(Qi,"Description"),Qi.forEach(n),Io.forEach(n),Ki.forEach(n),Rn=r(Oo),la=e(Oo,"TBODY",{});var Zi=o(la);It=e(Zi,"TR",{});var So=o(It);ia=e(So,"TD",{});var gi=o(ia);Hn=p(gi,"Record"),gi.forEach(n),Ln=r(So),qn=e(So,"TD",{});var tu=o(qn);Mo=p(tu,"Broadcast a contract to the blockchain"),tu.forEach(n),So.forEach(n),Zi.forEach(n),Oo.forEach(n),fe=r(t),Oa=e(t,"H2",{id:!0});var au=o(Oa);zo=p(au,"Timelock v non-timelocked"),au.forEach(n),me=r(t),Ia=e(t,"P",{});var vi=o(Ia);$o=p(vi,"Contracts in BitcoinScript may be locked using "),Sa=e(vi,"A",{href:!0,rel:!0});var nu=o(Sa);Go=p(nu,"BIP68"),nu.forEach(n),vi.forEach(n),ve=r(t),On=e(t,"P",{});var su=o(On);Yo=p(su,"The Divide and Record contracts are not time-locked, they may be called at anytime."),su.forEach(n),ye=r(t),Ua=e(t,"H1",{id:!0});var eu=o(Ua);Wo=p(eu,"Contracts"),eu.forEach(n),be=r(t),Na=e(t,"H2",{id:!0});var ou=o(Na);Xo=p(ou,"Annuity"),ou.forEach(n),_e=r(t),In=e(t,"P",{});var cu=o(In);jo=p(cu,"The annuity contract pays a fixed amount (in satoshis) to a predefined locking bytecode (i.e. address)."),cu.forEach(n),Ee=r(t),q=e(t,"P",{});var Mt=o(q);Ko=p(Mt,"To prevent the contract from being called successively (thus paying out all at once), a timelock is added restricting input be of a certain age (in blocks), this parameter is called the "),ss=e(Mt,"CODE",{});var pu=o(ss);Jo=p(pu,"period"),pu.forEach(n),Qo=p(Mt,". The beneficiary address (or contract) is denoted by the "),es=e(Mt,"CODE",{});var lu=o(es);Zo=p(lu,"recipientLockingBytecode"),lu.forEach(n),go=p(Mt,". The amount paid in each period is the "),os=e(Mt,"CODE",{});var iu=o(os);tc=p(iu,"installment"),iu.forEach(n),ac=p(Mt,". To aid in execution, a small fee is left as "),cs=e(Mt,"CODE",{});var uu=o(cs);nc=p(uu,"executorAllowance"),uu.forEach(n),sc=p(Mt," for each execution of the contract, it may be paid to anyone."),Mt.forEach(n),we=r(t),Sn=e(t,"P",{});var ru=o(Sn);ec=p(ru,"This contract: checks that the first output pays to the beneficiary; checks that the timelock is satisfied; checks that the second output pays back to the contract; gets the total value being spent; calculates the amount to be returned, and finally, checks that both the installment amount of the first output & the total returned to the contract exceed the required amounts."),ru.forEach(n),Te=r(t),Fa=e(t,"PRE",{class:!0});var yk=o(Fa);yk.forEach(n),xe=r(t),Va=e(t,"H2",{id:!0});var ku=o(Va);oc=p(ku,"Divide"),ku.forEach(n),De=r(t),Un=e(t,"P",{});var du=o(Un);cc=p(du,"The divide contract splits inputs across a predefined set of output destinations."),du.forEach(n),Pe=r(t),O=e(t,"P",{});var zt=o(O);pc=p(zt,"Each output is denoted by "),ps=e(zt,"CODE",{});var hu=o(ps);lc=p(hu,"r#LockingBytecode"),hu.forEach(n),ic=p(zt,", where "),ls=e(zt,"CODE",{});var fu=o(ls);uc=p(fu,"#"),fu.forEach(n),rc=p(zt," is the index of the output. Since early BitcoinScript did not have loops, this contract was written with a static list of outputs and a "),is=e(zt,"CODE",{});var mu=o(is);kc=p(mu,"divisor"),mu.forEach(n),dc=p(zt,", which is simply the number of outputs. An "),us=e(zt,"CODE",{});var vu=o(us);hc=p(vu,"executorAllowance"),vu.forEach(n),fc=p(zt," amount is subtracted from the total distribution amount, which may be spent by anyone as long as the amount payed to the hardcoded receipts equals or exceeds the alloted share."),zt.forEach(n),Ce=r(t),ua=e(t,"P",{});var Uo=o(ua);mc=p(Uo,"This contract: checks that each of the output destinations match the predefined output; calculates the total value on the contract; calculates the amount to be paid to each receipt ("),rs=e(Uo,"CODE",{});var yu=o(rs);vc=p(yu,"distribution"),yu.forEach(n),yc=p(Uo,"), and finally calculates that each receipt receives an output greater than, or equal to, the distribution amount."),Uo.forEach(n),Ae=r(t),Ma=e(t,"PRE",{class:!0});var bk=o(Ma);bk.forEach(n),Be=r(t),za=e(t,"H2",{id:!0});var bu=o(za);bc=p(bu,"Faucet"),bu.forEach(n),Re=r(t),Nn=e(t,"P",{});var _u=o(Nn);_c=p(_u,"The faucet contract pays \u201Cfree\u201D bitcoin."),_u.forEach(n),He=r(t),Y=e(t,"P",{});var ha=o(Y);Ec=p(ha,"To prevent the faucet from being drained by successive calls, a "),ks=e(ha,"CODE",{});var Eu=o(ks);wc=p(Eu,"period"),Eu.forEach(n),Tc=p(ha," timeout is set to specify the minimum age of the input being spent. The amount available to be spent is defined by a "),ds=e(ha,"CODE",{});var wu=o(ds);xc=p(wu,"payout"),wu.forEach(n),Dc=p(ha,". As a convenience, and to have multiple faucets with the same payout, an "),hs=e(ha,"CODE",{});var Tu=o(hs);Pc=p(Tu,"index"),Tu.forEach(n),Cc=p(ha," parameter is added to distinguish identical contracts."),ha.forEach(n),Le=r(t),St=e(t,"P",{});var Zn=o(St);Ac=p(Zn,"The steps of this contract are as follows: first, it requires that the transaction be called with an age that is greater than the current "),fs=e(Zn,"CODE",{});var xu=o(fs);Bc=p(xu,"period"),xu.forEach(n),Rc=p(Zn,"; the "),ms=e(Zn,"CODE",{});var Du=o(ms);Hc=p(Du,"index"),Du.forEach(n),Lc=p(Zn," is used so that it is not unused; next the first output must return all value to the faucet contract, and finally the returned value is calculate and must be returned to the faucet if the current value exceeds the payout."),Zn.forEach(n),qe=r(t),$a=e(t,"PRE",{class:!0});var _k=o($a);_k.forEach(n),Oe=r(t),Ga=e(t,"H2",{id:!0});var Pu=o(Ga);qc=p(Pu,"Mine-able Faucet"),Pu.forEach(n),Ie=r(t),Fn=e(t,"P",{});var Cu=o(Fn);Oc=p(Cu,"The \u20BF\u2219\u03D5 mining covenant is very much like the faucet, with some additional requirements."),Cu.forEach(n),Se=r(t),Ut=e(t,"P",{});var gn=o(Ut);Ic=p(gn,"First, execution of the contract must be called with a "),vs=e(gn,"CODE",{});var Au=o(vs);Sc=p(Au,"nonce"),Au.forEach(n),Uc=p(gn,` [a random value used once]
which when added to the current locking bytecode and hashed results in a value starting with some number of zeros.
How many zeros is the `),ys=e(gn,"CODE",{});var Bu=o(ys);Nc=p(Bu,"difficulty"),Bu.forEach(n),Fc=p(gn,"."),gn.forEach(n),Ue=r(t),W=e(t,"P",{});var fa=o(W);Vc=p(fa,"Finally, prior to spending the the mining "),bs=e(fa,"CODE",{});var Ru=o(bs);Mc=p(Ru,"payout"),Ru.forEach(n),zc=p(fa,`, the spender must announce
the winning `),_s=e(fa,"CODE",{});var Hu=o(_s);$c=p(Hu,"nonce"),Hu.forEach(n),Gc=p(fa," in an OP_RETURN of the first output, and send the balance of the contract to a new mining covenant with the new nonce as a "),Es=e(fa,"CODE",{});var Lu=o(Es);Yc=p(Lu,"canary"),Lu.forEach(n),Wc=p(fa,"."),fa.forEach(n),Ne=r(t),Ya=e(t,"P",{});var yi=o(Ya);Wa=e(yi,"IMG",{src:!0,alt:!0,title:!0}),Xc=p(yi,`
Like an infinite series of Failures to Deliver (FTDs) for a stock, or banging forex futures to manipulate an outcome in currency markets, the canary is always brought back to life with a new copy of itself. You don\u2019t have to take over a whole blockchain to create a market for your energy, just mine a covenant\u2014there will be far less idiosyncratic risk.`),yi.forEach(n),Fe=r(t),Xa=e(t,"PRE",{class:!0});var Ek=o(Xa);Ek.forEach(n),Ve=r(t),ja=e(t,"H2",{id:!0});var qu=o(ja);jc=p(qu,"Perpetuity"),qu.forEach(n),Me=r(t),Vn=e(t,"P",{});var Ou=o(Vn);Kc=p(Ou,"The Perpetuity contract works like an Annuity, however rather than pay a fixed amount, a fixed fraction of the total is paid each period."),Ou.forEach(n),ze=r(t),Nt=e(t,"P",{});var ts=o(Nt);Jc=p(ts,"The fraction paid is determined by the "),ws=e(ts,"CODE",{});var Iu=o(ws);Qc=p(Iu,"decay"),Iu.forEach(n),Zc=p(ts," parameter. If a "),Ts=e(ts,"CODE",{});var Su=o(Ts);gc=p(Su,"decay"),Su.forEach(n),tp=p(ts," of 10 is specified, then one tenth the value is paid each period."),ts.forEach(n),$e=r(t),Ka=e(t,"PRE",{class:!0});var wk=o(Ka);wk.forEach(n),Ge=r(t),Ja=e(t,"H2",{id:!0});var Uu=o(Ja);ap=p(Uu,"Record"),Uu.forEach(n),Ye=r(t),Mn=e(t,"P",{});var Nu=o(Mn);np=p(Nu,"A utility function to broadcast new contracts as OP_RETURN messages."),Nu.forEach(n),We=r(t),Qa=e(t,"PRE",{class:!0});var Tk=o(Qa);Tk.forEach(n),Xe=r(t),Za=e(t,"H1",{id:!0});var Fu=o(Za);sp=p(Fu,"Definitions"),Fu.forEach(n),je=r(t),ga=e(t,"H2",{id:!0});var Vu=o(ga);ep=p(Vu,"Units"),Vu.forEach(n),Ke=r(t),ra=e(t,"P",{});var No=o(ra);op=p(No,"bitcoin has it\u2019s own units of value and time. Although there are whole coins and it\u2019s possible to use epoch time (seconds since 1970) in some cases, we\u2019ll stick to two here to steer clear of the politics surrounding \u201Cleap seconds\u201D and what is a "),xs=e(No,"EM",{});var Mu=o(xs);cp=p(Mu,"unit of account"),Mu.forEach(n),pp=p(No,"."),No.forEach(n),Je=r(t),tn=e(t,"H3",{id:!0});var zu=o(tn);lp=p(zu,"satoshis"),zu.forEach(n),Qe=r(t),zn=e(t,"P",{});var $u=o(zn);ip=p($u,"A unit of account (on the Bitcoin Cash fork of the initial bitcoin blockchain). A hundred million satoshi are equal to 1 Bitcoin Cash."),$u.forEach(n),Ze=r(t),an=e(t,"H3",{id:!0});var Gu=o(an);up=p(Gu,"blocks (time)"),Gu.forEach(n),ge=r(t),$n=e(t,"P",{});var Yu=o($n);rp=p(Yu,"The base unit of time on bitcoin is called a block, blocktimes very, but are about 10 minutes on average."),Yu.forEach(n),to=r(t),ka=e(t,"TABLE",{});var Fo=o(ka);Ds=e(Fo,"THEAD",{});var Wu=o(Ds);rt=e(Wu,"TR",{});var ma=o(rt);Ps=e(ma,"TH",{});var Xu=o(Ps);kp=p(Xu,"Blocks"),Xu.forEach(n),dp=r(ma),Cs=e(ma,"TH",{});var ju=o(Cs);hp=p(ju,"Minutes"),ju.forEach(n),fp=r(ma),As=e(ma,"TH",{});var Ku=o(As);mp=p(Ku,"Days"),Ku.forEach(n),vp=r(ma),Bs=e(ma,"TH",{});var Ju=o(Bs);yp=p(Ju,"Years"),Ju.forEach(n),ma.forEach(n),Wu.forEach(n),bp=r(Fo),y=e(Fo,"TBODY",{});var b=o(y);kt=e(b,"TR",{});var va=o(kt);Rs=e(va,"TD",{});var Qu=o(Rs);_p=p(Qu,"1"),Qu.forEach(n),Ep=r(va),Hs=e(va,"TD",{});var Zu=o(Hs);wp=p(Zu,"10"),Zu.forEach(n),Tp=r(va),Ls=e(va,"TD",{});var gu=o(Ls);xp=p(gu,"-"),gu.forEach(n),Dp=r(va),qs=e(va,"TD",{});var tr=o(qs);Pp=p(tr,"-"),tr.forEach(n),va.forEach(n),Cp=r(b),dt=e(b,"TR",{});var ya=o(dt);Os=e(ya,"TD",{});var ar=o(Os);Ap=p(ar,"10"),ar.forEach(n),Bp=r(ya),Is=e(ya,"TD",{});var nr=o(Is);Rp=p(nr,"100"),nr.forEach(n),Hp=r(ya),Ss=e(ya,"TD",{});var sr=o(Ss);Lp=p(sr,"-"),sr.forEach(n),qp=r(ya),Us=e(ya,"TD",{});var er=o(Us);Op=p(er,"-"),er.forEach(n),ya.forEach(n),Ip=r(b),ht=e(b,"TR",{});var ba=o(ht);Ns=e(ba,"TD",{});var or=o(Ns);Sp=p(or,"100"),or.forEach(n),Up=r(ba),Fs=e(ba,"TD",{});var cr=o(Fs);Np=p(cr,"1000"),cr.forEach(n),Fp=r(ba),Vs=e(ba,"TD",{});var pr=o(Vs);Vp=p(pr,"0.694"),pr.forEach(n),Mp=r(ba),Ms=e(ba,"TD",{});var lr=o(Ms);zp=p(lr,"-"),lr.forEach(n),ba.forEach(n),$p=r(b),ft=e(b,"TR",{});var _a=o(ft);zs=e(_a,"TD",{});var ir=o(zs);Gp=p(ir,"144"),ir.forEach(n),Yp=r(_a),$s=e(_a,"TD",{});var ur=o($s);Wp=p(ur,"1440"),ur.forEach(n),Xp=r(_a),Gs=e(_a,"TD",{});var rr=o(Gs);jp=p(rr,"1"),rr.forEach(n),Kp=r(_a),Ys=e(_a,"TD",{});var kr=o(Ys);Jp=p(kr,"-"),kr.forEach(n),_a.forEach(n),Qp=r(b),mt=e(b,"TR",{});var Ea=o(mt);Ws=e(Ea,"TD",{});var dr=o(Ws);Zp=p(dr,"1000"),dr.forEach(n),gp=r(Ea),Xs=e(Ea,"TD",{});var hr=o(Xs);tl=p(hr,"-"),hr.forEach(n),al=r(Ea),js=e(Ea,"TD",{});var fr=o(js);nl=p(fr,"6.94"),fr.forEach(n),sl=r(Ea),Ks=e(Ea,"TD",{});var mr=o(Ks);el=p(mr,"-"),mr.forEach(n),Ea.forEach(n),ol=r(b),vt=e(b,"TR",{});var wa=o(vt);Js=e(wa,"TD",{});var vr=o(Js);cl=p(vr,"4000"),vr.forEach(n),pl=r(wa),Qs=e(wa,"TD",{});var yr=o(Qs);ll=p(yr,"-"),yr.forEach(n),il=r(wa),Zs=e(wa,"TD",{});var br=o(Zs);ul=p(br,"27.7"),br.forEach(n),rl=r(wa),gs=e(wa,"TD",{});var _r=o(gs);kl=p(_r,"-"),_r.forEach(n),wa.forEach(n),dl=r(b),yt=e(b,"TR",{});var Ta=o(yt);te=e(Ta,"TD",{});var Er=o(te);hl=p(Er,"13140"),Er.forEach(n),fl=r(Ta),ae=e(Ta,"TD",{});var wr=o(ae);ml=p(wr,"-"),wr.forEach(n),vl=r(Ta),ne=e(Ta,"TD",{});var Tr=o(ne);yl=p(Tr,"91.25"),Tr.forEach(n),bl=r(Ta),se=e(Ta,"TD",{});var xr=o(se);_l=p(xr,"0.249"),xr.forEach(n),Ta.forEach(n),El=r(b),bt=e(b,"TR",{});var xa=o(bt);ee=e(xa,"TD",{});var Dr=o(ee);wl=p(Dr,"26280"),Dr.forEach(n),Tl=r(xa),oe=e(xa,"TD",{});var Pr=o(oe);xl=p(Pr,"-"),Pr.forEach(n),Dl=r(xa),ce=e(xa,"TD",{});var Cr=o(ce);Pl=p(Cr,"-"),Cr.forEach(n),Cl=r(xa),pe=e(xa,"TD",{});var Ar=o(pe);Al=p(Ar,"0.499"),Ar.forEach(n),xa.forEach(n),Bl=r(b),_t=e(b,"TR",{});var Da=o(_t);le=e(Da,"TD",{});var Br=o(le);Rl=p(Br,"52560"),Br.forEach(n),Hl=r(Da),ie=e(Da,"TD",{});var Rr=o(ie);Ll=p(Rr,"-"),Rr.forEach(n),ql=r(Da),ue=e(Da,"TD",{});var Hr=o(ue);Ol=p(Hr,"-"),Hr.forEach(n),Il=r(Da),re=e(Da,"TD",{});var Lr=o(re);Sl=p(Lr,"0.999"),Lr.forEach(n),Da.forEach(n),b.forEach(n),Fo.forEach(n),ao=r(t),Ft=e(t,"P",{});var as=o(Ft);Ul=p(as,"The largest value specified by the timelock upgrade "),nn=e(as,"A",{href:!0,rel:!0});var qr=o(nn);Nl=p(qr,"(BIP68)"),qr.forEach(n),Fl=p(as," is a 16-bit value. Contracts with locking periods larger than the maximum value (65536) have "),ke=e(as,"STRONG",{});var Or=o(ke);Vl=p(Or,"not"),Or.forEach(n),Ml=p(as," been tested, and should not be expected to work."),as.forEach(n),no=r(t),sn=e(t,"H2",{id:!0});var Ir=o(sn);zl=p(Ir,"Languages"),Ir.forEach(n),so=r(t),en=e(t,"H3",{id:!0});var Sr=o(en);$l=p(Sr,"BitcoinScript"),Sr.forEach(n),eo=r(t),da=e(t,"P",{});var Vo=o(da);Gl=p(Vo,"A procedural, stack-oriented programming language (Forth-like) with different rules and operations. In practice, it is "),on=e(Vo,"A",{href:!0,rel:!0});var Ur=o(on);Yl=p(Ur,"Script"),Ur.forEach(n),Wl=p(Vo," that mostly unlocks value on a bitcoin network."),Vo.forEach(n),oo=r(t),cn=e(t,"H3",{id:!0});var Nr=o(cn);Xl=p(Nr,"CashScript"),Nr.forEach(n),co=r(t),pn=e(t,"P",{});var bi=o(pn);ln=e(bi,"A",{href:!0,rel:!0});var Fr=o(ln);jl=p(Fr,"CashScript is a high-level programming language for smart contracts on Bitcoin Cash"),Fr.forEach(n),Kl=p(bi," that transpiles to BitcoinScript."),bi.forEach(n),po=r(t),un=e(t,"H2",{id:!0});var Vr=o(un);Jl=p(Vr,"Script Components"),Vr.forEach(n),lo=r(t),rn=e(t,"H3",{id:!0});var Mr=o(rn);Ql=p(Mr,"Unlocking Script"),Mr.forEach(n),io=r(t),kn=e(t,"P",{});var _i=o(kn);Zl=p(_i,`Code that is run before running the unlocking code. If execution doesn\u2019t trigger failures and leaves a single non-zero value, it is considered unlocked.
`),dn=e(_i,"A",{href:!0,rel:!0});var zr=o(dn);gl=p(zr,"More"),zr.forEach(n),_i.forEach(n),uo=r(t),hn=e(t,"H3",{id:!0});var $r=o(hn);ti=p($r,"Locking Script"),$r.forEach(n),ro=r(t),Gn=e(t,"P",{});var Gr=o(Gn);ai=p(Gr,"At present (Nov 2022), there are two types of unlocking script (actually 4). P2PKH (pay-to-publicKeyHash), which pays to the hash of a public key. And Pay to Script (P2PSH) which pay to an unlocking script hash."),Gr.forEach(n),ko=r(t),Yn=e(t,"P",{});var Yr=o(Yn);fn=e(Yr,"A",{href:!0,rel:!0});var Wr=o(fn);ni=p(Wr,"More info"),Wr.forEach(n),Yr.forEach(n),ho=r(t),mn=e(t,"H3",{id:!0});var Xr=o(mn);si=p(Xr,"OP_RETURN"),Xr.forEach(n),fo=r(t),Wn=e(t,"P",{});var jr=o(Wn);ei=p(jr,"A code (106) in BitcoinScript for transaction outputs which can store arbitrary data."),jr.forEach(n),mo=r(t),vn=e(t,"H3",{id:!0});var Kr=o(vn);oi=p(Kr,"OP_RETURN data"),Kr.forEach(n),vo=r(t),Vt=e(t,"P",{});var ns=o(Vt);ci=p(ns,"Data in OP_RETURNs is commonly encoded by pushing the total number of bytes, followed by the data bytes. For example "),de=e(ns,"CODE",{});var Jr=o(de);pi=p(Jr,"04"),Jr.forEach(n),li=p(ns," followed by "),he=e(ns,"CODE",{});var Qr=o(he);ii=p(Qr,"7574786f"),Qr.forEach(n),ui=p(ns," (4 bytes of in two letter hex). This format is used to \u201Cbroadcast\u201D \u20BF\u2219\u03D5 contracts."),ns.forEach(n),yo=r(t),yn=e(t,"H3",{id:!0});var Zr=o(yn);ri=p(Zr,"Published"),Zr.forEach(n),bo=r(t),Xn=e(t,"P",{});var gr=o(Xn);ki=p(gr,"In the context of an unspent contract, a contract is published if the parameters to construct and spend it are recorded on the blockchain, either in an OP_RETURN or by reference to the spent output."),gr.forEach(n),_o=r(t),jn=e(t,"P",{});var tk=o(jn);di=p(tk,"A cashaddress locks value, the parameters of the contract allow unlocking the value."),tk.forEach(n),Eo=r(t),bn=e(t,"H3",{id:!0});var ak=o(bn);hi=p(ak,"Unspent Transaction Output (UTXO)"),ak.forEach(n),wo=r(t),Kn=e(t,"P",{});var nk=o(Kn);fi=p(nk,"some value, defined by the output of a previous transaction, which is locked by some code, either the hash of a public key (cashaddr), or a script that, when executed, satisfies a locking code."),nk.forEach(n),To=r(t),Jn=e(t,"P",{});var sk=o(Jn);mi=p(sk,"The value may be zero, in the case of an OP_RETURN."),sk.forEach(n),this.h()},h(){k(d,"id","welcome"),k(A,"id","contract-types"),k(B,"id","beneficiary-contracts"),k(ot,"id","distributive-contracts"),k(qt,"id","informational-contracts"),k(Oa,"id","timelock-v-non-timelocked"),k(Sa,"href","https://reference.cash/protocol/forks/bip-0068"),k(Sa,"rel","nofollow"),k(Ua,"id","contracts"),k(Na,"id","annuity"),k(Fa,"class","language-solidity"),k(Va,"id","divide"),k(Ma,"class","language-solidity"),k(za,"id","faucet"),k($a,"class","language-solidity"),k(Ga,"id","mine-able-faucet"),Ok(Wa.src,wi="canary.png")||k(Wa,"src",wi),k(Wa,"alt","Replace the canary"),k(Wa,"title","Look, see, he's alright. He's fine."),k(Xa,"class","language-solidity"),k(ja,"id","perpetuity"),k(Ka,"class","language-solidity"),k(Ja,"id","record"),k(Qa,"class","language-solidity"),k(Za,"id","definitions"),k(ga,"id","units"),k(tn,"id","satoshis"),k(an,"id","blocks-time"),k(nn,"href","https://reference.cash/protocol/forks/bip-0068"),k(nn,"rel","nofollow"),k(sn,"id","languages"),k(en,"id","bitcoinscript"),k(on,"href","https://reference.cash/protocol/blockchain/script"),k(on,"rel","nofollow"),k(cn,"id","cashscript"),k(ln,"href","https://cashscript.org/docs/basics/about"),k(ln,"rel","nofollow"),k(un,"id","script-components"),k(rn,"id","unlocking-script"),k(dn,"href","https://reference.cash/protocol/blockchain/transaction/unlocking-script"),k(dn,"rel","nofollow"),k(hn,"id","locking-script"),k(fn,"href","https://reference.cash/protocol/blockchain/transaction/locking-script"),k(fn,"rel","nofollow"),k(mn,"id","op_return"),k(vn,"id","op_return-data"),k(yn,"id","published"),k(bn,"id","unspent-transaction-output-utxo")},m(t,l){i(t,d,l),a(d,v),i(t,f,l),i(t,h,l),a(h,x),i(t,z,l),i(t,P,l),a(P,Pa),i(t,C,l),i(t,A,l),a(A,X),i(t,Jt,l),i(t,S,l),a(S,j),i(t,Qt,l),i(t,B,l),a(B,K),i(t,Zt,l),i(t,U,l),a(U,J),i(t,gt,l),i(t,T,l),a(T,N),a(N,Q),a(Q,_),a(_,Et),a(Q,Z),a(Q,$t),a($t,wt),a(T,g),a(T,F),a(F,R),a(R,V),a(V,Ca),a(R,Tt),a(R,M),a(M,Aa),a(F,xt),a(F,D),a(D,Gt),a(Gt,Dt),a(D,tt),a(D,Yt),a(Yt,at),a(F,nt),a(F,st),a(st,H),a(H,Pt),a(st,et),a(st,Wt),a(Wt,Ct),i(t,$,l),i(t,ot,l),a(ot,At),i(t,G,l),i(t,Bt,l),a(Bt,ta),i(t,Xt,l),i(t,E,l),a(E,Rt),a(Rt,ct),a(ct,jt),a(jt,m),a(ct,w),a(ct,L),a(L,_n),a(E,En),a(E,pt),a(pt,Ht),a(Ht,lt),a(lt,wn),a(Ht,Tn),a(Ht,aa),a(aa,xn),a(pt,Dn),a(pt,Lt),a(Lt,na),a(na,Pn),a(Lt,Ba),a(Lt,sa),a(sa,it),i(t,Ra,l),i(t,qt,l),a(qt,Cn),i(t,Ha,l),i(t,Kt,l),a(Kt,An),i(t,La,l),i(t,ut,l),a(ut,ea),a(ea,Ot),a(Ot,oa),a(oa,Bn),a(Ot,qa),a(Ot,ca),a(ca,pa),a(ut,Rn),a(ut,la),a(la,It),a(It,ia),a(ia,Hn),a(It,Ln),a(It,qn),a(qn,Mo),i(t,fe,l),i(t,Oa,l),a(Oa,zo),i(t,me,l),i(t,Ia,l),a(Ia,$o),a(Ia,Sa),a(Sa,Go),i(t,ve,l),i(t,On,l),a(On,Yo),i(t,ye,l),i(t,Ua,l),a(Ua,Wo),i(t,be,l),i(t,Na,l),a(Na,Xo),i(t,_e,l),i(t,In,l),a(In,jo),i(t,Ee,l),i(t,q,l),a(q,Ko),a(q,ss),a(ss,Jo),a(q,Qo),a(q,es),a(es,Zo),a(q,go),a(q,os),a(os,tc),a(q,ac),a(q,cs),a(cs,nc),a(q,sc),i(t,we,l),i(t,Sn,l),a(Sn,ec),i(t,Te,l),i(t,Fa,l),Fa.innerHTML=kk,i(t,xe,l),i(t,Va,l),a(Va,oc),i(t,De,l),i(t,Un,l),a(Un,cc),i(t,Pe,l),i(t,O,l),a(O,pc),a(O,ps),a(ps,lc),a(O,ic),a(O,ls),a(ls,uc),a(O,rc),a(O,is),a(is,kc),a(O,dc),a(O,us),a(us,hc),a(O,fc),i(t,Ce,l),i(t,ua,l),a(ua,mc),a(ua,rs),a(rs,vc),a(ua,yc),i(t,Ae,l),i(t,Ma,l),Ma.innerHTML=dk,i(t,Be,l),i(t,za,l),a(za,bc),i(t,Re,l),i(t,Nn,l),a(Nn,_c),i(t,He,l),i(t,Y,l),a(Y,Ec),a(Y,ks),a(ks,wc),a(Y,Tc),a(Y,ds),a(ds,xc),a(Y,Dc),a(Y,hs),a(hs,Pc),a(Y,Cc),i(t,Le,l),i(t,St,l),a(St,Ac),a(St,fs),a(fs,Bc),a(St,Rc),a(St,ms),a(ms,Hc),a(St,Lc),i(t,qe,l),i(t,$a,l),$a.innerHTML=hk,i(t,Oe,l),i(t,Ga,l),a(Ga,qc),i(t,Ie,l),i(t,Fn,l),a(Fn,Oc),i(t,Se,l),i(t,Ut,l),a(Ut,Ic),a(Ut,vs),a(vs,Sc),a(Ut,Uc),a(Ut,ys),a(ys,Nc),a(Ut,Fc),i(t,Ue,l),i(t,W,l),a(W,Vc),a(W,bs),a(bs,Mc),a(W,zc),a(W,_s),a(_s,$c),a(W,Gc),a(W,Es),a(Es,Yc),a(W,Wc),i(t,Ne,l),i(t,Ya,l),a(Ya,Wa),a(Ya,Xc),i(t,Fe,l),i(t,Xa,l),Xa.innerHTML=fk,i(t,Ve,l),i(t,ja,l),a(ja,jc),i(t,Me,l),i(t,Vn,l),a(Vn,Kc),i(t,ze,l),i(t,Nt,l),a(Nt,Jc),a(Nt,ws),a(ws,Qc),a(Nt,Zc),a(Nt,Ts),a(Ts,gc),a(Nt,tp),i(t,$e,l),i(t,Ka,l),Ka.innerHTML=mk,i(t,Ge,l),i(t,Ja,l),a(Ja,ap),i(t,Ye,l),i(t,Mn,l),a(Mn,np),i(t,We,l),i(t,Qa,l),Qa.innerHTML=vk,i(t,Xe,l),i(t,Za,l),a(Za,sp),i(t,je,l),i(t,ga,l),a(ga,ep),i(t,Ke,l),i(t,ra,l),a(ra,op),a(ra,xs),a(xs,cp),a(ra,pp),i(t,Je,l),i(t,tn,l),a(tn,lp),i(t,Qe,l),i(t,zn,l),a(zn,ip),i(t,Ze,l),i(t,an,l),a(an,up),i(t,ge,l),i(t,$n,l),a($n,rp),i(t,to,l),i(t,ka,l),a(ka,Ds),a(Ds,rt),a(rt,Ps),a(Ps,kp),a(rt,dp),a(rt,Cs),a(Cs,hp),a(rt,fp),a(rt,As),a(As,mp),a(rt,vp),a(rt,Bs),a(Bs,yp),a(ka,bp),a(ka,y),a(y,kt),a(kt,Rs),a(Rs,_p),a(kt,Ep),a(kt,Hs),a(Hs,wp),a(kt,Tp),a(kt,Ls),a(Ls,xp),a(kt,Dp),a(kt,qs),a(qs,Pp),a(y,Cp),a(y,dt),a(dt,Os),a(Os,Ap),a(dt,Bp),a(dt,Is),a(Is,Rp),a(dt,Hp),a(dt,Ss),a(Ss,Lp),a(dt,qp),a(dt,Us),a(Us,Op),a(y,Ip),a(y,ht),a(ht,Ns),a(Ns,Sp),a(ht,Up),a(ht,Fs),a(Fs,Np),a(ht,Fp),a(ht,Vs),a(Vs,Vp),a(ht,Mp),a(ht,Ms),a(Ms,zp),a(y,$p),a(y,ft),a(ft,zs),a(zs,Gp),a(ft,Yp),a(ft,$s),a($s,Wp),a(ft,Xp),a(ft,Gs),a(Gs,jp),a(ft,Kp),a(ft,Ys),a(Ys,Jp),a(y,Qp),a(y,mt),a(mt,Ws),a(Ws,Zp),a(mt,gp),a(mt,Xs),a(Xs,tl),a(mt,al),a(mt,js),a(js,nl),a(mt,sl),a(mt,Ks),a(Ks,el),a(y,ol),a(y,vt),a(vt,Js),a(Js,cl),a(vt,pl),a(vt,Qs),a(Qs,ll),a(vt,il),a(vt,Zs),a(Zs,ul),a(vt,rl),a(vt,gs),a(gs,kl),a(y,dl),a(y,yt),a(yt,te),a(te,hl),a(yt,fl),a(yt,ae),a(ae,ml),a(yt,vl),a(yt,ne),a(ne,yl),a(yt,bl),a(yt,se),a(se,_l),a(y,El),a(y,bt),a(bt,ee),a(ee,wl),a(bt,Tl),a(bt,oe),a(oe,xl),a(bt,Dl),a(bt,ce),a(ce,Pl),a(bt,Cl),a(bt,pe),a(pe,Al),a(y,Bl),a(y,_t),a(_t,le),a(le,Rl),a(_t,Hl),a(_t,ie),a(ie,Ll),a(_t,ql),a(_t,ue),a(ue,Ol),a(_t,Il),a(_t,re),a(re,Sl),i(t,ao,l),i(t,Ft,l),a(Ft,Ul),a(Ft,nn),a(nn,Nl),a(Ft,Fl),a(Ft,ke),a(ke,Vl),a(Ft,Ml),i(t,no,l),i(t,sn,l),a(sn,zl),i(t,so,l),i(t,en,l),a(en,$l),i(t,eo,l),i(t,da,l),a(da,Gl),a(da,on),a(on,Yl),a(da,Wl),i(t,oo,l),i(t,cn,l),a(cn,Xl),i(t,co,l),i(t,pn,l),a(pn,ln),a(ln,jl),a(pn,Kl),i(t,po,l),i(t,un,l),a(un,Jl),i(t,lo,l),i(t,rn,l),a(rn,Ql),i(t,io,l),i(t,kn,l),a(kn,Zl),a(kn,dn),a(dn,gl),i(t,uo,l),i(t,hn,l),a(hn,ti),i(t,ro,l),i(t,Gn,l),a(Gn,ai),i(t,ko,l),i(t,Yn,l),a(Yn,fn),a(fn,ni),i(t,ho,l),i(t,mn,l),a(mn,si),i(t,fo,l),i(t,Wn,l),a(Wn,ei),i(t,mo,l),i(t,vn,l),a(vn,oi),i(t,vo,l),i(t,Vt,l),a(Vt,ci),a(Vt,de),a(de,pi),a(Vt,li),a(Vt,he),a(he,ii),a(Vt,ui),i(t,yo,l),i(t,yn,l),a(yn,ri),i(t,bo,l),i(t,Xn,l),a(Xn,ki),i(t,_o,l),i(t,jn,l),a(jn,di),i(t,Eo,l),i(t,bn,l),a(bn,hi),i(t,wo,l),i(t,Kn,l),a(Kn,fi),i(t,To,l),i(t,Jn,l),a(Jn,mi)},p:Ik,d(t){t&&n(d),t&&n(f),t&&n(h),t&&n(z),t&&n(P),t&&n(C),t&&n(A),t&&n(Jt),t&&n(S),t&&n(Qt),t&&n(B),t&&n(Zt),t&&n(U),t&&n(gt),t&&n(T),t&&n($),t&&n(ot),t&&n(G),t&&n(Bt),t&&n(Xt),t&&n(E),t&&n(Ra),t&&n(qt),t&&n(Ha),t&&n(Kt),t&&n(La),t&&n(ut),t&&n(fe),t&&n(Oa),t&&n(me),t&&n(Ia),t&&n(ve),t&&n(On),t&&n(ye),t&&n(Ua),t&&n(be),t&&n(Na),t&&n(_e),t&&n(In),t&&n(Ee),t&&n(q),t&&n(we),t&&n(Sn),t&&n(Te),t&&n(Fa),t&&n(xe),t&&n(Va),t&&n(De),t&&n(Un),t&&n(Pe),t&&n(O),t&&n(Ce),t&&n(ua),t&&n(Ae),t&&n(Ma),t&&n(Be),t&&n(za),t&&n(Re),t&&n(Nn),t&&n(He),t&&n(Y),t&&n(Le),t&&n(St),t&&n(qe),t&&n($a),t&&n(Oe),t&&n(Ga),t&&n(Ie),t&&n(Fn),t&&n(Se),t&&n(Ut),t&&n(Ue),t&&n(W),t&&n(Ne),t&&n(Ya),t&&n(Fe),t&&n(Xa),t&&n(Ve),t&&n(ja),t&&n(Me),t&&n(Vn),t&&n(ze),t&&n(Nt),t&&n($e),t&&n(Ka),t&&n(Ge),t&&n(Ja),t&&n(Ye),t&&n(Mn),t&&n(We),t&&n(Qa),t&&n(Xe),t&&n(Za),t&&n(je),t&&n(ga),t&&n(Ke),t&&n(ra),t&&n(Je),t&&n(tn),t&&n(Qe),t&&n(zn),t&&n(Ze),t&&n(an),t&&n(ge),t&&n($n),t&&n(to),t&&n(ka),t&&n(ao),t&&n(Ft),t&&n(no),t&&n(sn),t&&n(so),t&&n(en),t&&n(eo),t&&n(da),t&&n(oo),t&&n(cn),t&&n(co),t&&n(pn),t&&n(po),t&&n(un),t&&n(lo),t&&n(rn),t&&n(io),t&&n(kn),t&&n(uo),t&&n(hn),t&&n(ro),t&&n(Gn),t&&n(ko),t&&n(Yn),t&&n(ho),t&&n(mn),t&&n(fo),t&&n(Wn),t&&n(mo),t&&n(vn),t&&n(vo),t&&n(Vt),t&&n(yo),t&&n(yn),t&&n(bo),t&&n(Xn),t&&n(_o),t&&n(jn),t&&n(Eo),t&&n(bn),t&&n(wo),t&&n(Kn),t&&n(To),t&&n(Jn)}}}function Vk(I){let d,v,f,h,x,z,P,Pa,C,A,X,Jt,S,j,Qt,B,K,Zt,U,J,gt,T,N,Q,_,Et,Z,$t,wt,g,F,R,V,Ca,Tt,M,Aa,xt,D,Gt,Dt,tt,Yt,at,nt,st,H,Pt,et,Wt,Ct,$,ot,At,G,Bt,ta,Xt,E,Rt;const ct=[I[0],ck];let jt={$$slots:{default:[Fk]},$$scope:{ctx:I}};for(let m=0;m<ct.length;m+=1)jt=Ei(jt,ct[m]);return E=new Nk({props:jt}),{c(){d=s("nav"),v=s("ol"),f=s("li"),h=s("a"),x=c("Welcome!"),z=s("li"),P=s("a"),Pa=c("Contract Types"),C=s("ol"),A=s("li"),X=s("a"),Jt=c("Beneficiary Contracts"),S=s("li"),j=s("a"),Qt=c("Distributive Contracts"),B=s("li"),K=s("a"),Zt=c("Informational Contracts"),U=s("li"),J=s("a"),gt=c("Timelock v non-timelocked"),T=s("li"),N=s("a"),Q=c("Contracts"),_=s("ol"),Et=s("li"),Z=s("a"),$t=c("Annuity"),wt=s("li"),g=s("a"),F=c("Divide"),R=s("li"),V=s("a"),Ca=c("Faucet"),Tt=s("li"),M=s("a"),Aa=c("Mine-able Faucet"),xt=s("li"),D=s("a"),Gt=c("Perpetuity"),Dt=s("li"),tt=s("a"),Yt=c("Record"),at=s("li"),nt=s("a"),st=c("Definitions"),H=s("ol"),Pt=s("li"),et=s("a"),Wt=c("Units"),Ct=s("li"),$=s("a"),ot=c("Languages"),At=s("li"),G=s("a"),Bt=c("Script Components"),ta=u(),Xt=u(),Ak(E.$$.fragment),this.h()},l(m){d=e(m,"NAV",{class:!0});var w=o(d);v=e(w,"OL",{class:!0});var L=o(v);f=e(L,"LI",{class:!0});var _n=o(f);h=e(_n,"A",{class:!0,href:!0});var En=o(h);x=p(En,"Welcome!"),En.forEach(n),_n.forEach(n),z=e(L,"LI",{class:!0});var pt=o(z);P=e(pt,"A",{class:!0,href:!0});var Ht=o(P);Pa=p(Ht,"Contract Types"),Ht.forEach(n),C=e(pt,"OL",{class:!0});var lt=o(C);A=e(lt,"LI",{class:!0});var wn=o(A);X=e(wn,"A",{class:!0,href:!0});var Tn=o(X);Jt=p(Tn,"Beneficiary Contracts"),Tn.forEach(n),wn.forEach(n),S=e(lt,"LI",{class:!0});var aa=o(S);j=e(aa,"A",{class:!0,href:!0});var xn=o(j);Qt=p(xn,"Distributive Contracts"),xn.forEach(n),aa.forEach(n),B=e(lt,"LI",{class:!0});var Dn=o(B);K=e(Dn,"A",{class:!0,href:!0});var Lt=o(K);Zt=p(Lt,"Informational Contracts"),Lt.forEach(n),Dn.forEach(n),U=e(lt,"LI",{class:!0});var na=o(U);J=e(na,"A",{class:!0,href:!0});var Pn=o(J);gt=p(Pn,"Timelock v non-timelocked"),Pn.forEach(n),na.forEach(n),lt.forEach(n),pt.forEach(n),T=e(L,"LI",{class:!0});var Ba=o(T);N=e(Ba,"A",{class:!0,href:!0});var sa=o(N);Q=p(sa,"Contracts"),sa.forEach(n),_=e(Ba,"OL",{class:!0});var it=o(_);Et=e(it,"LI",{class:!0});var Ra=o(Et);Z=e(Ra,"A",{class:!0,href:!0});var qt=o(Z);$t=p(qt,"Annuity"),qt.forEach(n),Ra.forEach(n),wt=e(it,"LI",{class:!0});var Cn=o(wt);g=e(Cn,"A",{class:!0,href:!0});var Ha=o(g);F=p(Ha,"Divide"),Ha.forEach(n),Cn.forEach(n),R=e(it,"LI",{class:!0});var Kt=o(R);V=e(Kt,"A",{class:!0,href:!0});var An=o(V);Ca=p(An,"Faucet"),An.forEach(n),Kt.forEach(n),Tt=e(it,"LI",{class:!0});var La=o(Tt);M=e(La,"A",{class:!0,href:!0});var ut=o(M);Aa=p(ut,"Mine-able Faucet"),ut.forEach(n),La.forEach(n),xt=e(it,"LI",{class:!0});var ea=o(xt);D=e(ea,"A",{class:!0,href:!0});var Ot=o(D);Gt=p(Ot,"Perpetuity"),Ot.forEach(n),ea.forEach(n),Dt=e(it,"LI",{class:!0});var oa=o(Dt);tt=e(oa,"A",{class:!0,href:!0});var Bn=o(tt);Yt=p(Bn,"Record"),Bn.forEach(n),oa.forEach(n),it.forEach(n),Ba.forEach(n),at=e(L,"LI",{class:!0});var qa=o(at);nt=e(qa,"A",{class:!0,href:!0});var ca=o(nt);st=p(ca,"Definitions"),ca.forEach(n),H=e(qa,"OL",{class:!0});var pa=o(H);Pt=e(pa,"LI",{class:!0});var Rn=o(Pt);et=e(Rn,"A",{class:!0,href:!0});var la=o(et);Wt=p(la,"Units"),la.forEach(n),Rn.forEach(n),Ct=e(pa,"LI",{class:!0});var It=o(Ct);$=e(It,"A",{class:!0,href:!0});var ia=o($);ot=p(ia,"Languages"),ia.forEach(n),It.forEach(n),At=e(pa,"LI",{class:!0});var Hn=o(At);G=e(Hn,"A",{class:!0,href:!0});var Ln=o(G);Bt=p(Ln,"Script Components"),Ln.forEach(n),Hn.forEach(n),pa.forEach(n),qa.forEach(n),L.forEach(n),w.forEach(n),ta=r(m),Bk("svelte-2pc8sv",document.head).forEach(n),Xt=r(m),Rk(E.$$.fragment,m),this.h()},h(){k(h,"class","toc-link toc-link-h1"),k(h,"href","#welcome"),k(f,"class","toc-item toc-item-h1"),k(P,"class","toc-link toc-link-h1"),k(P,"href","#contract-types"),k(X,"class","toc-link toc-link-h2"),k(X,"href","#beneficiary-contracts"),k(A,"class","toc-item toc-item-h2"),k(j,"class","toc-link toc-link-h2"),k(j,"href","#distributive-contracts"),k(S,"class","toc-item toc-item-h2"),k(K,"class","toc-link toc-link-h2"),k(K,"href","#informational-contracts"),k(B,"class","toc-item toc-item-h2"),k(J,"class","toc-link toc-link-h2"),k(J,"href","#timelock-v-non-timelocked"),k(U,"class","toc-item toc-item-h2"),k(C,"class","toc-level toc-level-2"),k(z,"class","toc-item toc-item-h1"),k(N,"class","toc-link toc-link-h1"),k(N,"href","#contracts"),k(Z,"class","toc-link toc-link-h2"),k(Z,"href","#annuity"),k(Et,"class","toc-item toc-item-h2"),k(g,"class","toc-link toc-link-h2"),k(g,"href","#divide"),k(wt,"class","toc-item toc-item-h2"),k(V,"class","toc-link toc-link-h2"),k(V,"href","#faucet"),k(R,"class","toc-item toc-item-h2"),k(M,"class","toc-link toc-link-h2"),k(M,"href","#mine-able-faucet"),k(Tt,"class","toc-item toc-item-h2"),k(D,"class","toc-link toc-link-h2"),k(D,"href","#perpetuity"),k(xt,"class","toc-item toc-item-h2"),k(tt,"class","toc-link toc-link-h2"),k(tt,"href","#record"),k(Dt,"class","toc-item toc-item-h2"),k(_,"class","toc-level toc-level-2"),k(T,"class","toc-item toc-item-h1"),k(nt,"class","toc-link toc-link-h1"),k(nt,"href","#definitions"),k(et,"class","toc-link toc-link-h2"),k(et,"href","#units"),k(Pt,"class","toc-item toc-item-h2"),k($,"class","toc-link toc-link-h2"),k($,"href","#languages"),k(Ct,"class","toc-item toc-item-h2"),k(G,"class","toc-link toc-link-h2"),k(G,"href","#script-components"),k(At,"class","toc-item toc-item-h2"),k(H,"class","toc-level toc-level-2"),k(at,"class","toc-item toc-item-h1"),k(v,"class","toc-level toc-level-1"),k(d,"class","toc"),document.title="Unspent Phi"},m(m,w){i(m,d,w),a(d,v),a(v,f),a(f,h),a(h,x),a(v,z),a(z,P),a(P,Pa),a(z,C),a(C,A),a(A,X),a(X,Jt),a(C,S),a(S,j),a(j,Qt),a(C,B),a(B,K),a(K,Zt),a(C,U),a(U,J),a(J,gt),a(v,T),a(T,N),a(N,Q),a(T,_),a(_,Et),a(Et,Z),a(Z,$t),a(_,wt),a(wt,g),a(g,F),a(_,R),a(R,V),a(V,Ca),a(_,Tt),a(Tt,M),a(M,Aa),a(_,xt),a(xt,D),a(D,Gt),a(_,Dt),a(Dt,tt),a(tt,Yt),a(v,at),a(at,nt),a(nt,st),a(at,H),a(H,Pt),a(Pt,et),a(et,Wt),a(H,Ct),a(Ct,$),a($,ot),a(H,At),a(At,G),a(G,Bt),i(m,ta,w),i(m,Xt,w),Hk(E,m,w),Rt=!0},p(m,[w]){const L=w&1?Lk(ct,[w&1&&ek(m[0]),w&0&&ek(ck)]):{};w&2&&(L.$$scope={dirty:w,ctx:m}),E.$set(L)},i(m){Rt||(uk(E.$$.fragment,m),Rt=!0)},o(m){rk(E.$$.fragment,m),Rt=!1},d(m){m&&n(d),m&&n(ta),m&&n(Xt),qk(E,m)}}}const ck={layout:"splash"};function Mk(I,d,v){return I.$$set=f=>{v(0,d=Ei(Ei({},d),ok(f)))},d=ok(d),[d]}class $k extends pk{constructor(d){super(),lk(this,d,Mk,Vk,ik,{})}}export{$k as default,ck as metadata};
//# sourceMappingURL=_page.md-d009ec88.js.map
