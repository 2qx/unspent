{
    "provider": {
        "network": "mainnet",
        "manualConnectionManagement": false,
        "concurrentRequests": 0,
        "electrum": {
            "_events": {},
            "_eventsCount": 0,
            "application": "UtxPhi",
            "version": "1.4.1",
            "timeout": 120000,
            "pingInterval": 3000,
            "strategy": {
                "distribution": 1,
                "confidence": 1,
                "order": 0
            },
            "clients": {
                "bch.imaginary.cash:50004": {
                    "state": 0,
                    "connection": {
                        "_events": {},
                        "_eventsCount": 0,
                        "connection": {
                            "_events": {},
                            "_eventsCount": 2,
                            "application": "UtxPhi",
                            "version": "1.4.1",
                            "host": "bch.imaginary.cash",
                            "port": 50004,
                            "scheme": "wss",
                            "timeout": 120000,
                            "pingInterval": 3000,
                            "socket": {
                                "_events": {},
                                "_eventsCount": 3,
                                "timers": {},
                                "onConnectHasRun": false,
                                "eventForwarders": {}
                            },
                            "timers": {},
                            "verifications": [],
                            "status": 0,
                            "messageBuffer": ""
                        },
                        "subscriptionMethods": {},
                        "subscriptionCallbacks": {},
                        "requestId": 0,
                        "requestResolvers": {}
                    }
                },
                "electrum.imaginary.cash:50004": {
                    "state": 0,
                    "connection": {
                        "_events": {},
                        "_eventsCount": 0,
                        "connection": {
                            "_events": {},
                            "_eventsCount": 2,
                            "application": "UtxPhi",
                            "version": "1.4.1",
                            "host": "electrum.imaginary.cash",
                            "port": 50004,
                            "scheme": "wss",
                            "timeout": 120000,
                            "pingInterval": 3000,
                            "socket": {
                                "_events": {},
                                "_eventsCount": 3,
                                "timers": {},
                                "onConnectHasRun": false,
                                "eventForwarders": {}
                            },
                            "timers": {},
                            "verifications": [],
                            "status": 0,
                            "messageBuffer": ""
                        },
                        "subscriptionMethods": {},
                        "subscriptionCallbacks": {},
                        "requestId": 0,
                        "requestResolvers": {}
                    }
                }
            },
            "connections": 0,
            "notifications": {},
            "status": 0,
            "requestCounter": 0,
            "requestPromises": {},
            "requestLock": {
                "_semaphore": {
                    "_maxConcurrency": 1,
                    "_cancelError": {},
                    "_queue": [],
                    "_waiters": [],
                    "_value": 1
                }
            },
            "responseLock": {
                "_semaphore": {
                    "_maxConcurrency": 1,
                    "_cancelError": {},
                    "_queue": [],
                    "_waiters": [],
                    "_value": 1
                }
            }
        }
    },
    "testnet": false,
    "artifact": {
        "contractName": "Faucet",
        "constructorInputs": [
            {
                "name": "period",
                "type": "int"
            },
            {
                "name": "payout",
                "type": "int"
            },
            {
                "name": "index",
                "type": "int"
            }
        ],
        "abi": [
            {
                "name": "drip",
                "inputs": []
            }
        ],
        "bytecode": "OP_CHECKSEQUENCEVERIFY OP_DROP OP_SWAP OP_0 OP_GREATERTHANOREQUAL OP_VERIFY OP_0 OP_OUTPUTBYTECODE a914 OP_ACTIVEBYTECODE OP_HASH160 OP_CAT 87 OP_CAT OP_EQUALVERIFY OP_INPUTINDEX OP_UTXOVALUE OP_2DUP OP_SWAP OP_SUB OP_SWAP OP_ROT OP_GREATERTHAN OP_IF OP_0 OP_OUTPUTVALUE OP_OVER OP_GREATERTHANOREQUAL OP_VERIFY OP_ENDIF OP_DROP OP_1",
        "source": "pragma cashscript >= 0.7.0;\n\n// v20220609\n\n// This is an experimental faucet contract \n// Prelim testing on regtest, just a concept\ncontract Faucet(\n\n    // interval for payouts, in blocks\n    int period,\n\n    // amount to be paid by faucet allowance. \n    int payout,\n\n    // random number input into contract to have more than one\n    int index\n) {\n    function drip() {\n\n        // Check that time has passed and that time locks are enabled\n        require(tx.age >= period);\n            \n        // use the index\n        require(index >= 0);\n\n        // require the first output to match the active bytecode\n        require(tx.outputs[0].lockingBytecode == new LockingBytecodeP2SH(hash160(this.activeBytecode)));\n\n        // Get the total value on the contract\n        int currentValue = tx.inputs[this.activeInputIndex].value;\n\n        // Calculate value returned to the contract\n        int returnedValue = currentValue - payout;\n\n        // If the value on the contract exceeds the payout amount\n        //  then assert that the value must return to the contract\n        if(currentValue > payout){\n           require(tx.outputs[0].value >= returnedValue);\n        }\n\n    }\n\n}",
        "compiler": {
            "name": "cashc",
            "version": "0.7.2"
        },
        "updatedAt": "2022-09-21T19:02:37.601Z"
    },
    "contract": {
        "artifact": {
            "contractName": "Faucet",
            "constructorInputs": [
                {
                    "name": "period",
                    "type": "int"
                },
                {
                    "name": "payout",
                    "type": "int"
                },
                {
                    "name": "index",
                    "type": "int"
                }
            ],
            "abi": [
                {
                    "name": "drip",
                    "inputs": []
                }
            ],
            "bytecode": "OP_CHECKSEQUENCEVERIFY OP_DROP OP_SWAP OP_0 OP_GREATERTHANOREQUAL OP_VERIFY OP_0 OP_OUTPUTBYTECODE a914 OP_ACTIVEBYTECODE OP_HASH160 OP_CAT 87 OP_CAT OP_EQUALVERIFY OP_INPUTINDEX OP_UTXOVALUE OP_2DUP OP_SWAP OP_SUB OP_SWAP OP_ROT OP_GREATERTHAN OP_IF OP_0 OP_OUTPUTVALUE OP_OVER OP_GREATERTHANOREQUAL OP_VERIFY OP_ENDIF OP_DROP OP_1",
            "source": "pragma cashscript >= 0.7.0;\n\n// v20220609\n\n// This is an experimental faucet contract \n// Prelim testing on regtest, just a concept\ncontract Faucet(\n\n    // interval for payouts, in blocks\n    int period,\n\n    // amount to be paid by faucet allowance. \n    int payout,\n\n    // random number input into contract to have more than one\n    int index\n) {\n    function drip() {\n\n        // Check that time has passed and that time locks are enabled\n        require(tx.age >= period);\n            \n        // use the index\n        require(index >= 0);\n\n        // require the first output to match the active bytecode\n        require(tx.outputs[0].lockingBytecode == new LockingBytecodeP2SH(hash160(this.activeBytecode)));\n\n        // Get the total value on the contract\n        int currentValue = tx.inputs[this.activeInputIndex].value;\n\n        // Calculate value returned to the contract\n        int returnedValue = currentValue - payout;\n\n        // If the value on the contract exceeds the payout amount\n        //  then assert that the value must return to the contract\n        if(currentValue > payout){\n           require(tx.outputs[0].value >= returnedValue);\n        }\n\n    }\n\n}",
            "compiler": {
                "name": "cashc",
                "version": "0.7.2"
            },
            "updatedAt": "2022-09-21T19:02:37.601Z"
        },
        "provider": {
            "network": "mainnet",
            "manualConnectionManagement": false,
            "concurrentRequests": 0,
            "electrum": {
                "_events": {},
                "_eventsCount": 0,
                "application": "UtxPhi",
                "version": "1.4.1",
                "timeout": 120000,
                "pingInterval": 3000,
                "strategy": {
                    "distribution": 1,
                    "confidence": 1,
                    "order": 0
                },
                "clients": {
                    "bch.imaginary.cash:50004": {
                        "state": 0,
                        "connection": {
                            "_events": {},
                            "_eventsCount": 0,
                            "connection": {
                                "_events": {},
                                "_eventsCount": 2,
                                "application": "UtxPhi",
                                "version": "1.4.1",
                                "host": "bch.imaginary.cash",
                                "port": 50004,
                                "scheme": "wss",
                                "timeout": 120000,
                                "pingInterval": 3000,
                                "socket": {
                                    "_events": {},
                                    "_eventsCount": 3,
                                    "timers": {},
                                    "onConnectHasRun": false,
                                    "eventForwarders": {}
                                },
                                "timers": {},
                                "verifications": [],
                                "status": 0,
                                "messageBuffer": ""
                            },
                            "subscriptionMethods": {},
                            "subscriptionCallbacks": {},
                            "requestId": 0,
                            "requestResolvers": {}
                        }
                    },
                    "electrum.imaginary.cash:50004": {
                        "state": 0,
                        "connection": {
                            "_events": {},
                            "_eventsCount": 0,
                            "connection": {
                                "_events": {},
                                "_eventsCount": 2,
                                "application": "UtxPhi",
                                "version": "1.4.1",
                                "host": "electrum.imaginary.cash",
                                "port": 50004,
                                "scheme": "wss",
                                "timeout": 120000,
                                "pingInterval": 3000,
                                "socket": {
                                    "_events": {},
                                    "_eventsCount": 3,
                                    "timers": {},
                                    "onConnectHasRun": false,
                                    "eventForwarders": {}
                                },
                                "timers": {},
                                "verifications": [],
                                "status": 0,
                                "messageBuffer": ""
                            },
                            "subscriptionMethods": {},
                            "subscriptionCallbacks": {},
                            "requestId": 0,
                            "requestResolvers": {}
                        }
                    }
                },
                "connections": 0,
                "notifications": {},
                "status": 0,
                "requestCounter": 0,
                "requestPromises": {},
                "requestLock": {
                    "_semaphore": {
                        "_maxConcurrency": 1,
                        "_cancelError": {},
                        "_queue": [],
                        "_waiters": [],
                        "_value": 1
                    }
                },
                "responseLock": {
                    "_semaphore": {
                        "_maxConcurrency": 1,
                        "_cancelError": {},
                        "_queue": [],
                        "_waiters": [],
                        "_value": 1
                    }
                }
            }
        },
        "redeemScript": [
            {
                "0": 1
            },
            {
                "0": 176,
                "1": 4
            },
            {
                "0": 1
            },
            178,
            117,
            124,
            {},
            162,
            105,
            {},
            205,
            {
                "0": 169,
                "1": 20
            },
            193,
            169,
            126,
            {
                "0": 135
            },
            126,
            136,
            192,
            198,
            110,
            124,
            148,
            124,
            123,
            160,
            99,
            {},
            204,
            120,
            162,
            105,
            104,
            117,
            81
        ],
        "functions": {},
        "name": "Faucet",
        "address": "bitcoincash:ppzsq5eghsl5jvv8s4ayyejrr9udtzfc4g04ueesgx",
        "bytesize": 40,
        "opcount": 26
    },
    "period": 1,
    "payout": 1200,
    "index": 1,
    "options": {
        "version": 1,
        "network": "mainnet"
    }
}