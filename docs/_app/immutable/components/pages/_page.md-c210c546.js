import{S as Nr,i as Ur,s as Vr,a as l,k as s,q as p,a6 as Fr,h as a,c as i,l as e,m as o,r as c,n as k,E as Sr,b as r,G as t,B as gl}from"../../chunks/index-2c07c0a5.js";function Mr(Tr){let Ct,Pt,Te,hs,Bt,xe,fs,At,De,ms,b,wn,qt,Re,Ce,Tn,Ot,Pe,Be,Lt,Ht,Ae,V,xn,It,qe,Oe,Dn,Nt,Le,He,Rn,Ut,Ie,Ne,Vt,Ft,Ue,f,Cn,St,Ve,Fe,Pn,Mt,Se,Me,Bn,zt,ze,Ge,An,Gt,ge,We,qn,gt,Xe,Ye,On,Wt,je,ys,Xt,Je,bs,et,Ln,Ke,Qe,vs,ot,Hn,Ze,$e,Es,pt,In,to,no,_s,M,Nn,w,Un,ao,so,Vn,eo,oo,Fn,po,co,Sn,lo,io,d,T,Mn,uo,ro,zn,ko,ho,Gn,fo,mo,gn,yo,bo,x,Wn,vo,Eo,Xn,_o,wo,Yn,To,xo,jn,Do,Ro,D,Jn,Co,Po,Kn,Bo,Ao,Qn,qo,Oo,Zn,Lo,Ho,R,$n,Io,No,ta,Uo,Vo,na,Fo,So,aa,Mo,zo,C,sa,Go,go,ea,Wo,Xo,oa,Yo,jo,pa,Jo,Ko,P,ca,Qo,Zo,la,$o,tp,ia,np,ap,ua,sp,ep,B,ra,op,pp,ka,cp,lp,da,ip,up,ha,rp,kp,A,fa,dp,hp,ma,fp,mp,ya,yp,bp,ba,vp,Ep,q,va,_p,wp,Ea,Tp,xp,_a,Dp,Rp,wa,Cp,ws,ct,Ta,Pp,Bp,Ts,O,xa,Ap,qp,Da,Op,Lp,Ra,Hp,Ip,xs,lt,Ca,Np,Up,Ds,it,Pa,Vp,Fp,Rs,Yt,Sp,Cs,jt,Mp,Ps,Jt,zp,Bs,Kt,Gp,As,z,Ba,ut,Aa,gp,Wp,qa,Xp,Yp,F,rt,Oa,jp,Jp,La,Kp,Qp,kt,Ha,Zp,$p,Ia,tc,nc,dt,Na,ac,sc,Ua,ec,qs,Qt,oc,Os,Zt,pc,Ls,G,Va,ht,Fa,cc,lc,Sa,ic,uc,S,ft,Ma,rc,kc,za,dc,hc,mt,Ga,fc,mc,ga,yc,bc,yt,Wa,vc,Ec,Xa,_c,Hs,$t,wc,Is,tn,Tc,Ns,nn,xc,Us,an,Dc,Vs,sn,Rc,Fs,m,Cc,Ya,Pc,Bc,ja,Ac,qc,Ja,Oc,Lc,Ka,Hc,Ic,Ss,en,Nc,Ms,bt,xr=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>

<span class="token comment">// v202205626</span>

<span class="token comment">// Pay equal payments at regular intervals using input locks</span>
<span class="token keyword">contract</span> <span class="token class-name">Annuity</span><span class="token punctuation">(</span>

  <span class="token comment">// interval for payouts, in blocks</span>
  <span class="token builtin">int</span> period<span class="token punctuation">,</span>

  <span class="token comment">// LockingBytecode of the beneficiary,</span>
  <span class="token comment">// the address receiving payments</span>
  <span class="token builtin">bytes</span> recipientLockingBytecode<span class="token punctuation">,</span>

  <span class="token comment">// amount paid in each installment</span>
  <span class="token builtin">int</span> installment<span class="token punctuation">,</span>

  <span class="token comment">// extra allowance for administration of contract</span>
  <span class="token comment">// fees are paid from executors' allowance.</span>
  <span class="token builtin">int</span> executorAllowance
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Check that the first output sends to the recipient</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> recipientLockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Check that time has passed and that time locks are enabled</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// require the second output to match the active bytecode</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value on the contract</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Calculate value returned to the contract</span>
    <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> installment <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

    <span class="token comment">// Check that the outputs send the correct amounts</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> installment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,zs,on,Uc,Gs,pn,Vc,gs,y,Fc,Qa,Sc,Mc,Za,zc,Gc,$a,gc,Wc,ts,Xc,Yc,Ws,g,jc,ns,Jc,Kc,Xs,vt,Dr=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.0</span><span class="token punctuation">;</span>

 <span class="token keyword">contract</span> <span class="token class-name">Divide</span><span class="token punctuation">(</span>
   <span class="token comment">// allowance for party executing the contract</span>
   <span class="token builtin">int</span> executorAllowance<span class="token punctuation">,</span>
   <span class="token comment">// number of outputs receiving payout</span>
   <span class="token builtin">int</span> divisor<span class="token punctuation">,</span>

   <span class="token comment">// for each beneficiary,</span>
   <span class="token comment">// take the LockingBytecode as input</span>
   <span class="token builtin">bytes</span> r0LockingBytecode<span class="token punctuation">,</span>
   <span class="token builtin">bytes</span> r1LockingBytecode
 <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// distributes to each output in order</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> r0LockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> r1LockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value of inputs</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Total value paid to beneficiaries,</span>
    <span class="token comment">// minus executor allowance</span>
    <span class="token builtin">int</span> distributedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

    <span class="token comment">// Value paid to each beneficiary</span>
    <span class="token builtin">int</span> distribution <span class="token operator">=</span> distributedValue <span class="token operator">/</span> divisor<span class="token punctuation">;</span>

    <span class="token comment">// each output must be greater</span>
    <span class="token comment">// or equal to the distribution amount</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> distribution<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> distribution<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span></code>`,Ys,cn,Qc,js,ln,Zc,Js,v,$c,as,tl,nl,ss,al,sl,es,el,ol,Ks,L,pl,os,cl,ll,ps,il,ul,Qs,Et,Rr=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.0</span><span class="token punctuation">;</span>

<span class="token comment">// v20220609</span>

<span class="token keyword">contract</span> <span class="token class-name">Faucet</span><span class="token punctuation">(</span>

  <span class="token comment">// interval for payouts, in blocks</span>
  <span class="token builtin">int</span> period<span class="token punctuation">,</span>

  <span class="token comment">// amount to be paid by faucet allowance.</span>
  <span class="token builtin">int</span> payout<span class="token punctuation">,</span>

  <span class="token comment">// random number input into contract to have more than one</span>
  <span class="token builtin">int</span> index
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">drip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Check that time has passed and that time locks are enabled</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// use the index</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// require the first output to match the active bytecode</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value on the contract</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Calculate value returned to the contract</span>
    <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> payout<span class="token punctuation">;</span>

    <span class="token comment">// If the value on the contract exceeds the payout amount</span>
    <span class="token comment">// then assert that the value must return to the contract</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>currentValue <span class="token operator">></span> payout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,Zs,un,rl,$s,rn,kl,te,H,dl,cs,hl,fl,ls,ml,yl,ne,E,bl,is,vl,El,us,_l,wl,rs,Tl,xl,ae,_t,wt,Wl,Dl,se,Tt,Cr=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>

<span class="token comment">// v20220727</span>

<span class="token comment">// A faucet with proof of work.</span>
<span class="token keyword">contract</span> <span class="token class-name">Mine</span><span class="token punctuation">(</span>

  <span class="token comment">// interval for payouts, in blocks</span>
  <span class="token builtin">int</span> period<span class="token punctuation">,</span>

  <span class="token comment">// amount to be paid by faucet allowance.</span>
  <span class="token builtin">int</span> payout<span class="token punctuation">,</span>

  <span class="token comment">// how many leading zeros should the hash of the nonce and current bytecode have</span>
  <span class="token builtin">int</span> difficulty<span class="token punctuation">,</span>

  <span class="token comment">// the old nonce, which is replaced each time.</span>
  <span class="token builtin">bytes7</span> canary
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token builtin">bytes7</span> nonce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Check that time has passed and that time locks are enabled</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Use the old nonce</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>canary<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Check that the new nonce creates a hash with</span>
    <span class="token comment">// some D (difficulty) leading zeros when hashed with the active bytecode</span>
    <span class="token builtin">bytes</span> version <span class="token operator">=</span> <span class="token builtin">byte</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes</span> zeros <span class="token operator">=</span> <span class="token builtin">bytes7</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes</span> hash <span class="token operator">=</span> <span class="token function">sha256</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode <span class="token operator">+</span> <span class="token builtin">bytes7</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> zeros<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// calculate the locking bytecode</span>
    <span class="token comment">// of a new mining contract with the nonce as canary</span>
    <span class="token builtin">bytes</span> newContract <span class="token operator">=</span> <span class="token number">0x7</span> <span class="token operator">+</span> <span class="token builtin">bytes7</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes20</span> contractHash <span class="token operator">=</span> <span class="token function">hash160</span><span class="token punctuation">(</span>newContract<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes23</span> lockingCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span>contractHash<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// Require the first output details the parameters</span>
    <span class="token comment">// of the mining contract in a zero value OP_RETURN</span>
    <span class="token builtin">bytes</span> announcement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeNullData</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token comment">// The protocol</span>
      <span class="token number">0x7574786f</span><span class="token punctuation">,</span>
      <span class="token comment">// M for mining contract</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// version</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The period,</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The payout,</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>payout<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// preceding zeros on solution</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The current nonce (future canary), of the mining contract,</span>
      <span class="token comment">// where funds are simultaneously sent to</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The new bytecode</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>lockingCode<span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Assure that the first output matches the arguments to the contract</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> announcement<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// check that the change output sends to that contract</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> lockingCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value on the contract</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Calculate value returned to the contract</span>
    <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> payout<span class="token punctuation">;</span>

    <span class="token comment">// If the value on the contract exceeds the payout amount</span>
    <span class="token comment">// then assert that the value must return to the contract</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>currentValue <span class="token operator">></span> payout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Assure it has zero value</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,ee,kn,Rl,oe,dn,Cl,pe,I,Pl,ks,Bl,Al,ds,ql,Ol,ce,xt,Pr=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>

<span class="token comment">// v20220522</span>

<span class="token keyword">contract</span> <span class="token class-name">Perpetuity</span><span class="token punctuation">(</span>

 <span class="token comment">// interval for payouts, in blocks</span>
 <span class="token builtin">int</span> period<span class="token punctuation">,</span>

 <span class="token comment">// lockingBytecode of the beneficiary,</span>
 <span class="token comment">// the address receiving payments</span>
 <span class="token builtin">bytes</span> recipientLockingBytecode<span class="token punctuation">,</span>

 <span class="token comment">// extra allowance for administration of contract</span>
 <span class="token comment">// fees are paid from executors' allowance.</span>
 <span class="token builtin">int</span> executorAllowance<span class="token punctuation">,</span>

 <span class="token comment">// divisor for the payout,</span>
 <span class="token comment">// each payout must be greater than</span>
 <span class="token comment">// the total amount held on the contract</span>
 <span class="token comment">// divided by this number</span>
 <span class="token builtin">int</span> decay

<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">// Check that the first output sends to the recipient</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> recipientLockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that time has passed and that time locks are enabled</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// require the second output to match the active bytecode</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Get the total value on the contract</span>
  <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

  <span class="token comment">// The payout is the current value divided by the decay</span>
  <span class="token builtin">int</span> installment <span class="token operator">=</span> currentValue<span class="token operator">/</span>decay<span class="token punctuation">;</span>

  <span class="token comment">// Calculate value returned to the contract</span>
  <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> installment <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

  <span class="token comment">// Check that the outputs send the correct amounts</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> installment<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,le,hn,Ll,ie,fn,Hl,ue,Dt,Br=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">^</span><span class="token version number">0.7.0</span><span class="token punctuation">;</span>

<span class="token comment">/* Allows publishing some OP_RETURN message,
 * given that:
 * 1. the hash160 value of the zero value OP_RETURN message is passed
 * 2. the first output has zero value
 * 3. the remaining value is pass back to the contract, mostly.
 */</span>


<span class="token keyword">contract</span> <span class="token class-name">Record</span><span class="token punctuation">(</span><span class="token builtin">int</span> maxFee<span class="token punctuation">,</span> <span class="token builtin">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token builtin">bytes20</span> dataHash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">// this does nothing</span>
  <span class="token comment">// different indices enable different contract addresses</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that the first tx output is a zero value opcode matching the provided hash</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode<span class="token punctuation">)</span> <span class="token operator">==</span> dataHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// calculate the fee required to propagate the transaction 1 sat/ byte</span>
  <span class="token builtin">int</span> baseFee <span class="token operator">=</span> <span class="token number">162</span><span class="token punctuation">;</span>

  <span class="token builtin">int</span> fee <span class="token operator">=</span> baseFee <span class="token operator">+</span> tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>fee<span class="token operator">&lt;=</span>maxFee<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that the second tx output sends the change back</span>
  <span class="token builtin">int</span> newValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">-</span> fee<span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){Ct=l(),Pt=s("h1"),Te=p("Welcome!"),hs=l(),Bt=s("p"),xe=p("Unspent Phi (\u20BF\u2219\u03D5) is an app for creating (and publishing) a set of simple contracts on the Bitcoin Cash (BCH) blockchain that anyone can execute. These contracts lock the value of unspent outputs from earlier transactions (UTXOs), and allow some small reward for any party to call a known contract (if valid according to the rules of BitcoinScript). Although simple, these contracts may be chained together to create complex outcomes."),fs=l(),At=s("p"),De=p("\u20BF\u2219\u03D5 contracts may be thought of as automata, machines that are unlocked and stepped forward by random participants on the blockchain. No one party has control, it\u2019s a race to spend them first. However, the code to unlock them must be known for the code to stepped forward. Money sent to \u20BF\u2219\u03D5 contracts appear identical to any other pay-to-script UTXOs on the network. Nothing is known about how to spend the contract until it is spent at least once, so in order for the contract to function automatically, both their existence and the parameters to unlock them must be known. While the code to unlock is broadcasted by spending the contract once, not all contracts can be spent right away, so it\u2019s easier and safer just to publish some unlock record and not worry about forgetting how to unlock them."),ms=l(),b=s("ul"),wn=s("li"),qt=s("a"),Re=p("Welcome!"),Ce=l(),Tn=s("li"),Ot=s("a"),Pe=p("Definitions"),Be=l(),Lt=s("li"),Ht=s("a"),Ae=p("Contract Types"),V=s("ul"),xn=s("li"),It=s("a"),qe=p("Beneficiary Contracts"),Oe=l(),Dn=s("li"),Nt=s("a"),Le=p("Distributive Contracts"),He=l(),Rn=s("li"),Ut=s("a"),Ie=p("Timelock v non-timelocked"),Ne=l(),Vt=s("li"),Ft=s("a"),Ue=p("Implemented Contracts"),f=s("ul"),Cn=s("li"),St=s("a"),Ve=p("Annuity"),Fe=l(),Pn=s("li"),Mt=s("a"),Se=p("Divide"),Me=l(),Bn=s("li"),zt=s("a"),ze=p("Faucet"),Ge=l(),An=s("li"),Gt=s("a"),ge=p("Mine-able Faucet"),We=l(),qn=s("li"),gt=s("a"),Xe=p("Perpetuity"),Ye=l(),On=s("li"),Wt=s("a"),je=p("Record"),ys=l(),Xt=s("h1"),Je=p("Definitions"),bs=l(),et=s("p"),Ln=s("strong"),Ke=p("covenant"),Qe=p(": A contract with variable parameters stored in script, which change."),vs=l(),ot=s("p"),Hn=s("strong"),Ze=p("satoshis"),$e=p(": A unit of account (on the Bitcoin Cash fork of the initial bitcoin blockchain). A hundred million satoshi are equal to 1 Bitcoin Cash."),Es=l(),pt=s("p"),In=s("strong"),to=p("blocks (timescale)"),no=p(": The base unit of time on bitcoin, about 10 minutes on average."),_s=l(),M=s("table"),Nn=s("thead"),w=s("tr"),Un=s("th"),ao=p("Blocks"),so=l(),Vn=s("th"),eo=p("Minutes"),oo=l(),Fn=s("th"),po=p("Days"),co=l(),Sn=s("th"),lo=p("Years"),io=l(),d=s("tbody"),T=s("tr"),Mn=s("td"),uo=p("1"),ro=l(),zn=s("td"),ko=p("10"),ho=l(),Gn=s("td"),fo=p("-"),mo=l(),gn=s("td"),yo=p("-"),bo=l(),x=s("tr"),Wn=s("td"),vo=p("10"),Eo=l(),Xn=s("td"),_o=p("100"),wo=l(),Yn=s("td"),To=p("-"),xo=l(),jn=s("td"),Do=p("-"),Ro=l(),D=s("tr"),Jn=s("td"),Co=p("100"),Po=l(),Kn=s("td"),Bo=p("1000"),Ao=l(),Qn=s("td"),qo=p("0.694"),Oo=l(),Zn=s("td"),Lo=p("-"),Ho=l(),R=s("tr"),$n=s("td"),Io=p("144"),No=l(),ta=s("td"),Uo=p("1440"),Vo=l(),na=s("td"),Fo=p("1"),So=l(),aa=s("td"),Mo=p("-"),zo=l(),C=s("tr"),sa=s("td"),Go=p("1000"),go=l(),ea=s("td"),Wo=p("-"),Xo=l(),oa=s("td"),Yo=p("6.94"),jo=l(),pa=s("td"),Jo=p("-"),Ko=l(),P=s("tr"),ca=s("td"),Qo=p("4000"),Zo=l(),la=s("td"),$o=p("-"),tp=l(),ia=s("td"),np=p("27.7"),ap=l(),ua=s("td"),sp=p("-"),ep=l(),B=s("tr"),ra=s("td"),op=p("13140"),pp=l(),ka=s("td"),cp=p("-"),lp=l(),da=s("td"),ip=p("91.25"),up=l(),ha=s("td"),rp=p("0.249"),kp=l(),A=s("tr"),fa=s("td"),dp=p("26280"),hp=l(),ma=s("td"),fp=p("-"),mp=l(),ya=s("td"),yp=p("-"),bp=l(),ba=s("td"),vp=p("0.499"),Ep=l(),q=s("tr"),va=s("td"),_p=p("52560"),wp=l(),Ea=s("td"),Tp=p("-"),xp=l(),_a=s("td"),Dp=p("-"),Rp=l(),wa=s("td"),Cp=p("0.999"),ws=l(),ct=s("p"),Ta=s("strong"),Pp=p("OP_RETURN"),Bp=p(": A code (106) in BitcoinScript for transaction outputs which can store arbitrary data."),Ts=l(),O=s("p"),xa=s("strong"),Ap=p("OP_RETURN data"),qp=p(": Data in OP_RETURNs is commonly encoded by pushing the total number of bytes, followed by the data bytes. For example "),Da=s("code"),Op=p("04"),Lp=p(" followed by "),Ra=s("code"),Hp=p("7574786f"),Ip=p(" (4 bytes of in two letter hex). This format is used to \u201Cbroadcast\u201D \u20BF\u2219\u03D5 contracts."),xs=l(),lt=s("p"),Ca=s("strong"),Np=p("published"),Up=p(": In the context of an unspent contract, a contract is published if the parameters to construct and spend it are recorded on the blockchain, either in an OP_RETURN or by reference to the spent output."),Ds=l(),it=s("p"),Pa=s("strong"),Vp=p("Unspent Transaction Output (UTXO)"),Fp=p(": some value, defined by the output of a previous transaction, which is locked by some code, either the hash of a public key (cashaddr), or a script."),Rs=l(),Yt=s("h1"),Sp=p("Contract Types"),Cs=l(),jt=s("p"),Mp=p("Each \u20BF\u2219\u03D5 contract is designed to do one thing. The contracts available (so far) are as follows:"),Ps=l(),Jt=s("h2"),zp=p("Beneficiary Contracts"),Bs=l(),Kt=s("p"),Gp=p("Some contracts control value on behalf of the contract creator. They all have an executor allowance which can be claimed by the party which submits a valid spending transactions."),As=l(),z=s("table"),Ba=s("thead"),ut=s("tr"),Aa=s("th"),gp=p("Name"),Wp=l(),qa=s("th"),Xp=p("Description"),Yp=l(),F=s("tbody"),rt=s("tr"),Oa=s("td"),jp=p("Annuity"),Jp=l(),La=s("td"),Kp=p("Equal payments over time."),Qp=l(),kt=s("tr"),Ha=s("td"),Zp=p("Divide"),$p=l(),Ia=s("td"),tc=p("Divide money into equal payments, up to four addresses"),nc=l(),dt=s("tr"),Na=s("td"),ac=p("Perpetuity"),sc=l(),Ua=s("td"),ec=p("Pay a fixed fraction of total value at intervals"),qs=l(),Qt=s("h2"),oc=p("Distributive Contracts"),Os=l(),Zt=s("p"),pc=p("Contracts with locked value that can be spent by anyone can be characterized as \u201Cfree\u201D. At present these include faucets, mining covenants, and a contract providing the facility to record data for free."),Ls=l(),G=s("table"),Va=s("thead"),ht=s("tr"),Fa=s("th"),cc=p("Name"),lc=l(),Sa=s("th"),ic=p("Description"),uc=l(),S=s("tbody"),ft=s("tr"),Ma=s("td"),rc=p("Faucet"),kc=l(),za=s("td"),dc=p("Distributes some free bitcoin per period"),hc=l(),mt=s("tr"),Ga=s("td"),fc=p("Mine"),mc=l(),ga=s("td"),yc=p("Distributes some bitcoin per period, for proof of work"),bc=l(),yt=s("tr"),Wa=s("td"),vc=p("Record"),Ec=l(),Xa=s("td"),_c=p("Broadcast a contract to the blockchain"),Hs=l(),$t=s("h2"),wc=p("Timelock v non-timelocked"),Is=l(),tn=s("p"),Tc=p("The Divide and Record contracts are not timelocked, they may be called at anytime."),Ns=l(),nn=s("h1"),xc=p("Implemented Contracts"),Us=l(),an=s("h2"),Dc=p("Annuity"),Vs=l(),sn=s("p"),Rc=p("The annuity contract pays a fixed amount (in satoshis) to a predefined locking bytecode (i.e. address)."),Fs=l(),m=s("p"),Cc=p("To prevent the contract from being called successively (thus paying out all at once), a timelock is added restricting input be of a certain age (in blocks), this parameter is called the "),Ya=s("code"),Pc=p("period"),Bc=p(". The beneficiary address (or contract) is denoted by the "),ja=s("code"),Ac=p("recipientLockingBytecode"),qc=p(". The amount paid in each period is the "),Ja=s("code"),Oc=p("installment"),Lc=p(". To aid in execution, a small fee is left as "),Ka=s("code"),Hc=p("executorAllowance"),Ic=p(" for each execution of the contract, it may be paid to anyone."),Ss=l(),en=s("p"),Nc=p("This contract: checks that the first output pays to the beneficiary; checks that the timelock is satisfied; checks that the second output pays back to the contract; gets the total value being spent; calculates the amount to be returned, and finally, checks that both the installment amount of the first output & the total returned to the contract exceed the required amounts."),Ms=l(),bt=s("pre"),zs=l(),on=s("h2"),Uc=p("Divide"),Gs=l(),pn=s("p"),Vc=p("The divide contract splits inputs across a predefined set of output destinations."),gs=l(),y=s("p"),Fc=p("Each output is denoted by "),Qa=s("code"),Sc=p("r#LockingBytecode"),Mc=p(", where "),Za=s("code"),zc=p("#"),Gc=p(" is the index of the output. Since early BitcoinScript did not have loops, this contract was written with a static list of outputs and a "),$a=s("code"),gc=p("divisor"),Wc=p(", which is simply the number of outputs. An "),ts=s("code"),Xc=p("executorAllowance"),Yc=p(" amount is subtracted from the total distribution amount, which may be spent by anyone as long as the amount payed to the hardcoded receipts equals or exceeds the alloted share."),Ws=l(),g=s("p"),jc=p("This contract: checks that each of the output destinations match the predefined output; calculates the total value on the contract; calculates the amount to be paid to each receipt ("),ns=s("code"),Jc=p("distribution"),Kc=p("), and finally calculates that each receipt receives an output greater than, or equal to, the distribution amount."),Xs=l(),vt=s("pre"),Ys=l(),cn=s("h2"),Qc=p("Faucet"),js=l(),ln=s("p"),Zc=p("The faucet contract pays \u201Cfree\u201D bitcoin."),Js=l(),v=s("p"),$c=p("To prevent the faucet from being drained by successive calls, a "),as=s("code"),tl=p("period"),nl=p(" timeout is set to specify the minimum age of the input being spent. The amount available to be spent is defined by a "),ss=s("code"),al=p("payout"),sl=p(". As a convenience, and to have multiple faucets with the same payout, an "),es=s("code"),el=p("index"),ol=p(" parameter is added to distinguish identical contracts."),Ks=l(),L=s("p"),pl=p("The steps of this contract are as follows: first, it requires that the transaction be called with an age that is greater than the current "),os=s("code"),cl=p("period"),ll=p("; the "),ps=s("code"),il=p("index"),ul=p(" is used so that it is not unused; next the first output must return all value to the faucet contract, and finally the returned value is calculate and must be returned to the faucet if the current value exceeds the payout."),Qs=l(),Et=s("pre"),Zs=l(),un=s("h2"),rl=p("Mine-able Faucet"),$s=l(),rn=s("p"),kl=p("The \u20BF\u2219\u03D5 mining covenant is very much like the faucet, with some additional requirements."),te=l(),H=s("p"),dl=p("First, execution of the contract must be called with a "),cs=s("code"),hl=p("nonce"),fl=p(` [a random value used once]
which when added to the current locking bytecode and hashed results in a value starting with some number of zeros.
How many zeros is the `),ls=s("code"),ml=p("difficulty"),yl=p("."),ne=l(),E=s("p"),bl=p("Finally, prior to spending the the mining "),is=s("code"),vl=p("payout"),El=p(`, the spender must announce
the winning `),us=s("code"),_l=p("nonce"),wl=p(" in an OP_RETURN of the first output, and send the balance of the contract to a new mining covenant with the new nonce as a "),rs=s("code"),Tl=p("canary"),xl=p("."),ae=l(),_t=s("p"),wt=s("img"),Dl=p(`
Like an infinite series of Failures to Deliver (FTDs) for a stock, or banging forex futures to manipulate an outcome in currency markets, the canary is always brought back to life with a new copy of itself.`),se=l(),Tt=s("pre"),ee=l(),kn=s("h2"),Rl=p("Perpetuity"),oe=l(),dn=s("p"),Cl=p("The Perpetuity contract works like an Annuity, however rather than pay a fixed amount, a fixed fraction of the total is paid each period."),pe=l(),I=s("p"),Pl=p("The fraction paid is determined by the "),ks=s("code"),Bl=p("decay"),Al=p(" parameter. If a "),ds=s("code"),ql=p("decay"),Ol=p(" of 10 is specified, then one tenth the value is paid each period."),ce=l(),xt=s("pre"),le=l(),hn=s("h2"),Ll=p("Record"),ie=l(),fn=s("p"),Hl=p("A utility function to broadcast new contracts as OP_RETURN messages."),ue=l(),Dt=s("pre"),this.h()},l(n){Fr("svelte-19fqxn6",document.head).forEach(a),Ct=i(n),Pt=e(n,"H1",{});var Xl=o(Pt);Te=c(Xl,"Welcome!"),Xl.forEach(a),hs=i(n),Bt=e(n,"P",{});var Yl=o(Bt);xe=c(Yl,"Unspent Phi (\u20BF\u2219\u03D5) is an app for creating (and publishing) a set of simple contracts on the Bitcoin Cash (BCH) blockchain that anyone can execute. These contracts lock the value of unspent outputs from earlier transactions (UTXOs), and allow some small reward for any party to call a known contract (if valid according to the rules of BitcoinScript). Although simple, these contracts may be chained together to create complex outcomes."),Yl.forEach(a),fs=i(n),At=e(n,"P",{});var jl=o(At);De=c(jl,"\u20BF\u2219\u03D5 contracts may be thought of as automata, machines that are unlocked and stepped forward by random participants on the blockchain. No one party has control, it\u2019s a race to spend them first. However, the code to unlock them must be known for the code to stepped forward. Money sent to \u20BF\u2219\u03D5 contracts appear identical to any other pay-to-script UTXOs on the network. Nothing is known about how to spend the contract until it is spent at least once, so in order for the contract to function automatically, both their existence and the parameters to unlock them must be known. While the code to unlock is broadcasted by spending the contract once, not all contracts can be spent right away, so it\u2019s easier and safer just to publish some unlock record and not worry about forgetting how to unlock them."),jl.forEach(a),ms=i(n),b=e(n,"UL",{});var W=o(b);wn=e(W,"LI",{});var Jl=o(wn);qt=e(Jl,"A",{href:!0});var Kl=o(qt);Re=c(Kl,"Welcome!"),Kl.forEach(a),Jl.forEach(a),Ce=i(W),Tn=e(W,"LI",{});var Ql=o(Tn);Ot=e(Ql,"A",{href:!0});var Zl=o(Ot);Pe=c(Zl,"Definitions"),Zl.forEach(a),Ql.forEach(a),Be=i(W),Lt=e(W,"LI",{});var Il=o(Lt);Ht=e(Il,"A",{href:!0});var $l=o(Ht);Ae=c($l,"Contract Types"),$l.forEach(a),V=e(Il,"UL",{});var mn=o(V);xn=e(mn,"LI",{});var ti=o(xn);It=e(ti,"A",{href:!0});var ni=o(It);qe=c(ni,"Beneficiary Contracts"),ni.forEach(a),ti.forEach(a),Oe=i(mn),Dn=e(mn,"LI",{});var ai=o(Dn);Nt=e(ai,"A",{href:!0});var si=o(Nt);Le=c(si,"Distributive Contracts"),si.forEach(a),ai.forEach(a),He=i(mn),Rn=e(mn,"LI",{});var ei=o(Rn);Ut=e(ei,"A",{href:!0});var oi=o(Ut);Ie=c(oi,"Timelock v non-timelocked"),oi.forEach(a),ei.forEach(a),mn.forEach(a),Il.forEach(a),Ne=i(W),Vt=e(W,"LI",{});var Nl=o(Vt);Ft=e(Nl,"A",{href:!0});var pi=o(Ft);Ue=c(pi,"Implemented Contracts"),pi.forEach(a),f=e(Nl,"UL",{});var _=o(f);Cn=e(_,"LI",{});var ci=o(Cn);St=e(ci,"A",{href:!0});var li=o(St);Ve=c(li,"Annuity"),li.forEach(a),ci.forEach(a),Fe=i(_),Pn=e(_,"LI",{});var ii=o(Pn);Mt=e(ii,"A",{href:!0});var ui=o(Mt);Se=c(ui,"Divide"),ui.forEach(a),ii.forEach(a),Me=i(_),Bn=e(_,"LI",{});var ri=o(Bn);zt=e(ri,"A",{href:!0});var ki=o(zt);ze=c(ki,"Faucet"),ki.forEach(a),ri.forEach(a),Ge=i(_),An=e(_,"LI",{});var di=o(An);Gt=e(di,"A",{href:!0});var hi=o(Gt);ge=c(hi,"Mine-able Faucet"),hi.forEach(a),di.forEach(a),We=i(_),qn=e(_,"LI",{});var fi=o(qn);gt=e(fi,"A",{href:!0});var mi=o(gt);Xe=c(mi,"Perpetuity"),mi.forEach(a),fi.forEach(a),Ye=i(_),On=e(_,"LI",{});var yi=o(On);Wt=e(yi,"A",{href:!0});var bi=o(Wt);je=c(bi,"Record"),bi.forEach(a),yi.forEach(a),_.forEach(a),Nl.forEach(a),W.forEach(a),ys=i(n),Xt=e(n,"H1",{});var vi=o(Xt);Je=c(vi,"Definitions"),vi.forEach(a),bs=i(n),et=e(n,"P",{});var Ul=o(et);Ln=e(Ul,"STRONG",{});var Ei=o(Ln);Ke=c(Ei,"covenant"),Ei.forEach(a),Qe=c(Ul,": A contract with variable parameters stored in script, which change."),Ul.forEach(a),vs=i(n),ot=e(n,"P",{});var Vl=o(ot);Hn=e(Vl,"STRONG",{});var _i=o(Hn);Ze=c(_i,"satoshis"),_i.forEach(a),$e=c(Vl,": A unit of account (on the Bitcoin Cash fork of the initial bitcoin blockchain). A hundred million satoshi are equal to 1 Bitcoin Cash."),Vl.forEach(a),Es=i(n),pt=e(n,"P",{});var Fl=o(pt);In=e(Fl,"STRONG",{});var wi=o(In);to=c(wi,"blocks (timescale)"),wi.forEach(a),no=c(Fl,": The base unit of time on bitcoin, about 10 minutes on average."),Fl.forEach(a),_s=i(n),M=e(n,"TABLE",{});var re=o(M);Nn=e(re,"THEAD",{});var Ti=o(Nn);w=e(Ti,"TR",{});var X=o(w);Un=e(X,"TH",{});var xi=o(Un);ao=c(xi,"Blocks"),xi.forEach(a),so=i(X),Vn=e(X,"TH",{});var Di=o(Vn);eo=c(Di,"Minutes"),Di.forEach(a),oo=i(X),Fn=e(X,"TH",{});var Ri=o(Fn);po=c(Ri,"Days"),Ri.forEach(a),co=i(X),Sn=e(X,"TH",{});var Ci=o(Sn);lo=c(Ci,"Years"),Ci.forEach(a),X.forEach(a),Ti.forEach(a),io=i(re),d=e(re,"TBODY",{});var h=o(d);T=e(h,"TR",{});var Y=o(T);Mn=e(Y,"TD",{});var Pi=o(Mn);uo=c(Pi,"1"),Pi.forEach(a),ro=i(Y),zn=e(Y,"TD",{});var Bi=o(zn);ko=c(Bi,"10"),Bi.forEach(a),ho=i(Y),Gn=e(Y,"TD",{});var Ai=o(Gn);fo=c(Ai,"-"),Ai.forEach(a),mo=i(Y),gn=e(Y,"TD",{});var qi=o(gn);yo=c(qi,"-"),qi.forEach(a),Y.forEach(a),bo=i(h),x=e(h,"TR",{});var j=o(x);Wn=e(j,"TD",{});var Oi=o(Wn);vo=c(Oi,"10"),Oi.forEach(a),Eo=i(j),Xn=e(j,"TD",{});var Li=o(Xn);_o=c(Li,"100"),Li.forEach(a),wo=i(j),Yn=e(j,"TD",{});var Hi=o(Yn);To=c(Hi,"-"),Hi.forEach(a),xo=i(j),jn=e(j,"TD",{});var Ii=o(jn);Do=c(Ii,"-"),Ii.forEach(a),j.forEach(a),Ro=i(h),D=e(h,"TR",{});var J=o(D);Jn=e(J,"TD",{});var Ni=o(Jn);Co=c(Ni,"100"),Ni.forEach(a),Po=i(J),Kn=e(J,"TD",{});var Ui=o(Kn);Bo=c(Ui,"1000"),Ui.forEach(a),Ao=i(J),Qn=e(J,"TD",{});var Vi=o(Qn);qo=c(Vi,"0.694"),Vi.forEach(a),Oo=i(J),Zn=e(J,"TD",{});var Fi=o(Zn);Lo=c(Fi,"-"),Fi.forEach(a),J.forEach(a),Ho=i(h),R=e(h,"TR",{});var K=o(R);$n=e(K,"TD",{});var Si=o($n);Io=c(Si,"144"),Si.forEach(a),No=i(K),ta=e(K,"TD",{});var Mi=o(ta);Uo=c(Mi,"1440"),Mi.forEach(a),Vo=i(K),na=e(K,"TD",{});var zi=o(na);Fo=c(zi,"1"),zi.forEach(a),So=i(K),aa=e(K,"TD",{});var Gi=o(aa);Mo=c(Gi,"-"),Gi.forEach(a),K.forEach(a),zo=i(h),C=e(h,"TR",{});var Q=o(C);sa=e(Q,"TD",{});var gi=o(sa);Go=c(gi,"1000"),gi.forEach(a),go=i(Q),ea=e(Q,"TD",{});var Wi=o(ea);Wo=c(Wi,"-"),Wi.forEach(a),Xo=i(Q),oa=e(Q,"TD",{});var Xi=o(oa);Yo=c(Xi,"6.94"),Xi.forEach(a),jo=i(Q),pa=e(Q,"TD",{});var Yi=o(pa);Jo=c(Yi,"-"),Yi.forEach(a),Q.forEach(a),Ko=i(h),P=e(h,"TR",{});var Z=o(P);ca=e(Z,"TD",{});var ji=o(ca);Qo=c(ji,"4000"),ji.forEach(a),Zo=i(Z),la=e(Z,"TD",{});var Ji=o(la);$o=c(Ji,"-"),Ji.forEach(a),tp=i(Z),ia=e(Z,"TD",{});var Ki=o(ia);np=c(Ki,"27.7"),Ki.forEach(a),ap=i(Z),ua=e(Z,"TD",{});var Qi=o(ua);sp=c(Qi,"-"),Qi.forEach(a),Z.forEach(a),ep=i(h),B=e(h,"TR",{});var $=o(B);ra=e($,"TD",{});var Zi=o(ra);op=c(Zi,"13140"),Zi.forEach(a),pp=i($),ka=e($,"TD",{});var $i=o(ka);cp=c($i,"-"),$i.forEach(a),lp=i($),da=e($,"TD",{});var tu=o(da);ip=c(tu,"91.25"),tu.forEach(a),up=i($),ha=e($,"TD",{});var nu=o(ha);rp=c(nu,"0.249"),nu.forEach(a),$.forEach(a),kp=i(h),A=e(h,"TR",{});var tt=o(A);fa=e(tt,"TD",{});var au=o(fa);dp=c(au,"26280"),au.forEach(a),hp=i(tt),ma=e(tt,"TD",{});var su=o(ma);fp=c(su,"-"),su.forEach(a),mp=i(tt),ya=e(tt,"TD",{});var eu=o(ya);yp=c(eu,"-"),eu.forEach(a),bp=i(tt),ba=e(tt,"TD",{});var ou=o(ba);vp=c(ou,"0.499"),ou.forEach(a),tt.forEach(a),Ep=i(h),q=e(h,"TR",{});var nt=o(q);va=e(nt,"TD",{});var pu=o(va);_p=c(pu,"52560"),pu.forEach(a),wp=i(nt),Ea=e(nt,"TD",{});var cu=o(Ea);Tp=c(cu,"-"),cu.forEach(a),xp=i(nt),_a=e(nt,"TD",{});var lu=o(_a);Dp=c(lu,"-"),lu.forEach(a),Rp=i(nt),wa=e(nt,"TD",{});var iu=o(wa);Cp=c(iu,"0.999"),iu.forEach(a),nt.forEach(a),h.forEach(a),re.forEach(a),ws=i(n),ct=e(n,"P",{});var Sl=o(ct);Ta=e(Sl,"STRONG",{});var uu=o(Ta);Pp=c(uu,"OP_RETURN"),uu.forEach(a),Bp=c(Sl,": A code (106) in BitcoinScript for transaction outputs which can store arbitrary data."),Sl.forEach(a),Ts=i(n),O=e(n,"P",{});var Rt=o(O);xa=e(Rt,"STRONG",{});var ru=o(xa);Ap=c(ru,"OP_RETURN data"),ru.forEach(a),qp=c(Rt,": Data in OP_RETURNs is commonly encoded by pushing the total number of bytes, followed by the data bytes. For example "),Da=e(Rt,"CODE",{});var ku=o(Da);Op=c(ku,"04"),ku.forEach(a),Lp=c(Rt," followed by "),Ra=e(Rt,"CODE",{});var du=o(Ra);Hp=c(du,"7574786f"),du.forEach(a),Ip=c(Rt," (4 bytes of in two letter hex). This format is used to \u201Cbroadcast\u201D \u20BF\u2219\u03D5 contracts."),Rt.forEach(a),xs=i(n),lt=e(n,"P",{});var Ml=o(lt);Ca=e(Ml,"STRONG",{});var hu=o(Ca);Np=c(hu,"published"),hu.forEach(a),Up=c(Ml,": In the context of an unspent contract, a contract is published if the parameters to construct and spend it are recorded on the blockchain, either in an OP_RETURN or by reference to the spent output."),Ml.forEach(a),Ds=i(n),it=e(n,"P",{});var zl=o(it);Pa=e(zl,"STRONG",{});var fu=o(Pa);Vp=c(fu,"Unspent Transaction Output (UTXO)"),fu.forEach(a),Fp=c(zl,": some value, defined by the output of a previous transaction, which is locked by some code, either the hash of a public key (cashaddr), or a script."),zl.forEach(a),Rs=i(n),Yt=e(n,"H1",{});var mu=o(Yt);Sp=c(mu,"Contract Types"),mu.forEach(a),Cs=i(n),jt=e(n,"P",{});var yu=o(jt);Mp=c(yu,"Each \u20BF\u2219\u03D5 contract is designed to do one thing. The contracts available (so far) are as follows:"),yu.forEach(a),Ps=i(n),Jt=e(n,"H2",{});var bu=o(Jt);zp=c(bu,"Beneficiary Contracts"),bu.forEach(a),Bs=i(n),Kt=e(n,"P",{});var vu=o(Kt);Gp=c(vu,"Some contracts control value on behalf of the contract creator. They all have an executor allowance which can be claimed by the party which submits a valid spending transactions."),vu.forEach(a),As=i(n),z=e(n,"TABLE",{});var ke=o(z);Ba=e(ke,"THEAD",{});var Eu=o(Ba);ut=e(Eu,"TR",{});var de=o(ut);Aa=e(de,"TH",{});var _u=o(Aa);gp=c(_u,"Name"),_u.forEach(a),Wp=i(de),qa=e(de,"TH",{});var wu=o(qa);Xp=c(wu,"Description"),wu.forEach(a),de.forEach(a),Eu.forEach(a),Yp=i(ke),F=e(ke,"TBODY",{});var yn=o(F);rt=e(yn,"TR",{});var he=o(rt);Oa=e(he,"TD",{});var Tu=o(Oa);jp=c(Tu,"Annuity"),Tu.forEach(a),Jp=i(he),La=e(he,"TD",{});var xu=o(La);Kp=c(xu,"Equal payments over time."),xu.forEach(a),he.forEach(a),Qp=i(yn),kt=e(yn,"TR",{});var fe=o(kt);Ha=e(fe,"TD",{});var Du=o(Ha);Zp=c(Du,"Divide"),Du.forEach(a),$p=i(fe),Ia=e(fe,"TD",{});var Ru=o(Ia);tc=c(Ru,"Divide money into equal payments, up to four addresses"),Ru.forEach(a),fe.forEach(a),nc=i(yn),dt=e(yn,"TR",{});var me=o(dt);Na=e(me,"TD",{});var Cu=o(Na);ac=c(Cu,"Perpetuity"),Cu.forEach(a),sc=i(me),Ua=e(me,"TD",{});var Pu=o(Ua);ec=c(Pu,"Pay a fixed fraction of total value at intervals"),Pu.forEach(a),me.forEach(a),yn.forEach(a),ke.forEach(a),qs=i(n),Qt=e(n,"H2",{});var Bu=o(Qt);oc=c(Bu,"Distributive Contracts"),Bu.forEach(a),Os=i(n),Zt=e(n,"P",{});var Au=o(Zt);pc=c(Au,"Contracts with locked value that can be spent by anyone can be characterized as \u201Cfree\u201D. At present these include faucets, mining covenants, and a contract providing the facility to record data for free."),Au.forEach(a),Ls=i(n),G=e(n,"TABLE",{});var ye=o(G);Va=e(ye,"THEAD",{});var qu=o(Va);ht=e(qu,"TR",{});var be=o(ht);Fa=e(be,"TH",{});var Ou=o(Fa);cc=c(Ou,"Name"),Ou.forEach(a),lc=i(be),Sa=e(be,"TH",{});var Lu=o(Sa);ic=c(Lu,"Description"),Lu.forEach(a),be.forEach(a),qu.forEach(a),uc=i(ye),S=e(ye,"TBODY",{});var bn=o(S);ft=e(bn,"TR",{});var ve=o(ft);Ma=e(ve,"TD",{});var Hu=o(Ma);rc=c(Hu,"Faucet"),Hu.forEach(a),kc=i(ve),za=e(ve,"TD",{});var Iu=o(za);dc=c(Iu,"Distributes some free bitcoin per period"),Iu.forEach(a),ve.forEach(a),hc=i(bn),mt=e(bn,"TR",{});var Ee=o(mt);Ga=e(Ee,"TD",{});var Nu=o(Ga);fc=c(Nu,"Mine"),Nu.forEach(a),mc=i(Ee),ga=e(Ee,"TD",{});var Uu=o(ga);yc=c(Uu,"Distributes some bitcoin per period, for proof of work"),Uu.forEach(a),Ee.forEach(a),bc=i(bn),yt=e(bn,"TR",{});var _e=o(yt);Wa=e(_e,"TD",{});var Vu=o(Wa);vc=c(Vu,"Record"),Vu.forEach(a),Ec=i(_e),Xa=e(_e,"TD",{});var Fu=o(Xa);_c=c(Fu,"Broadcast a contract to the blockchain"),Fu.forEach(a),_e.forEach(a),bn.forEach(a),ye.forEach(a),Hs=i(n),$t=e(n,"H2",{});var Su=o($t);wc=c(Su,"Timelock v non-timelocked"),Su.forEach(a),Is=i(n),tn=e(n,"P",{});var Mu=o(tn);Tc=c(Mu,"The Divide and Record contracts are not timelocked, they may be called at anytime."),Mu.forEach(a),Ns=i(n),nn=e(n,"H1",{});var zu=o(nn);xc=c(zu,"Implemented Contracts"),zu.forEach(a),Us=i(n),an=e(n,"H2",{});var Gu=o(an);Dc=c(Gu,"Annuity"),Gu.forEach(a),Vs=i(n),sn=e(n,"P",{});var gu=o(sn);Rc=c(gu,"The annuity contract pays a fixed amount (in satoshis) to a predefined locking bytecode (i.e. address)."),gu.forEach(a),Fs=i(n),m=e(n,"P",{});var N=o(m);Cc=c(N,"To prevent the contract from being called successively (thus paying out all at once), a timelock is added restricting input be of a certain age (in blocks), this parameter is called the "),Ya=e(N,"CODE",{});var Wu=o(Ya);Pc=c(Wu,"period"),Wu.forEach(a),Bc=c(N,". The beneficiary address (or contract) is denoted by the "),ja=e(N,"CODE",{});var Xu=o(ja);Ac=c(Xu,"recipientLockingBytecode"),Xu.forEach(a),qc=c(N,". The amount paid in each period is the "),Ja=e(N,"CODE",{});var Yu=o(Ja);Oc=c(Yu,"installment"),Yu.forEach(a),Lc=c(N,". To aid in execution, a small fee is left as "),Ka=e(N,"CODE",{});var ju=o(Ka);Hc=c(ju,"executorAllowance"),ju.forEach(a),Ic=c(N," for each execution of the contract, it may be paid to anyone."),N.forEach(a),Ss=i(n),en=e(n,"P",{});var Ju=o(en);Nc=c(Ju,"This contract: checks that the first output pays to the beneficiary; checks that the timelock is satisfied; checks that the second output pays back to the contract; gets the total value being spent; calculates the amount to be returned, and finally, checks that both the installment amount of the first output & the total returned to the contract exceed the required amounts."),Ju.forEach(a),Ms=i(n),bt=e(n,"PRE",{class:!0});var Ar=o(bt);Ar.forEach(a),zs=i(n),on=e(n,"H2",{});var Ku=o(on);Uc=c(Ku,"Divide"),Ku.forEach(a),Gs=i(n),pn=e(n,"P",{});var Qu=o(pn);Vc=c(Qu,"The divide contract splits inputs across a predefined set of output destinations."),Qu.forEach(a),gs=i(n),y=e(n,"P",{});var U=o(y);Fc=c(U,"Each output is denoted by "),Qa=e(U,"CODE",{});var Zu=o(Qa);Sc=c(Zu,"r#LockingBytecode"),Zu.forEach(a),Mc=c(U,", where "),Za=e(U,"CODE",{});var $u=o(Za);zc=c($u,"#"),$u.forEach(a),Gc=c(U," is the index of the output. Since early BitcoinScript did not have loops, this contract was written with a static list of outputs and a "),$a=e(U,"CODE",{});var tr=o($a);gc=c(tr,"divisor"),tr.forEach(a),Wc=c(U,", which is simply the number of outputs. An "),ts=e(U,"CODE",{});var nr=o(ts);Xc=c(nr,"executorAllowance"),nr.forEach(a),Yc=c(U," amount is subtracted from the total distribution amount, which may be spent by anyone as long as the amount payed to the hardcoded receipts equals or exceeds the alloted share."),U.forEach(a),Ws=i(n),g=e(n,"P",{});var we=o(g);jc=c(we,"This contract: checks that each of the output destinations match the predefined output; calculates the total value on the contract; calculates the amount to be paid to each receipt ("),ns=e(we,"CODE",{});var ar=o(ns);Jc=c(ar,"distribution"),ar.forEach(a),Kc=c(we,"), and finally calculates that each receipt receives an output greater than, or equal to, the distribution amount."),we.forEach(a),Xs=i(n),vt=e(n,"PRE",{class:!0});var qr=o(vt);qr.forEach(a),Ys=i(n),cn=e(n,"H2",{});var sr=o(cn);Qc=c(sr,"Faucet"),sr.forEach(a),js=i(n),ln=e(n,"P",{});var er=o(ln);Zc=c(er,"The faucet contract pays \u201Cfree\u201D bitcoin."),er.forEach(a),Js=i(n),v=e(n,"P",{});var at=o(v);$c=c(at,"To prevent the faucet from being drained by successive calls, a "),as=e(at,"CODE",{});var or=o(as);tl=c(or,"period"),or.forEach(a),nl=c(at," timeout is set to specify the minimum age of the input being spent. The amount available to be spent is defined by a "),ss=e(at,"CODE",{});var pr=o(ss);al=c(pr,"payout"),pr.forEach(a),sl=c(at,". As a convenience, and to have multiple faucets with the same payout, an "),es=e(at,"CODE",{});var cr=o(es);el=c(cr,"index"),cr.forEach(a),ol=c(at," parameter is added to distinguish identical contracts."),at.forEach(a),Ks=i(n),L=e(n,"P",{});var vn=o(L);pl=c(vn,"The steps of this contract are as follows: first, it requires that the transaction be called with an age that is greater than the current "),os=e(vn,"CODE",{});var lr=o(os);cl=c(lr,"period"),lr.forEach(a),ll=c(vn,"; the "),ps=e(vn,"CODE",{});var ir=o(ps);il=c(ir,"index"),ir.forEach(a),ul=c(vn," is used so that it is not unused; next the first output must return all value to the faucet contract, and finally the returned value is calculate and must be returned to the faucet if the current value exceeds the payout."),vn.forEach(a),Qs=i(n),Et=e(n,"PRE",{class:!0});var Or=o(Et);Or.forEach(a),Zs=i(n),un=e(n,"H2",{});var ur=o(un);rl=c(ur,"Mine-able Faucet"),ur.forEach(a),$s=i(n),rn=e(n,"P",{});var rr=o(rn);kl=c(rr,"The \u20BF\u2219\u03D5 mining covenant is very much like the faucet, with some additional requirements."),rr.forEach(a),te=i(n),H=e(n,"P",{});var En=o(H);dl=c(En,"First, execution of the contract must be called with a "),cs=e(En,"CODE",{});var kr=o(cs);hl=c(kr,"nonce"),kr.forEach(a),fl=c(En,` [a random value used once]
which when added to the current locking bytecode and hashed results in a value starting with some number of zeros.
How many zeros is the `),ls=e(En,"CODE",{});var dr=o(ls);ml=c(dr,"difficulty"),dr.forEach(a),yl=c(En,"."),En.forEach(a),ne=i(n),E=e(n,"P",{});var st=o(E);bl=c(st,"Finally, prior to spending the the mining "),is=e(st,"CODE",{});var hr=o(is);vl=c(hr,"payout"),hr.forEach(a),El=c(st,`, the spender must announce
the winning `),us=e(st,"CODE",{});var fr=o(us);_l=c(fr,"nonce"),fr.forEach(a),wl=c(st," in an OP_RETURN of the first output, and send the balance of the contract to a new mining covenant with the new nonce as a "),rs=e(st,"CODE",{});var mr=o(rs);Tl=c(mr,"canary"),mr.forEach(a),xl=c(st,"."),st.forEach(a),ae=i(n),_t=e(n,"P",{});var Gl=o(_t);wt=e(Gl,"IMG",{src:!0,alt:!0,title:!0}),Dl=c(Gl,`
Like an infinite series of Failures to Deliver (FTDs) for a stock, or banging forex futures to manipulate an outcome in currency markets, the canary is always brought back to life with a new copy of itself.`),Gl.forEach(a),se=i(n),Tt=e(n,"PRE",{class:!0});var Lr=o(Tt);Lr.forEach(a),ee=i(n),kn=e(n,"H2",{});var yr=o(kn);Rl=c(yr,"Perpetuity"),yr.forEach(a),oe=i(n),dn=e(n,"P",{});var br=o(dn);Cl=c(br,"The Perpetuity contract works like an Annuity, however rather than pay a fixed amount, a fixed fraction of the total is paid each period."),br.forEach(a),pe=i(n),I=e(n,"P",{});var _n=o(I);Pl=c(_n,"The fraction paid is determined by the "),ks=e(_n,"CODE",{});var vr=o(ks);Bl=c(vr,"decay"),vr.forEach(a),Al=c(_n," parameter. If a "),ds=e(_n,"CODE",{});var Er=o(ds);ql=c(Er,"decay"),Er.forEach(a),Ol=c(_n," of 10 is specified, then one tenth the value is paid each period."),_n.forEach(a),ce=i(n),xt=e(n,"PRE",{class:!0});var Hr=o(xt);Hr.forEach(a),le=i(n),hn=e(n,"H2",{});var _r=o(hn);Ll=c(_r,"Record"),_r.forEach(a),ie=i(n),fn=e(n,"P",{});var wr=o(fn);Hl=c(wr,"A utility function to broadcast new contracts as OP_RETURN messages."),wr.forEach(a),ue=i(n),Dt=e(n,"PRE",{class:!0});var Ir=o(Dt);Ir.forEach(a),this.h()},h(){document.title="\u20BF\u2219\u03D5",k(qt,"href","#welcome"),k(Ot,"href","#definitions"),k(Ht,"href","#contract-types"),k(It,"href","#beneficiary-contracts"),k(Nt,"href","#distributive-contracts"),k(Ut,"href","#timelock-v-non-timelocked"),k(Ft,"href","#implemented-contracts"),k(St,"href","#annuity"),k(Mt,"href","#divide"),k(zt,"href","#faucet"),k(Gt,"href","#mine-able-faucet"),k(gt,"href","#perpetuity"),k(Wt,"href","#record"),k(bt,"class","language-solidity"),k(vt,"class","language-solidity"),k(Et,"class","language-solidity"),Sr(wt.src,Wl="canary.png")||k(wt,"src",Wl),k(wt,"alt","Replace the canary"),k(wt,"title","Look, see, he's alright. He's fine."),k(Tt,"class","language-solidity"),k(xt,"class","language-solidity"),k(Dt,"class","language-solidity")},m(n,u){r(n,Ct,u),r(n,Pt,u),t(Pt,Te),r(n,hs,u),r(n,Bt,u),t(Bt,xe),r(n,fs,u),r(n,At,u),t(At,De),r(n,ms,u),r(n,b,u),t(b,wn),t(wn,qt),t(qt,Re),t(b,Ce),t(b,Tn),t(Tn,Ot),t(Ot,Pe),t(b,Be),t(b,Lt),t(Lt,Ht),t(Ht,Ae),t(Lt,V),t(V,xn),t(xn,It),t(It,qe),t(V,Oe),t(V,Dn),t(Dn,Nt),t(Nt,Le),t(V,He),t(V,Rn),t(Rn,Ut),t(Ut,Ie),t(b,Ne),t(b,Vt),t(Vt,Ft),t(Ft,Ue),t(Vt,f),t(f,Cn),t(Cn,St),t(St,Ve),t(f,Fe),t(f,Pn),t(Pn,Mt),t(Mt,Se),t(f,Me),t(f,Bn),t(Bn,zt),t(zt,ze),t(f,Ge),t(f,An),t(An,Gt),t(Gt,ge),t(f,We),t(f,qn),t(qn,gt),t(gt,Xe),t(f,Ye),t(f,On),t(On,Wt),t(Wt,je),r(n,ys,u),r(n,Xt,u),t(Xt,Je),r(n,bs,u),r(n,et,u),t(et,Ln),t(Ln,Ke),t(et,Qe),r(n,vs,u),r(n,ot,u),t(ot,Hn),t(Hn,Ze),t(ot,$e),r(n,Es,u),r(n,pt,u),t(pt,In),t(In,to),t(pt,no),r(n,_s,u),r(n,M,u),t(M,Nn),t(Nn,w),t(w,Un),t(Un,ao),t(w,so),t(w,Vn),t(Vn,eo),t(w,oo),t(w,Fn),t(Fn,po),t(w,co),t(w,Sn),t(Sn,lo),t(M,io),t(M,d),t(d,T),t(T,Mn),t(Mn,uo),t(T,ro),t(T,zn),t(zn,ko),t(T,ho),t(T,Gn),t(Gn,fo),t(T,mo),t(T,gn),t(gn,yo),t(d,bo),t(d,x),t(x,Wn),t(Wn,vo),t(x,Eo),t(x,Xn),t(Xn,_o),t(x,wo),t(x,Yn),t(Yn,To),t(x,xo),t(x,jn),t(jn,Do),t(d,Ro),t(d,D),t(D,Jn),t(Jn,Co),t(D,Po),t(D,Kn),t(Kn,Bo),t(D,Ao),t(D,Qn),t(Qn,qo),t(D,Oo),t(D,Zn),t(Zn,Lo),t(d,Ho),t(d,R),t(R,$n),t($n,Io),t(R,No),t(R,ta),t(ta,Uo),t(R,Vo),t(R,na),t(na,Fo),t(R,So),t(R,aa),t(aa,Mo),t(d,zo),t(d,C),t(C,sa),t(sa,Go),t(C,go),t(C,ea),t(ea,Wo),t(C,Xo),t(C,oa),t(oa,Yo),t(C,jo),t(C,pa),t(pa,Jo),t(d,Ko),t(d,P),t(P,ca),t(ca,Qo),t(P,Zo),t(P,la),t(la,$o),t(P,tp),t(P,ia),t(ia,np),t(P,ap),t(P,ua),t(ua,sp),t(d,ep),t(d,B),t(B,ra),t(ra,op),t(B,pp),t(B,ka),t(ka,cp),t(B,lp),t(B,da),t(da,ip),t(B,up),t(B,ha),t(ha,rp),t(d,kp),t(d,A),t(A,fa),t(fa,dp),t(A,hp),t(A,ma),t(ma,fp),t(A,mp),t(A,ya),t(ya,yp),t(A,bp),t(A,ba),t(ba,vp),t(d,Ep),t(d,q),t(q,va),t(va,_p),t(q,wp),t(q,Ea),t(Ea,Tp),t(q,xp),t(q,_a),t(_a,Dp),t(q,Rp),t(q,wa),t(wa,Cp),r(n,ws,u),r(n,ct,u),t(ct,Ta),t(Ta,Pp),t(ct,Bp),r(n,Ts,u),r(n,O,u),t(O,xa),t(xa,Ap),t(O,qp),t(O,Da),t(Da,Op),t(O,Lp),t(O,Ra),t(Ra,Hp),t(O,Ip),r(n,xs,u),r(n,lt,u),t(lt,Ca),t(Ca,Np),t(lt,Up),r(n,Ds,u),r(n,it,u),t(it,Pa),t(Pa,Vp),t(it,Fp),r(n,Rs,u),r(n,Yt,u),t(Yt,Sp),r(n,Cs,u),r(n,jt,u),t(jt,Mp),r(n,Ps,u),r(n,Jt,u),t(Jt,zp),r(n,Bs,u),r(n,Kt,u),t(Kt,Gp),r(n,As,u),r(n,z,u),t(z,Ba),t(Ba,ut),t(ut,Aa),t(Aa,gp),t(ut,Wp),t(ut,qa),t(qa,Xp),t(z,Yp),t(z,F),t(F,rt),t(rt,Oa),t(Oa,jp),t(rt,Jp),t(rt,La),t(La,Kp),t(F,Qp),t(F,kt),t(kt,Ha),t(Ha,Zp),t(kt,$p),t(kt,Ia),t(Ia,tc),t(F,nc),t(F,dt),t(dt,Na),t(Na,ac),t(dt,sc),t(dt,Ua),t(Ua,ec),r(n,qs,u),r(n,Qt,u),t(Qt,oc),r(n,Os,u),r(n,Zt,u),t(Zt,pc),r(n,Ls,u),r(n,G,u),t(G,Va),t(Va,ht),t(ht,Fa),t(Fa,cc),t(ht,lc),t(ht,Sa),t(Sa,ic),t(G,uc),t(G,S),t(S,ft),t(ft,Ma),t(Ma,rc),t(ft,kc),t(ft,za),t(za,dc),t(S,hc),t(S,mt),t(mt,Ga),t(Ga,fc),t(mt,mc),t(mt,ga),t(ga,yc),t(S,bc),t(S,yt),t(yt,Wa),t(Wa,vc),t(yt,Ec),t(yt,Xa),t(Xa,_c),r(n,Hs,u),r(n,$t,u),t($t,wc),r(n,Is,u),r(n,tn,u),t(tn,Tc),r(n,Ns,u),r(n,nn,u),t(nn,xc),r(n,Us,u),r(n,an,u),t(an,Dc),r(n,Vs,u),r(n,sn,u),t(sn,Rc),r(n,Fs,u),r(n,m,u),t(m,Cc),t(m,Ya),t(Ya,Pc),t(m,Bc),t(m,ja),t(ja,Ac),t(m,qc),t(m,Ja),t(Ja,Oc),t(m,Lc),t(m,Ka),t(Ka,Hc),t(m,Ic),r(n,Ss,u),r(n,en,u),t(en,Nc),r(n,Ms,u),r(n,bt,u),bt.innerHTML=xr,r(n,zs,u),r(n,on,u),t(on,Uc),r(n,Gs,u),r(n,pn,u),t(pn,Vc),r(n,gs,u),r(n,y,u),t(y,Fc),t(y,Qa),t(Qa,Sc),t(y,Mc),t(y,Za),t(Za,zc),t(y,Gc),t(y,$a),t($a,gc),t(y,Wc),t(y,ts),t(ts,Xc),t(y,Yc),r(n,Ws,u),r(n,g,u),t(g,jc),t(g,ns),t(ns,Jc),t(g,Kc),r(n,Xs,u),r(n,vt,u),vt.innerHTML=Dr,r(n,Ys,u),r(n,cn,u),t(cn,Qc),r(n,js,u),r(n,ln,u),t(ln,Zc),r(n,Js,u),r(n,v,u),t(v,$c),t(v,as),t(as,tl),t(v,nl),t(v,ss),t(ss,al),t(v,sl),t(v,es),t(es,el),t(v,ol),r(n,Ks,u),r(n,L,u),t(L,pl),t(L,os),t(os,cl),t(L,ll),t(L,ps),t(ps,il),t(L,ul),r(n,Qs,u),r(n,Et,u),Et.innerHTML=Rr,r(n,Zs,u),r(n,un,u),t(un,rl),r(n,$s,u),r(n,rn,u),t(rn,kl),r(n,te,u),r(n,H,u),t(H,dl),t(H,cs),t(cs,hl),t(H,fl),t(H,ls),t(ls,ml),t(H,yl),r(n,ne,u),r(n,E,u),t(E,bl),t(E,is),t(is,vl),t(E,El),t(E,us),t(us,_l),t(E,wl),t(E,rs),t(rs,Tl),t(E,xl),r(n,ae,u),r(n,_t,u),t(_t,wt),t(_t,Dl),r(n,se,u),r(n,Tt,u),Tt.innerHTML=Cr,r(n,ee,u),r(n,kn,u),t(kn,Rl),r(n,oe,u),r(n,dn,u),t(dn,Cl),r(n,pe,u),r(n,I,u),t(I,Pl),t(I,ks),t(ks,Bl),t(I,Al),t(I,ds),t(ds,ql),t(I,Ol),r(n,ce,u),r(n,xt,u),xt.innerHTML=Pr,r(n,le,u),r(n,hn,u),t(hn,Ll),r(n,ie,u),r(n,fn,u),t(fn,Hl),r(n,ue,u),r(n,Dt,u),Dt.innerHTML=Br},p:gl,i:gl,o:gl,d(n){n&&a(Ct),n&&a(Pt),n&&a(hs),n&&a(Bt),n&&a(fs),n&&a(At),n&&a(ms),n&&a(b),n&&a(ys),n&&a(Xt),n&&a(bs),n&&a(et),n&&a(vs),n&&a(ot),n&&a(Es),n&&a(pt),n&&a(_s),n&&a(M),n&&a(ws),n&&a(ct),n&&a(Ts),n&&a(O),n&&a(xs),n&&a(lt),n&&a(Ds),n&&a(it),n&&a(Rs),n&&a(Yt),n&&a(Cs),n&&a(jt),n&&a(Ps),n&&a(Jt),n&&a(Bs),n&&a(Kt),n&&a(As),n&&a(z),n&&a(qs),n&&a(Qt),n&&a(Os),n&&a(Zt),n&&a(Ls),n&&a(G),n&&a(Hs),n&&a($t),n&&a(Is),n&&a(tn),n&&a(Ns),n&&a(nn),n&&a(Us),n&&a(an),n&&a(Vs),n&&a(sn),n&&a(Fs),n&&a(m),n&&a(Ss),n&&a(en),n&&a(Ms),n&&a(bt),n&&a(zs),n&&a(on),n&&a(Gs),n&&a(pn),n&&a(gs),n&&a(y),n&&a(Ws),n&&a(g),n&&a(Xs),n&&a(vt),n&&a(Ys),n&&a(cn),n&&a(js),n&&a(ln),n&&a(Js),n&&a(v),n&&a(Ks),n&&a(L),n&&a(Qs),n&&a(Et),n&&a(Zs),n&&a(un),n&&a($s),n&&a(rn),n&&a(te),n&&a(H),n&&a(ne),n&&a(E),n&&a(ae),n&&a(_t),n&&a(se),n&&a(Tt),n&&a(ee),n&&a(kn),n&&a(oe),n&&a(dn),n&&a(pe),n&&a(I),n&&a(ce),n&&a(xt),n&&a(le),n&&a(hn),n&&a(ie),n&&a(fn),n&&a(ue),n&&a(Dt)}}}class Gr extends Nr{constructor(Ct){super(),Ur(this,Ct,null,Mr,Vr,{})}}export{Gr as default};
//# sourceMappingURL=_page.md-c210c546.js.map
