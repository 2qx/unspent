import{S as Mr,i as Wr,s as Xr,k as n,q as c,a as p,l as s,m as o,r as l,h as e,c as r,n as m,b as u,G as t,B as wl}from"../../chunks/index-5d3c40be.js";function Yr(Ir){let S,Ln,Na,yt,Hn,Sa,bt,In,Ua,v,te,Et,Nn,Sn,ee,_t,Un,Vn,Tt,wt,Fn,L,ae,Dt,Gn,Mn,ne,xt,Wn,Xn,se,Bt,Yn,jn,Rt,At,zn,H,oe,Ct,Jn,Kn,ce,Pt,Qn,Zn,le,Ot,$n,Va,qt,gn,Fa,tt,pe,ts,es,Ga,et,re,as,ns,Ma,at,ie,ss,os,Wa,U,ue,b,de,cs,ls,he,ps,rs,fe,is,us,ke,ds,hs,d,E,me,fs,ks,ve,ms,vs,ye,ys,bs,be,Es,_s,_,Ee,Ts,ws,_e,Ds,xs,Te,Bs,Rs,we,As,Cs,T,De,Ps,Os,xe,qs,Ls,Be,Hs,Is,Re,Ns,Ss,w,Ae,Us,Vs,Ce,Fs,Gs,Pe,Ms,Ws,Oe,Xs,Ys,D,qe,js,zs,Le,Js,Ks,He,Qs,Zs,Ie,$s,gs,x,Ne,to,eo,Se,ao,no,Ue,so,oo,Ve,co,lo,B,Fe,po,ro,Ge,io,uo,Me,ho,fo,We,ko,mo,R,Xe,vo,yo,Ye,bo,Eo,je,_o,To,ze,wo,Do,A,Je,xo,Bo,Ke,Ro,Ao,Qe,Co,Po,Ze,Oo,Xa,nt,$e,qo,Lo,Ya,C,ge,Ho,Io,ta,No,So,ea,Uo,Vo,ja,st,aa,Fo,Go,za,ot,na,Mo,Wo,Ja,Lt,Xo,Ka,Ht,Yo,Qa,It,jo,Za,Nt,zo,$a,V,sa,ct,oa,Jo,Ko,ca,Qo,Zo,I,lt,la,$o,go,pa,tc,ec,pt,ra,ac,nc,ia,sc,oc,rt,ua,cc,lc,da,pc,ga,St,rc,tn,Ut,ic,en,F,ha,it,fa,uc,dc,ka,hc,fc,N,ut,ma,kc,mc,va,vc,yc,dt,ya,bc,Ec,ba,_c,Tc,ht,Ea,wc,Dc,_a,xc,an,Vt,Bc,nn,Ft,Rc,sn,Gt,Ac,on,Mt,Cc,cn,Wt,Pc,ln,f,Oc,Ta,qc,Lc,wa,Hc,Ic,Da,Nc,Sc,xa,Uc,Vc,pn,Xt,Fc,rn,ft,Nr=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>


<span class="token comment">// Pay equal payments at regular intervals using input locks</span>
<span class="token keyword">contract</span> <span class="token class-name">Annuity</span><span class="token punctuation">(</span>

    <span class="token comment">// interval for payouts, in blocks</span>
    <span class="token builtin">int</span> period<span class="token punctuation">,</span>

    <span class="token comment">// LockingBytecode of the beneficiary, the address receiving payments</span>
    <span class="token builtin">bytes</span> recipientLockingBytecode<span class="token punctuation">,</span>

    <span class="token comment">// amount paid in each installment</span>
    <span class="token builtin">int</span> installment<span class="token punctuation">,</span>

    <span class="token comment">// extra allowance for administration of contract</span>
    <span class="token comment">// fees are paid from executors' allowance.</span>
    <span class="token builtin">int</span> executorAllowance
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token comment">// Check that the first output sends to the recipient</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> recipientLockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Check that time has passed and that time locks are enabled</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// require the second output to match the active bytecode</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Get the total value on the contract</span>
        <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

        <span class="token comment">// Calculate value returned to the contract</span>
        <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> installment <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

        <span class="token comment">// Check that the outputs send the correct amounts</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> installment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,un,Yt,Gc,dn,jt,Mc,hn,k,Wc,Ba,Xc,Yc,Ra,jc,zc,Aa,Jc,Kc,Ca,Qc,Zc,fn,G,$c,Pa,gc,tl,kn,kt,Sr=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.0</span><span class="token punctuation">;</span>

  <span class="token keyword">contract</span> <span class="token class-name">Divide</span><span class="token punctuation">(</span>
      <span class="token comment">// allowance for party executing the contract</span>
      <span class="token builtin">int</span> executorAllowance<span class="token punctuation">,</span>
      <span class="token comment">// number of outputs receiving payout</span>
      <span class="token builtin">int</span> divisor<span class="token punctuation">,</span>

      <span class="token comment">// for each beneficiary, take the LockingBytecode as input</span>
      <span class="token builtin">bytes</span> r0LockingBytecode<span class="token punctuation">,</span>
      <span class="token builtin">bytes</span> r1LockingBytecode
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token comment">// distributes to each output in order</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> r0LockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> r1LockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Get the total value of inputs</span>
        <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

        <span class="token comment">// Total value paid to beneficiaries, minus executor allowance</span>
        <span class="token builtin">int</span> distributedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

        <span class="token comment">// Value paid to each beneficiary</span>
        <span class="token builtin">int</span> distribution <span class="token operator">=</span> distributedValue <span class="token operator">/</span> divisor<span class="token punctuation">;</span>

        <span class="token comment">// each output must be greater or equal to the distribution amount</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> distribution<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> distribution<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span></code>`,mn,zt,el,vn,Jt,al,yn,y,nl,Oa,sl,ol,qa,cl,ll,La,pl,rl,bn,P,il,Ha,ul,dl,Ia,hl,fl,En,mt,Ur=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.0</span><span class="token punctuation">;</span>

<span class="token comment">// v20220609</span>

<span class="token keyword">contract</span> <span class="token class-name">Faucet</span><span class="token punctuation">(</span>

    <span class="token comment">// interval for payouts, in blocks</span>
    <span class="token builtin">int</span> period<span class="token punctuation">,</span>

    <span class="token comment">// amount to be paid by faucet allowance. </span>
    <span class="token builtin">int</span> payout<span class="token punctuation">,</span>

    <span class="token comment">// random number input into contract to have more than one</span>
    <span class="token builtin">int</span> index
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">drip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token comment">// Check that time has passed and that time locks are enabled</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
        <span class="token comment">// use the index</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// require the first output to match the active bytecode</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Get the total value on the contract</span>
        <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

        <span class="token comment">// Calculate value returned to the contract</span>
        <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> payout<span class="token punctuation">;</span>

        <span class="token comment">// If the value on the contract exceeds the payout amount</span>
        <span class="token comment">//  then assert that the value must return to the contract</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>currentValue <span class="token operator">></span> payout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`;return{c(){S=n("h1"),Ln=c("Welcome!"),Na=p(),yt=n("p"),Hn=c("Unspent Phi (\u20BF\u2219\u03D5) is an app for creating (and publishing) a set of simple contracts on the Bitcoin Cash (BCH) blockchain that anyone can execute. These contracts lock the value of unspent outputs from earlier transactions (UTXOs), and allow some small reward for any party to call a known contract (if valid according to the rules of BitcoinScript). Although simple, these contracts may be chained together to create complex outcomes."),Sa=p(),bt=n("p"),In=c("\u20BF\u2219\u03D5 contracts may be thought of as automata, machines that are unlocked and stepped forward by random participants on the blockchain. No one party has control, it\u2019s a race to spend them first. However, the code to unlock them must be known for the code to stepped forward. Money sent to \u20BF\u2219\u03D5 contracts appear identical to any other pay-to-script UTXOs on the network. Nothing is known about how to spend the contract until it is spent at least once, so in order for the contract to function automatically, both their existence and the parameters to unlock them must be known. While the code to unlock is broadcasted by spending the contract once, not all contracts can be spent right away, so it\u2019s easier and safer just to publish some unlock record and not worry about forgetting how to unlock them."),Ua=p(),v=n("ul"),te=n("li"),Et=n("a"),Nn=c("Welcome!"),Sn=p(),ee=n("li"),_t=n("a"),Un=c("Definitions"),Vn=p(),Tt=n("li"),wt=n("a"),Fn=c("Contract Types"),L=n("ul"),ae=n("li"),Dt=n("a"),Gn=c("Beneficiary Contracts"),Mn=p(),ne=n("li"),xt=n("a"),Wn=c("\u201CFree\u201D contracts"),Xn=p(),se=n("li"),Bt=n("a"),Yn=c("Timelock v non-timelocked"),jn=p(),Rt=n("li"),At=n("a"),zn=c("Implemented Contracts"),H=n("ul"),oe=n("li"),Ct=n("a"),Jn=c("Annuity"),Kn=p(),ce=n("li"),Pt=n("a"),Qn=c("Divide"),Zn=p(),le=n("li"),Ot=n("a"),$n=c("Faucet"),Va=p(),qt=n("h1"),gn=c("Definitions"),Fa=p(),tt=n("p"),pe=n("strong"),ts=c("covenant"),es=c(": A contract with variable parameters stored in script, which change."),Ga=p(),et=n("p"),re=n("strong"),as=c("satoshis"),ns=c(": A unit of account (on the Bitcoin Cash fork of the initial bitcoin blockchain). A hundred million satoshi are equal to 1 Bitcoin Cash."),Ma=p(),at=n("p"),ie=n("strong"),ss=c("blocks (timescale)"),os=c(": The base unit of time on bitcoin, about 10 minutes on average."),Wa=p(),U=n("table"),ue=n("thead"),b=n("tr"),de=n("th"),cs=c("Blocks"),ls=p(),he=n("th"),ps=c("Minutes"),rs=p(),fe=n("th"),is=c("Days"),us=p(),ke=n("th"),ds=c("Years"),hs=p(),d=n("tbody"),E=n("tr"),me=n("td"),fs=c("1"),ks=p(),ve=n("td"),ms=c("10"),vs=p(),ye=n("td"),ys=c("-"),bs=p(),be=n("td"),Es=c("-"),_s=p(),_=n("tr"),Ee=n("td"),Ts=c("10"),ws=p(),_e=n("td"),Ds=c("100"),xs=p(),Te=n("td"),Bs=c("-"),Rs=p(),we=n("td"),As=c("-"),Cs=p(),T=n("tr"),De=n("td"),Ps=c("100"),Os=p(),xe=n("td"),qs=c("1000"),Ls=p(),Be=n("td"),Hs=c("0.694"),Is=p(),Re=n("td"),Ns=c("-"),Ss=p(),w=n("tr"),Ae=n("td"),Us=c("144"),Vs=p(),Ce=n("td"),Fs=c("1440"),Gs=p(),Pe=n("td"),Ms=c("1"),Ws=p(),Oe=n("td"),Xs=c("-"),Ys=p(),D=n("tr"),qe=n("td"),js=c("1000"),zs=p(),Le=n("td"),Js=c("-"),Ks=p(),He=n("td"),Qs=c("6.94"),Zs=p(),Ie=n("td"),$s=c("-"),gs=p(),x=n("tr"),Ne=n("td"),to=c("4000"),eo=p(),Se=n("td"),ao=c("-"),no=p(),Ue=n("td"),so=c("27.7"),oo=p(),Ve=n("td"),co=c("-"),lo=p(),B=n("tr"),Fe=n("td"),po=c("13140"),ro=p(),Ge=n("td"),io=c("-"),uo=p(),Me=n("td"),ho=c("91.25"),fo=p(),We=n("td"),ko=c("0.249"),mo=p(),R=n("tr"),Xe=n("td"),vo=c("26280"),yo=p(),Ye=n("td"),bo=c("-"),Eo=p(),je=n("td"),_o=c("-"),To=p(),ze=n("td"),wo=c("0.499"),Do=p(),A=n("tr"),Je=n("td"),xo=c("52560"),Bo=p(),Ke=n("td"),Ro=c("-"),Ao=p(),Qe=n("td"),Co=c("-"),Po=p(),Ze=n("td"),Oo=c("0.999"),Xa=p(),nt=n("p"),$e=n("strong"),qo=c("OP_RETURN"),Lo=c(": A code (106) in BitcoinScript for transaction outputs which can store arbitrary data."),Ya=p(),C=n("p"),ge=n("strong"),Ho=c("OP_RETURN data"),Io=c(": Data in OP_RETURNs is commonly encoded by pushing the total number of bytes, followed by the data bytes. For example "),ta=n("code"),No=c("04"),So=c(" followed by "),ea=n("code"),Uo=c("7574786f"),Vo=c(" (4 bytes of in two letter hex). This format is used to \u201Cbroadcast\u201D \u20BF\u2219\u03D5 contracts."),ja=p(),st=n("p"),aa=n("strong"),Fo=c("published"),Go=c(": In the context of an unspent contract, a contract is published if the parameters to construct and spend it are recorded on the blockchain, either in an OP_RETURN or by reference to the spent output."),za=p(),ot=n("p"),na=n("strong"),Mo=c("Unspent Transaction Output (UTXO)"),Wo=c(": some value, defined by the output of a previous transaction, which is locked by some code, either the hash of a public key (cashaddr), or a script."),Ja=p(),Lt=n("h1"),Xo=c("Contract Types"),Ka=p(),Ht=n("p"),Yo=c("Each \u20BF\u2219\u03D5 contract is designed to do one thing. The contracts available (so far) are as follows:"),Qa=p(),It=n("h2"),jo=c("Beneficiary Contracts"),Za=p(),Nt=n("p"),zo=c("Some contracts control value on behalf of the contract creator. They all have an executor allowance which can be claimed by the party which submits a valid spending transactions."),$a=p(),V=n("table"),sa=n("thead"),ct=n("tr"),oa=n("th"),Jo=c("Name"),Ko=p(),ca=n("th"),Qo=c("Description"),Zo=p(),I=n("tbody"),lt=n("tr"),la=n("td"),$o=c("Annuity"),go=p(),pa=n("td"),tc=c("Equal payments over time."),ec=p(),pt=n("tr"),ra=n("td"),ac=c("Divide"),nc=p(),ia=n("td"),sc=c("Divide money into equal payments, up to four addresses"),oc=p(),rt=n("tr"),ua=n("td"),cc=c("Perpetuity"),lc=p(),da=n("td"),pc=c("Pay a fixed fraction of total value at intervals"),ga=p(),St=n("h2"),rc=c("\u201CFree\u201D contracts"),tn=p(),Ut=n("p"),ic=c("Contracts with locked value that can be spent by anyone can be characterized as \u201Cfree\u201D. At present these include faucets, mining covenants, and a contract providing the facility to record data for free."),en=p(),F=n("table"),ha=n("thead"),it=n("tr"),fa=n("th"),uc=c("Name"),dc=p(),ka=n("th"),hc=c("Description"),fc=p(),N=n("tbody"),ut=n("tr"),ma=n("td"),kc=c("Faucet"),mc=p(),va=n("td"),vc=c("Distributes some free bitcoin per period"),yc=p(),dt=n("tr"),ya=n("td"),bc=c("Mine"),Ec=p(),ba=n("td"),_c=c("Distributes some bitcoin per period, for proof of work"),Tc=p(),ht=n("tr"),Ea=n("td"),wc=c("Record"),Dc=p(),_a=n("td"),xc=c("Broadcast a contract to the blockchain"),an=p(),Vt=n("h2"),Bc=c("Timelock v non-timelocked"),nn=p(),Ft=n("p"),Rc=c("The Divide and Record contracts are not timelocked, they may be called at anytime."),sn=p(),Gt=n("h1"),Ac=c("Implemented Contracts"),on=p(),Mt=n("h2"),Cc=c("Annuity"),cn=p(),Wt=n("p"),Pc=c("The annuity contract pays a fixed amount (in satoshis) to a predefined locking bytecode (i.e. address)."),ln=p(),f=n("p"),Oc=c("To prevent the contract from being called successively (thus paying out all at once), a timelock is added restricting input be of a certain age (in blocks), this parameter is called the "),Ta=n("code"),qc=c("period"),Lc=c(". The beneficiary address (or contract) is denoted by the "),wa=n("code"),Hc=c("recipientLockingBytecode"),Ic=c(". The amount paid in each period is the "),Da=n("code"),Nc=c("installment"),Sc=c(". To aid in execution, a small fee is left as "),xa=n("code"),Uc=c("executorAllowance"),Vc=c(" for each execution of the contract, it may be paid to anyone."),pn=p(),Xt=n("p"),Fc=c("This contract: checks that the first output pays to the beneficiary; checks that the timelock is satisfied; checks that the second output pays back to the contract; gets the total value being spent; calculates the amount to be returned, and finally, checks that both the installment amount of the first output & the total returned to the contract exceed the required amounts."),rn=p(),ft=n("pre"),un=p(),Yt=n("h2"),Gc=c("Divide"),dn=p(),jt=n("p"),Mc=c("The divide contract splits inputs across a predefined set of output destinations."),hn=p(),k=n("p"),Wc=c("Each output is denoted by "),Ba=n("code"),Xc=c("r#LockingBytecode"),Yc=c(", where "),Ra=n("code"),jc=c("#"),zc=c(" is the index of the output. Since early BitcoinScript did not have loops, this contract was written with a static list of outputs and a "),Aa=n("code"),Jc=c("divisor"),Kc=c(", which is simply the number of outputs. An "),Ca=n("code"),Qc=c("executorAllowance"),Zc=c(" amount is subtracted from the total distribution amount, which may be spent by anyone as long as the amount payed to the hardcoded receipts equals or exceeds the alloted share."),fn=p(),G=n("p"),$c=c("This contract: checks that each of the output destinations match the predefined output; calculates the total value on the contract; calculates the amount to be paid to each receipt ("),Pa=n("code"),gc=c("distribution"),tl=c("), and finally calculates that each receipt receives an output greater than, or equal to, the distribution amount."),kn=p(),kt=n("pre"),mn=p(),zt=n("h2"),el=c("Faucet"),vn=p(),Jt=n("p"),al=c("The faucet contract pays \u201Cfree\u201D bitcoin."),yn=p(),y=n("p"),nl=c("To prevent the faucet from being drained by successive calls, a "),Oa=n("code"),sl=c("period"),ol=c(" timeout is set to specify the minimum age of the input being spent. The amount available to be spent is defined by a "),qa=n("code"),cl=c("payout"),ll=c(".  As a convenience, and to have multiple faucets with the same payout, an "),La=n("code"),pl=c("index"),rl=c(" parameter is added to distinguish identical contracts."),bn=p(),P=n("p"),il=c("The steps of this contract are as follows: first, it requires that the transaction be called with an age that is greater than the current "),Ha=n("code"),ul=c("period"),dl=c("; the "),Ia=n("code"),hl=c("index"),fl=c(" is used so that it is not unused; next the first output must return all value to the faucet contract, and finally the returned value is calculate and must be returned to the faucet if the current value exceeds the payout."),En=p(),mt=n("pre"),this.h()},l(a){S=s(a,"H1",{});var i=o(S);Ln=l(i,"Welcome!"),i.forEach(e),Na=r(a),yt=s(a,"P",{});var Dl=o(yt);Hn=l(Dl,"Unspent Phi (\u20BF\u2219\u03D5) is an app for creating (and publishing) a set of simple contracts on the Bitcoin Cash (BCH) blockchain that anyone can execute. These contracts lock the value of unspent outputs from earlier transactions (UTXOs), and allow some small reward for any party to call a known contract (if valid according to the rules of BitcoinScript). Although simple, these contracts may be chained together to create complex outcomes."),Dl.forEach(e),Sa=r(a),bt=s(a,"P",{});var xl=o(bt);In=l(xl,"\u20BF\u2219\u03D5 contracts may be thought of as automata, machines that are unlocked and stepped forward by random participants on the blockchain. No one party has control, it\u2019s a race to spend them first. However, the code to unlock them must be known for the code to stepped forward. Money sent to \u20BF\u2219\u03D5 contracts appear identical to any other pay-to-script UTXOs on the network. Nothing is known about how to spend the contract until it is spent at least once, so in order for the contract to function automatically, both their existence and the parameters to unlock them must be known. While the code to unlock is broadcasted by spending the contract once, not all contracts can be spent right away, so it\u2019s easier and safer just to publish some unlock record and not worry about forgetting how to unlock them."),xl.forEach(e),Ua=r(a),v=s(a,"UL",{});var M=o(v);te=s(M,"LI",{});var Bl=o(te);Et=s(Bl,"A",{href:!0});var Rl=o(Et);Nn=l(Rl,"Welcome!"),Rl.forEach(e),Bl.forEach(e),Sn=r(M),ee=s(M,"LI",{});var Al=o(ee);_t=s(Al,"A",{href:!0});var Cl=o(_t);Un=l(Cl,"Definitions"),Cl.forEach(e),Al.forEach(e),Vn=r(M),Tt=s(M,"LI",{});var kl=o(Tt);wt=s(kl,"A",{href:!0});var Pl=o(wt);Fn=l(Pl,"Contract Types"),Pl.forEach(e),L=s(kl,"UL",{});var Kt=o(L);ae=s(Kt,"LI",{});var Ol=o(ae);Dt=s(Ol,"A",{href:!0});var ql=o(Dt);Gn=l(ql,"Beneficiary Contracts"),ql.forEach(e),Ol.forEach(e),Mn=r(Kt),ne=s(Kt,"LI",{});var Ll=o(ne);xt=s(Ll,"A",{href:!0});var Hl=o(xt);Wn=l(Hl,"\u201CFree\u201D contracts"),Hl.forEach(e),Ll.forEach(e),Xn=r(Kt),se=s(Kt,"LI",{});var Il=o(se);Bt=s(Il,"A",{href:!0});var Nl=o(Bt);Yn=l(Nl,"Timelock v non-timelocked"),Nl.forEach(e),Il.forEach(e),Kt.forEach(e),kl.forEach(e),jn=r(M),Rt=s(M,"LI",{});var ml=o(Rt);At=s(ml,"A",{href:!0});var Sl=o(At);zn=l(Sl,"Implemented Contracts"),Sl.forEach(e),H=s(ml,"UL",{});var Qt=o(H);oe=s(Qt,"LI",{});var Ul=o(oe);Ct=s(Ul,"A",{href:!0});var Vl=o(Ct);Jn=l(Vl,"Annuity"),Vl.forEach(e),Ul.forEach(e),Kn=r(Qt),ce=s(Qt,"LI",{});var Fl=o(ce);Pt=s(Fl,"A",{href:!0});var Gl=o(Pt);Qn=l(Gl,"Divide"),Gl.forEach(e),Fl.forEach(e),Zn=r(Qt),le=s(Qt,"LI",{});var Ml=o(le);Ot=s(Ml,"A",{href:!0});var Wl=o(Ot);$n=l(Wl,"Faucet"),Wl.forEach(e),Ml.forEach(e),Qt.forEach(e),ml.forEach(e),M.forEach(e),Va=r(a),qt=s(a,"H1",{});var Xl=o(qt);gn=l(Xl,"Definitions"),Xl.forEach(e),Fa=r(a),tt=s(a,"P",{});var vl=o(tt);pe=s(vl,"STRONG",{});var Yl=o(pe);ts=l(Yl,"covenant"),Yl.forEach(e),es=l(vl,": A contract with variable parameters stored in script, which change."),vl.forEach(e),Ga=r(a),et=s(a,"P",{});var yl=o(et);re=s(yl,"STRONG",{});var jl=o(re);as=l(jl,"satoshis"),jl.forEach(e),ns=l(yl,": A unit of account (on the Bitcoin Cash fork of the initial bitcoin blockchain). A hundred million satoshi are equal to 1 Bitcoin Cash."),yl.forEach(e),Ma=r(a),at=s(a,"P",{});var bl=o(at);ie=s(bl,"STRONG",{});var zl=o(ie);ss=l(zl,"blocks (timescale)"),zl.forEach(e),os=l(bl,": The base unit of time on bitcoin, about 10 minutes on average."),bl.forEach(e),Wa=r(a),U=s(a,"TABLE",{});var _n=o(U);ue=s(_n,"THEAD",{});var Jl=o(ue);b=s(Jl,"TR",{});var W=o(b);de=s(W,"TH",{});var Kl=o(de);cs=l(Kl,"Blocks"),Kl.forEach(e),ls=r(W),he=s(W,"TH",{});var Ql=o(he);ps=l(Ql,"Minutes"),Ql.forEach(e),rs=r(W),fe=s(W,"TH",{});var Zl=o(fe);is=l(Zl,"Days"),Zl.forEach(e),us=r(W),ke=s(W,"TH",{});var $l=o(ke);ds=l($l,"Years"),$l.forEach(e),W.forEach(e),Jl.forEach(e),hs=r(_n),d=s(_n,"TBODY",{});var h=o(d);E=s(h,"TR",{});var X=o(E);me=s(X,"TD",{});var gl=o(me);fs=l(gl,"1"),gl.forEach(e),ks=r(X),ve=s(X,"TD",{});var tp=o(ve);ms=l(tp,"10"),tp.forEach(e),vs=r(X),ye=s(X,"TD",{});var ep=o(ye);ys=l(ep,"-"),ep.forEach(e),bs=r(X),be=s(X,"TD",{});var ap=o(be);Es=l(ap,"-"),ap.forEach(e),X.forEach(e),_s=r(h),_=s(h,"TR",{});var Y=o(_);Ee=s(Y,"TD",{});var np=o(Ee);Ts=l(np,"10"),np.forEach(e),ws=r(Y),_e=s(Y,"TD",{});var sp=o(_e);Ds=l(sp,"100"),sp.forEach(e),xs=r(Y),Te=s(Y,"TD",{});var op=o(Te);Bs=l(op,"-"),op.forEach(e),Rs=r(Y),we=s(Y,"TD",{});var cp=o(we);As=l(cp,"-"),cp.forEach(e),Y.forEach(e),Cs=r(h),T=s(h,"TR",{});var j=o(T);De=s(j,"TD",{});var lp=o(De);Ps=l(lp,"100"),lp.forEach(e),Os=r(j),xe=s(j,"TD",{});var pp=o(xe);qs=l(pp,"1000"),pp.forEach(e),Ls=r(j),Be=s(j,"TD",{});var rp=o(Be);Hs=l(rp,"0.694"),rp.forEach(e),Is=r(j),Re=s(j,"TD",{});var ip=o(Re);Ns=l(ip,"-"),ip.forEach(e),j.forEach(e),Ss=r(h),w=s(h,"TR",{});var z=o(w);Ae=s(z,"TD",{});var up=o(Ae);Us=l(up,"144"),up.forEach(e),Vs=r(z),Ce=s(z,"TD",{});var dp=o(Ce);Fs=l(dp,"1440"),dp.forEach(e),Gs=r(z),Pe=s(z,"TD",{});var hp=o(Pe);Ms=l(hp,"1"),hp.forEach(e),Ws=r(z),Oe=s(z,"TD",{});var fp=o(Oe);Xs=l(fp,"-"),fp.forEach(e),z.forEach(e),Ys=r(h),D=s(h,"TR",{});var J=o(D);qe=s(J,"TD",{});var kp=o(qe);js=l(kp,"1000"),kp.forEach(e),zs=r(J),Le=s(J,"TD",{});var mp=o(Le);Js=l(mp,"-"),mp.forEach(e),Ks=r(J),He=s(J,"TD",{});var vp=o(He);Qs=l(vp,"6.94"),vp.forEach(e),Zs=r(J),Ie=s(J,"TD",{});var yp=o(Ie);$s=l(yp,"-"),yp.forEach(e),J.forEach(e),gs=r(h),x=s(h,"TR",{});var K=o(x);Ne=s(K,"TD",{});var bp=o(Ne);to=l(bp,"4000"),bp.forEach(e),eo=r(K),Se=s(K,"TD",{});var Ep=o(Se);ao=l(Ep,"-"),Ep.forEach(e),no=r(K),Ue=s(K,"TD",{});var _p=o(Ue);so=l(_p,"27.7"),_p.forEach(e),oo=r(K),Ve=s(K,"TD",{});var Tp=o(Ve);co=l(Tp,"-"),Tp.forEach(e),K.forEach(e),lo=r(h),B=s(h,"TR",{});var Q=o(B);Fe=s(Q,"TD",{});var wp=o(Fe);po=l(wp,"13140"),wp.forEach(e),ro=r(Q),Ge=s(Q,"TD",{});var Dp=o(Ge);io=l(Dp,"-"),Dp.forEach(e),uo=r(Q),Me=s(Q,"TD",{});var xp=o(Me);ho=l(xp,"91.25"),xp.forEach(e),fo=r(Q),We=s(Q,"TD",{});var Bp=o(We);ko=l(Bp,"0.249"),Bp.forEach(e),Q.forEach(e),mo=r(h),R=s(h,"TR",{});var Z=o(R);Xe=s(Z,"TD",{});var Rp=o(Xe);vo=l(Rp,"26280"),Rp.forEach(e),yo=r(Z),Ye=s(Z,"TD",{});var Ap=o(Ye);bo=l(Ap,"-"),Ap.forEach(e),Eo=r(Z),je=s(Z,"TD",{});var Cp=o(je);_o=l(Cp,"-"),Cp.forEach(e),To=r(Z),ze=s(Z,"TD",{});var Pp=o(ze);wo=l(Pp,"0.499"),Pp.forEach(e),Z.forEach(e),Do=r(h),A=s(h,"TR",{});var $=o(A);Je=s($,"TD",{});var Op=o(Je);xo=l(Op,"52560"),Op.forEach(e),Bo=r($),Ke=s($,"TD",{});var qp=o(Ke);Ro=l(qp,"-"),qp.forEach(e),Ao=r($),Qe=s($,"TD",{});var Lp=o(Qe);Co=l(Lp,"-"),Lp.forEach(e),Po=r($),Ze=s($,"TD",{});var Hp=o(Ze);Oo=l(Hp,"0.999"),Hp.forEach(e),$.forEach(e),h.forEach(e),_n.forEach(e),Xa=r(a),nt=s(a,"P",{});var El=o(nt);$e=s(El,"STRONG",{});var Ip=o($e);qo=l(Ip,"OP_RETURN"),Ip.forEach(e),Lo=l(El,": A code (106) in BitcoinScript for transaction outputs which can store arbitrary data."),El.forEach(e),Ya=r(a),C=s(a,"P",{});var vt=o(C);ge=s(vt,"STRONG",{});var Np=o(ge);Ho=l(Np,"OP_RETURN data"),Np.forEach(e),Io=l(vt,": Data in OP_RETURNs is commonly encoded by pushing the total number of bytes, followed by the data bytes. For example "),ta=s(vt,"CODE",{});var Sp=o(ta);No=l(Sp,"04"),Sp.forEach(e),So=l(vt," followed by "),ea=s(vt,"CODE",{});var Up=o(ea);Uo=l(Up,"7574786f"),Up.forEach(e),Vo=l(vt," (4 bytes of in two letter hex). This format is used to \u201Cbroadcast\u201D \u20BF\u2219\u03D5 contracts."),vt.forEach(e),ja=r(a),st=s(a,"P",{});var _l=o(st);aa=s(_l,"STRONG",{});var Vp=o(aa);Fo=l(Vp,"published"),Vp.forEach(e),Go=l(_l,": In the context of an unspent contract, a contract is published if the parameters to construct and spend it are recorded on the blockchain, either in an OP_RETURN or by reference to the spent output."),_l.forEach(e),za=r(a),ot=s(a,"P",{});var Tl=o(ot);na=s(Tl,"STRONG",{});var Fp=o(na);Mo=l(Fp,"Unspent Transaction Output (UTXO)"),Fp.forEach(e),Wo=l(Tl,": some value, defined by the output of a previous transaction, which is locked by some code, either the hash of a public key (cashaddr), or a script."),Tl.forEach(e),Ja=r(a),Lt=s(a,"H1",{});var Gp=o(Lt);Xo=l(Gp,"Contract Types"),Gp.forEach(e),Ka=r(a),Ht=s(a,"P",{});var Mp=o(Ht);Yo=l(Mp,"Each \u20BF\u2219\u03D5 contract is designed to do one thing. The contracts available (so far) are as follows:"),Mp.forEach(e),Qa=r(a),It=s(a,"H2",{});var Wp=o(It);jo=l(Wp,"Beneficiary Contracts"),Wp.forEach(e),Za=r(a),Nt=s(a,"P",{});var Xp=o(Nt);zo=l(Xp,"Some contracts control value on behalf of the contract creator. They all have an executor allowance which can be claimed by the party which submits a valid spending transactions."),Xp.forEach(e),$a=r(a),V=s(a,"TABLE",{});var Tn=o(V);sa=s(Tn,"THEAD",{});var Yp=o(sa);ct=s(Yp,"TR",{});var wn=o(ct);oa=s(wn,"TH",{});var jp=o(oa);Jo=l(jp,"Name"),jp.forEach(e),Ko=r(wn),ca=s(wn,"TH",{});var zp=o(ca);Qo=l(zp,"Description"),zp.forEach(e),wn.forEach(e),Yp.forEach(e),Zo=r(Tn),I=s(Tn,"TBODY",{});var Zt=o(I);lt=s(Zt,"TR",{});var Dn=o(lt);la=s(Dn,"TD",{});var Jp=o(la);$o=l(Jp,"Annuity"),Jp.forEach(e),go=r(Dn),pa=s(Dn,"TD",{});var Kp=o(pa);tc=l(Kp,"Equal payments over time."),Kp.forEach(e),Dn.forEach(e),ec=r(Zt),pt=s(Zt,"TR",{});var xn=o(pt);ra=s(xn,"TD",{});var Qp=o(ra);ac=l(Qp,"Divide"),Qp.forEach(e),nc=r(xn),ia=s(xn,"TD",{});var Zp=o(ia);sc=l(Zp,"Divide money into equal payments, up to four addresses"),Zp.forEach(e),xn.forEach(e),oc=r(Zt),rt=s(Zt,"TR",{});var Bn=o(rt);ua=s(Bn,"TD",{});var $p=o(ua);cc=l($p,"Perpetuity"),$p.forEach(e),lc=r(Bn),da=s(Bn,"TD",{});var gp=o(da);pc=l(gp,"Pay a fixed fraction of total value at intervals"),gp.forEach(e),Bn.forEach(e),Zt.forEach(e),Tn.forEach(e),ga=r(a),St=s(a,"H2",{});var tr=o(St);rc=l(tr,"\u201CFree\u201D contracts"),tr.forEach(e),tn=r(a),Ut=s(a,"P",{});var er=o(Ut);ic=l(er,"Contracts with locked value that can be spent by anyone can be characterized as \u201Cfree\u201D. At present these include faucets, mining covenants, and a contract providing the facility to record data for free."),er.forEach(e),en=r(a),F=s(a,"TABLE",{});var Rn=o(F);ha=s(Rn,"THEAD",{});var ar=o(ha);it=s(ar,"TR",{});var An=o(it);fa=s(An,"TH",{});var nr=o(fa);uc=l(nr,"Name"),nr.forEach(e),dc=r(An),ka=s(An,"TH",{});var sr=o(ka);hc=l(sr,"Description"),sr.forEach(e),An.forEach(e),ar.forEach(e),fc=r(Rn),N=s(Rn,"TBODY",{});var $t=o(N);ut=s($t,"TR",{});var Cn=o(ut);ma=s(Cn,"TD",{});var or=o(ma);kc=l(or,"Faucet"),or.forEach(e),mc=r(Cn),va=s(Cn,"TD",{});var cr=o(va);vc=l(cr,"Distributes some free bitcoin per period"),cr.forEach(e),Cn.forEach(e),yc=r($t),dt=s($t,"TR",{});var Pn=o(dt);ya=s(Pn,"TD",{});var lr=o(ya);bc=l(lr,"Mine"),lr.forEach(e),Ec=r(Pn),ba=s(Pn,"TD",{});var pr=o(ba);_c=l(pr,"Distributes some bitcoin per period, for proof of work"),pr.forEach(e),Pn.forEach(e),Tc=r($t),ht=s($t,"TR",{});var On=o(ht);Ea=s(On,"TD",{});var rr=o(Ea);wc=l(rr,"Record"),rr.forEach(e),Dc=r(On),_a=s(On,"TD",{});var ir=o(_a);xc=l(ir,"Broadcast a contract to the blockchain"),ir.forEach(e),On.forEach(e),$t.forEach(e),Rn.forEach(e),an=r(a),Vt=s(a,"H2",{});var ur=o(Vt);Bc=l(ur,"Timelock v non-timelocked"),ur.forEach(e),nn=r(a),Ft=s(a,"P",{});var dr=o(Ft);Rc=l(dr,"The Divide and Record contracts are not timelocked, they may be called at anytime."),dr.forEach(e),sn=r(a),Gt=s(a,"H1",{});var hr=o(Gt);Ac=l(hr,"Implemented Contracts"),hr.forEach(e),on=r(a),Mt=s(a,"H2",{});var fr=o(Mt);Cc=l(fr,"Annuity"),fr.forEach(e),cn=r(a),Wt=s(a,"P",{});var kr=o(Wt);Pc=l(kr,"The annuity contract pays a fixed amount (in satoshis) to a predefined locking bytecode (i.e. address)."),kr.forEach(e),ln=r(a),f=s(a,"P",{});var O=o(f);Oc=l(O,"To prevent the contract from being called successively (thus paying out all at once), a timelock is added restricting input be of a certain age (in blocks), this parameter is called the "),Ta=s(O,"CODE",{});var mr=o(Ta);qc=l(mr,"period"),mr.forEach(e),Lc=l(O,". The beneficiary address (or contract) is denoted by the "),wa=s(O,"CODE",{});var vr=o(wa);Hc=l(vr,"recipientLockingBytecode"),vr.forEach(e),Ic=l(O,". The amount paid in each period is the "),Da=s(O,"CODE",{});var yr=o(Da);Nc=l(yr,"installment"),yr.forEach(e),Sc=l(O,". To aid in execution, a small fee is left as "),xa=s(O,"CODE",{});var br=o(xa);Uc=l(br,"executorAllowance"),br.forEach(e),Vc=l(O," for each execution of the contract, it may be paid to anyone."),O.forEach(e),pn=r(a),Xt=s(a,"P",{});var Er=o(Xt);Fc=l(Er,"This contract: checks that the first output pays to the beneficiary; checks that the timelock is satisfied; checks that the second output pays back to the contract; gets the total value being spent; calculates the amount to be returned, and finally, checks that both the installment amount of the first output & the total returned to the contract exceed the required amounts."),Er.forEach(e),rn=r(a),ft=s(a,"PRE",{class:!0});var Vr=o(ft);Vr.forEach(e),un=r(a),Yt=s(a,"H2",{});var _r=o(Yt);Gc=l(_r,"Divide"),_r.forEach(e),dn=r(a),jt=s(a,"P",{});var Tr=o(jt);Mc=l(Tr,"The divide contract splits inputs across a predefined set of output destinations."),Tr.forEach(e),hn=r(a),k=s(a,"P",{});var q=o(k);Wc=l(q,"Each output is denoted by "),Ba=s(q,"CODE",{});var wr=o(Ba);Xc=l(wr,"r#LockingBytecode"),wr.forEach(e),Yc=l(q,", where "),Ra=s(q,"CODE",{});var Dr=o(Ra);jc=l(Dr,"#"),Dr.forEach(e),zc=l(q," is the index of the output. Since early BitcoinScript did not have loops, this contract was written with a static list of outputs and a "),Aa=s(q,"CODE",{});var xr=o(Aa);Jc=l(xr,"divisor"),xr.forEach(e),Kc=l(q,", which is simply the number of outputs. An "),Ca=s(q,"CODE",{});var Br=o(Ca);Qc=l(Br,"executorAllowance"),Br.forEach(e),Zc=l(q," amount is subtracted from the total distribution amount, which may be spent by anyone as long as the amount payed to the hardcoded receipts equals or exceeds the alloted share."),q.forEach(e),fn=r(a),G=s(a,"P",{});var qn=o(G);$c=l(qn,"This contract: checks that each of the output destinations match the predefined output; calculates the total value on the contract; calculates the amount to be paid to each receipt ("),Pa=s(qn,"CODE",{});var Rr=o(Pa);gc=l(Rr,"distribution"),Rr.forEach(e),tl=l(qn,"), and finally calculates that each receipt receives an output greater than, or equal to, the distribution amount."),qn.forEach(e),kn=r(a),kt=s(a,"PRE",{class:!0});var Fr=o(kt);Fr.forEach(e),mn=r(a),zt=s(a,"H2",{});var Ar=o(zt);el=l(Ar,"Faucet"),Ar.forEach(e),vn=r(a),Jt=s(a,"P",{});var Cr=o(Jt);al=l(Cr,"The faucet contract pays \u201Cfree\u201D bitcoin."),Cr.forEach(e),yn=r(a),y=s(a,"P",{});var g=o(y);nl=l(g,"To prevent the faucet from being drained by successive calls, a "),Oa=s(g,"CODE",{});var Pr=o(Oa);sl=l(Pr,"period"),Pr.forEach(e),ol=l(g," timeout is set to specify the minimum age of the input being spent. The amount available to be spent is defined by a "),qa=s(g,"CODE",{});var Or=o(qa);cl=l(Or,"payout"),Or.forEach(e),ll=l(g,".  As a convenience, and to have multiple faucets with the same payout, an "),La=s(g,"CODE",{});var qr=o(La);pl=l(qr,"index"),qr.forEach(e),rl=l(g," parameter is added to distinguish identical contracts."),g.forEach(e),bn=r(a),P=s(a,"P",{});var gt=o(P);il=l(gt,"The steps of this contract are as follows: first, it requires that the transaction be called with an age that is greater than the current "),Ha=s(gt,"CODE",{});var Lr=o(Ha);ul=l(Lr,"period"),Lr.forEach(e),dl=l(gt,"; the "),Ia=s(gt,"CODE",{});var Hr=o(Ia);hl=l(Hr,"index"),Hr.forEach(e),fl=l(gt," is used so that it is not unused; next the first output must return all value to the faucet contract, and finally the returned value is calculate and must be returned to the faucet if the current value exceeds the payout."),gt.forEach(e),En=r(a),mt=s(a,"PRE",{class:!0});var Gr=o(mt);Gr.forEach(e),this.h()},h(){m(Et,"href","#welcome"),m(_t,"href","#definitions"),m(wt,"href","#contract-types"),m(Dt,"href","#beneficiary-contracts"),m(xt,"href","#free-contracts"),m(Bt,"href","#timelock-v-non-timelocked"),m(At,"href","#implemented-contracts"),m(Ct,"href","#annuity"),m(Pt,"href","#divide"),m(Ot,"href","#faucet"),m(ft,"class","language-solidity"),m(kt,"class","language-solidity"),m(mt,"class","language-solidity")},m(a,i){u(a,S,i),t(S,Ln),u(a,Na,i),u(a,yt,i),t(yt,Hn),u(a,Sa,i),u(a,bt,i),t(bt,In),u(a,Ua,i),u(a,v,i),t(v,te),t(te,Et),t(Et,Nn),t(v,Sn),t(v,ee),t(ee,_t),t(_t,Un),t(v,Vn),t(v,Tt),t(Tt,wt),t(wt,Fn),t(Tt,L),t(L,ae),t(ae,Dt),t(Dt,Gn),t(L,Mn),t(L,ne),t(ne,xt),t(xt,Wn),t(L,Xn),t(L,se),t(se,Bt),t(Bt,Yn),t(v,jn),t(v,Rt),t(Rt,At),t(At,zn),t(Rt,H),t(H,oe),t(oe,Ct),t(Ct,Jn),t(H,Kn),t(H,ce),t(ce,Pt),t(Pt,Qn),t(H,Zn),t(H,le),t(le,Ot),t(Ot,$n),u(a,Va,i),u(a,qt,i),t(qt,gn),u(a,Fa,i),u(a,tt,i),t(tt,pe),t(pe,ts),t(tt,es),u(a,Ga,i),u(a,et,i),t(et,re),t(re,as),t(et,ns),u(a,Ma,i),u(a,at,i),t(at,ie),t(ie,ss),t(at,os),u(a,Wa,i),u(a,U,i),t(U,ue),t(ue,b),t(b,de),t(de,cs),t(b,ls),t(b,he),t(he,ps),t(b,rs),t(b,fe),t(fe,is),t(b,us),t(b,ke),t(ke,ds),t(U,hs),t(U,d),t(d,E),t(E,me),t(me,fs),t(E,ks),t(E,ve),t(ve,ms),t(E,vs),t(E,ye),t(ye,ys),t(E,bs),t(E,be),t(be,Es),t(d,_s),t(d,_),t(_,Ee),t(Ee,Ts),t(_,ws),t(_,_e),t(_e,Ds),t(_,xs),t(_,Te),t(Te,Bs),t(_,Rs),t(_,we),t(we,As),t(d,Cs),t(d,T),t(T,De),t(De,Ps),t(T,Os),t(T,xe),t(xe,qs),t(T,Ls),t(T,Be),t(Be,Hs),t(T,Is),t(T,Re),t(Re,Ns),t(d,Ss),t(d,w),t(w,Ae),t(Ae,Us),t(w,Vs),t(w,Ce),t(Ce,Fs),t(w,Gs),t(w,Pe),t(Pe,Ms),t(w,Ws),t(w,Oe),t(Oe,Xs),t(d,Ys),t(d,D),t(D,qe),t(qe,js),t(D,zs),t(D,Le),t(Le,Js),t(D,Ks),t(D,He),t(He,Qs),t(D,Zs),t(D,Ie),t(Ie,$s),t(d,gs),t(d,x),t(x,Ne),t(Ne,to),t(x,eo),t(x,Se),t(Se,ao),t(x,no),t(x,Ue),t(Ue,so),t(x,oo),t(x,Ve),t(Ve,co),t(d,lo),t(d,B),t(B,Fe),t(Fe,po),t(B,ro),t(B,Ge),t(Ge,io),t(B,uo),t(B,Me),t(Me,ho),t(B,fo),t(B,We),t(We,ko),t(d,mo),t(d,R),t(R,Xe),t(Xe,vo),t(R,yo),t(R,Ye),t(Ye,bo),t(R,Eo),t(R,je),t(je,_o),t(R,To),t(R,ze),t(ze,wo),t(d,Do),t(d,A),t(A,Je),t(Je,xo),t(A,Bo),t(A,Ke),t(Ke,Ro),t(A,Ao),t(A,Qe),t(Qe,Co),t(A,Po),t(A,Ze),t(Ze,Oo),u(a,Xa,i),u(a,nt,i),t(nt,$e),t($e,qo),t(nt,Lo),u(a,Ya,i),u(a,C,i),t(C,ge),t(ge,Ho),t(C,Io),t(C,ta),t(ta,No),t(C,So),t(C,ea),t(ea,Uo),t(C,Vo),u(a,ja,i),u(a,st,i),t(st,aa),t(aa,Fo),t(st,Go),u(a,za,i),u(a,ot,i),t(ot,na),t(na,Mo),t(ot,Wo),u(a,Ja,i),u(a,Lt,i),t(Lt,Xo),u(a,Ka,i),u(a,Ht,i),t(Ht,Yo),u(a,Qa,i),u(a,It,i),t(It,jo),u(a,Za,i),u(a,Nt,i),t(Nt,zo),u(a,$a,i),u(a,V,i),t(V,sa),t(sa,ct),t(ct,oa),t(oa,Jo),t(ct,Ko),t(ct,ca),t(ca,Qo),t(V,Zo),t(V,I),t(I,lt),t(lt,la),t(la,$o),t(lt,go),t(lt,pa),t(pa,tc),t(I,ec),t(I,pt),t(pt,ra),t(ra,ac),t(pt,nc),t(pt,ia),t(ia,sc),t(I,oc),t(I,rt),t(rt,ua),t(ua,cc),t(rt,lc),t(rt,da),t(da,pc),u(a,ga,i),u(a,St,i),t(St,rc),u(a,tn,i),u(a,Ut,i),t(Ut,ic),u(a,en,i),u(a,F,i),t(F,ha),t(ha,it),t(it,fa),t(fa,uc),t(it,dc),t(it,ka),t(ka,hc),t(F,fc),t(F,N),t(N,ut),t(ut,ma),t(ma,kc),t(ut,mc),t(ut,va),t(va,vc),t(N,yc),t(N,dt),t(dt,ya),t(ya,bc),t(dt,Ec),t(dt,ba),t(ba,_c),t(N,Tc),t(N,ht),t(ht,Ea),t(Ea,wc),t(ht,Dc),t(ht,_a),t(_a,xc),u(a,an,i),u(a,Vt,i),t(Vt,Bc),u(a,nn,i),u(a,Ft,i),t(Ft,Rc),u(a,sn,i),u(a,Gt,i),t(Gt,Ac),u(a,on,i),u(a,Mt,i),t(Mt,Cc),u(a,cn,i),u(a,Wt,i),t(Wt,Pc),u(a,ln,i),u(a,f,i),t(f,Oc),t(f,Ta),t(Ta,qc),t(f,Lc),t(f,wa),t(wa,Hc),t(f,Ic),t(f,Da),t(Da,Nc),t(f,Sc),t(f,xa),t(xa,Uc),t(f,Vc),u(a,pn,i),u(a,Xt,i),t(Xt,Fc),u(a,rn,i),u(a,ft,i),ft.innerHTML=Nr,u(a,un,i),u(a,Yt,i),t(Yt,Gc),u(a,dn,i),u(a,jt,i),t(jt,Mc),u(a,hn,i),u(a,k,i),t(k,Wc),t(k,Ba),t(Ba,Xc),t(k,Yc),t(k,Ra),t(Ra,jc),t(k,zc),t(k,Aa),t(Aa,Jc),t(k,Kc),t(k,Ca),t(Ca,Qc),t(k,Zc),u(a,fn,i),u(a,G,i),t(G,$c),t(G,Pa),t(Pa,gc),t(G,tl),u(a,kn,i),u(a,kt,i),kt.innerHTML=Sr,u(a,mn,i),u(a,zt,i),t(zt,el),u(a,vn,i),u(a,Jt,i),t(Jt,al),u(a,yn,i),u(a,y,i),t(y,nl),t(y,Oa),t(Oa,sl),t(y,ol),t(y,qa),t(qa,cl),t(y,ll),t(y,La),t(La,pl),t(y,rl),u(a,bn,i),u(a,P,i),t(P,il),t(P,Ha),t(Ha,ul),t(P,dl),t(P,Ia),t(Ia,hl),t(P,fl),u(a,En,i),u(a,mt,i),mt.innerHTML=Ur},p:wl,i:wl,o:wl,d(a){a&&e(S),a&&e(Na),a&&e(yt),a&&e(Sa),a&&e(bt),a&&e(Ua),a&&e(v),a&&e(Va),a&&e(qt),a&&e(Fa),a&&e(tt),a&&e(Ga),a&&e(et),a&&e(Ma),a&&e(at),a&&e(Wa),a&&e(U),a&&e(Xa),a&&e(nt),a&&e(Ya),a&&e(C),a&&e(ja),a&&e(st),a&&e(za),a&&e(ot),a&&e(Ja),a&&e(Lt),a&&e(Ka),a&&e(Ht),a&&e(Qa),a&&e(It),a&&e(Za),a&&e(Nt),a&&e($a),a&&e(V),a&&e(ga),a&&e(St),a&&e(tn),a&&e(Ut),a&&e(en),a&&e(F),a&&e(an),a&&e(Vt),a&&e(nn),a&&e(Ft),a&&e(sn),a&&e(Gt),a&&e(on),a&&e(Mt),a&&e(cn),a&&e(Wt),a&&e(ln),a&&e(f),a&&e(pn),a&&e(Xt),a&&e(rn),a&&e(ft),a&&e(un),a&&e(Yt),a&&e(dn),a&&e(jt),a&&e(hn),a&&e(k),a&&e(fn),a&&e(G),a&&e(kn),a&&e(kt),a&&e(mn),a&&e(zt),a&&e(vn),a&&e(Jt),a&&e(yn),a&&e(y),a&&e(bn),a&&e(P),a&&e(En),a&&e(mt)}}}class zr extends Mr{constructor(S){super(),Wr(this,S,null,Yr,Xr,{})}}export{zr as default};
//# sourceMappingURL=_page.md-19207aec.js.map
