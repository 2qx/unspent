import{S as oh,i as ch,s as ph,k as s,q as c,a as u,l as e,m as o,r as p,h as n,c as r,a9 as lh,n as k,F as ih,b as i,G as a,B as Hu}from"../../chunks/index-109d96d5.js";function uh(Xd){let U,N,Aa,pt,zo,lt,it,Go,F,Ba,ut,Yo,Ra,rt,Wo,Ha,kt,Xo,La,dt,jo,ht,ft,Ko,b,qa,mt,Jo,Oa,vt,Qo,Ia,yt,Zo,Sa,bt,$o,Ua,Et,go,Na,_t,tc,wt,Tt,ac,M,Fa,xt,nc,Va,Dt,sc,Ma,Pt,ec,te,ae,Ct,oc,ne,za,cc,se,Ga,pc,ee,At,lc,oe,Ya,ic,ce,Bt,uc,pe,Wa,rc,le,z,yn,Rt,bn,kc,dc,En,hc,fc,V,Ht,_n,mc,vc,wn,yc,bc,Lt,Tn,Ec,_c,xn,wc,Tc,qt,Dn,xc,Dc,Pn,Pc,ie,Ot,Cc,ue,Xa,Ac,re,G,Cn,It,An,Bc,Rc,Bn,Hc,Lc,St,Ut,Rn,qc,Oc,Hn,Ic,Sc,Nt,Ln,Uc,Nc,qn,Fc,ke,Ft,Vc,de,ja,Mc,he,Y,On,Vt,In,zc,Gc,Sn,Yc,Wc,Un,Mt,Nn,Xc,jc,Fn,Kc,fe,zt,Jc,me,Gt,Qc,Yt,Zc,ve,Ka,$c,ye,Wt,gc,be,Xt,tp,Ee,Ja,ap,_e,f,np,Vn,sp,ep,Mn,op,cp,zn,pp,lp,Gn,ip,up,we,Qa,rp,Te,jt,jd=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>

<span class="token comment">// v202205626</span>

<span class="token comment">// Pay equal payments at regular intervals using input locks</span>
<span class="token keyword">contract</span> <span class="token class-name">Annuity</span><span class="token punctuation">(</span>

  <span class="token comment">// interval for payouts, in blocks</span>
  <span class="token builtin">int</span> period<span class="token punctuation">,</span>

  <span class="token comment">// LockingBytecode of the beneficiary,</span>
  <span class="token comment">// the address receiving payments</span>
  <span class="token builtin">bytes</span> recipientLockingBytecode<span class="token punctuation">,</span>

  <span class="token comment">// amount paid in each installment</span>
  <span class="token builtin">int</span> installment<span class="token punctuation">,</span>

  <span class="token comment">// extra allowance for administration of contract</span>
  <span class="token comment">// fees are paid from executors' allowance.</span>
  <span class="token builtin">int</span> executorAllowance
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Check that the first output sends to the recipient</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> recipientLockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Check that time has passed and that time locks are enabled</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// require the second output to match the active bytecode</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value on the contract</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Calculate value returned to the contract</span>
    <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> installment <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

    <span class="token comment">// Check that the outputs send the correct amounts</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> installment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,xe,Kt,kp,De,Za,dp,Pe,m,hp,Yn,fp,mp,Wn,vp,yp,Xn,bp,Ep,jn,_p,wp,Ce,W,Tp,Kn,xp,Dp,Ae,Jt,Kd=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.0</span><span class="token punctuation">;</span>

 <span class="token keyword">contract</span> <span class="token class-name">Divide</span><span class="token punctuation">(</span>
   <span class="token comment">// allowance for party executing the contract</span>
   <span class="token builtin">int</span> executorAllowance<span class="token punctuation">,</span>
   <span class="token comment">// number of outputs receiving payout</span>
   <span class="token builtin">int</span> divisor<span class="token punctuation">,</span>

   <span class="token comment">// for each beneficiary,</span>
   <span class="token comment">// take the LockingBytecode as input</span>
   <span class="token builtin">bytes</span> r0LockingBytecode<span class="token punctuation">,</span>
   <span class="token builtin">bytes</span> r1LockingBytecode
 <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// distributes to each output in order</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> r0LockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> r1LockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value of inputs</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Total value paid to beneficiaries,</span>
    <span class="token comment">// minus executor allowance</span>
    <span class="token builtin">int</span> distributedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

    <span class="token comment">// Value paid to each beneficiary</span>
    <span class="token builtin">int</span> distribution <span class="token operator">=</span> distributedValue <span class="token operator">/</span> divisor<span class="token punctuation">;</span>

    <span class="token comment">// each output must be greater</span>
    <span class="token comment">// or equal to the distribution amount</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> distribution<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> distribution<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span></code>`,Be,Qt,Pp,Re,$a,Cp,He,v,Ap,Jn,Bp,Rp,Qn,Hp,Lp,Zn,qp,Op,Le,R,Ip,$n,Sp,Up,gn,Np,Fp,qe,Zt,Jd=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.0</span><span class="token punctuation">;</span>

<span class="token comment">// v20220609</span>

<span class="token keyword">contract</span> <span class="token class-name">Faucet</span><span class="token punctuation">(</span>

  <span class="token comment">// interval for payouts, in blocks</span>
  <span class="token builtin">int</span> period<span class="token punctuation">,</span>

  <span class="token comment">// amount to be paid by faucet allowance.</span>
  <span class="token builtin">int</span> payout<span class="token punctuation">,</span>

  <span class="token comment">// random number input into contract to have more than one</span>
  <span class="token builtin">int</span> index
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">drip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Check that time has passed and that time locks are enabled</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// use the index</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// require the first output to match the active bytecode</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value on the contract</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Calculate value returned to the contract</span>
    <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> payout<span class="token punctuation">;</span>

    <span class="token comment">// If the value on the contract exceeds the payout amount</span>
    <span class="token comment">// then assert that the value must return to the contract</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>currentValue <span class="token operator">></span> payout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,Oe,$t,Vp,Ie,ga,Mp,Se,H,zp,ts,Gp,Yp,as,Wp,Xp,Ue,y,jp,ns,Kp,Jp,ss,Qp,Zp,es,$p,gp,Ne,gt,ta,Lu,tl,Fe,aa,Qd=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>

<span class="token comment">// v20220727</span>

<span class="token comment">// A faucet with proof of work.</span>
<span class="token keyword">contract</span> <span class="token class-name">Mine</span><span class="token punctuation">(</span>

  <span class="token comment">// interval for payouts, in blocks</span>
  <span class="token builtin">int</span> period<span class="token punctuation">,</span>

  <span class="token comment">// amount to be paid by faucet allowance.</span>
  <span class="token builtin">int</span> payout<span class="token punctuation">,</span>

  <span class="token comment">// how many leading zeros should the hash of the nonce and current bytecode have</span>
  <span class="token builtin">int</span> difficulty<span class="token punctuation">,</span>

  <span class="token comment">// the old nonce, which is replaced each time.</span>
  <span class="token builtin">bytes7</span> canary
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token builtin">bytes7</span> nonce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Check that time has passed and that time locks are enabled</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Use the old nonce</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>canary<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Check that the new nonce creates a hash with</span>
    <span class="token comment">// some D (difficulty) leading zeros when hashed with the active bytecode</span>
    <span class="token builtin">bytes</span> version <span class="token operator">=</span> <span class="token builtin">byte</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes</span> zeros <span class="token operator">=</span> <span class="token builtin">bytes7</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes</span> hash <span class="token operator">=</span> <span class="token function">sha256</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode <span class="token operator">+</span> <span class="token builtin">bytes7</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> zeros<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// calculate the locking bytecode</span>
    <span class="token comment">// of a new mining contract with the nonce as canary</span>
    <span class="token builtin">bytes</span> newContract <span class="token operator">=</span> <span class="token number">0x7</span> <span class="token operator">+</span> <span class="token builtin">bytes7</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes20</span> contractHash <span class="token operator">=</span> <span class="token function">hash160</span><span class="token punctuation">(</span>newContract<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes23</span> lockingCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span>contractHash<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// Require the first output details the parameters</span>
    <span class="token comment">// of the mining contract in a zero value OP_RETURN</span>
    <span class="token builtin">bytes</span> announcement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeNullData</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token comment">// The protocol</span>
      <span class="token number">0x7574786f</span><span class="token punctuation">,</span>
      <span class="token comment">// M for mining contract</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// version</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The period,</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The payout,</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>payout<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// preceding zeros on solution</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The current nonce (future canary), of the mining contract,</span>
      <span class="token comment">// where funds are simultaneously sent to</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The new bytecode</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>lockingCode<span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Assure that the first output matches the arguments to the contract</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> announcement<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// check that the change output sends to that contract</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> lockingCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value on the contract</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Calculate value returned to the contract</span>
    <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> payout<span class="token punctuation">;</span>

    <span class="token comment">// If the value on the contract exceeds the payout amount</span>
    <span class="token comment">// then assert that the value must return to the contract</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>currentValue <span class="token operator">></span> payout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Assure it has zero value</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,Ve,na,al,Me,tn,nl,ze,L,sl,os,el,ol,cs,cl,pl,Ge,sa,Zd=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>

<span class="token comment">// v20220522</span>

<span class="token keyword">contract</span> <span class="token class-name">Perpetuity</span><span class="token punctuation">(</span>

 <span class="token comment">// interval for payouts, in blocks</span>
 <span class="token builtin">int</span> period<span class="token punctuation">,</span>

 <span class="token comment">// lockingBytecode of the beneficiary,</span>
 <span class="token comment">// the address receiving payments</span>
 <span class="token builtin">bytes</span> recipientLockingBytecode<span class="token punctuation">,</span>

 <span class="token comment">// extra allowance for administration of contract</span>
 <span class="token comment">// fees are paid from executors' allowance.</span>
 <span class="token builtin">int</span> executorAllowance<span class="token punctuation">,</span>

 <span class="token comment">// divisor for the payout,</span>
 <span class="token comment">// each payout must be greater than</span>
 <span class="token comment">// the total amount held on the contract</span>
 <span class="token comment">// divided by this number</span>
 <span class="token builtin">int</span> decay

<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">// Check that the first output sends to the recipient</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> recipientLockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that time has passed and that time locks are enabled</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// require the second output to match the active bytecode</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Get the total value on the contract</span>
  <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

  <span class="token comment">// The payout is the current value divided by the decay</span>
  <span class="token builtin">int</span> installment <span class="token operator">=</span> currentValue<span class="token operator">/</span>decay<span class="token punctuation">;</span>

  <span class="token comment">// Calculate value returned to the contract</span>
  <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> installment <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

  <span class="token comment">// Check that the outputs send the correct amounts</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> installment<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ye,ea,ll,We,an,il,Xe,oa,$d=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">^</span><span class="token version number">0.7.0</span><span class="token punctuation">;</span>

<span class="token comment">/* Allows publishing some OP_RETURN message,
 * given that:
 * 1. the hash160 value of the zero value OP_RETURN message is passed
 * 2. the first output has zero value
 * 3. the remaining value is pass back to the contract, mostly.
 */</span>


<span class="token keyword">contract</span> <span class="token class-name">Record</span><span class="token punctuation">(</span><span class="token builtin">int</span> maxFee<span class="token punctuation">,</span> <span class="token builtin">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token builtin">bytes20</span> dataHash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">// this does nothing</span>
  <span class="token comment">// different indices enable different contract addresses</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that the first tx output is a zero value opcode matching the provided hash</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode<span class="token punctuation">)</span> <span class="token operator">==</span> dataHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// calculate the fee required to propagate the transaction 1 sat/ byte</span>
  <span class="token builtin">int</span> baseFee <span class="token operator">=</span> <span class="token number">162</span><span class="token punctuation">;</span>

  <span class="token builtin">int</span> fee <span class="token operator">=</span> baseFee <span class="token operator">+</span> tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>fee<span class="token operator">&lt;=</span>maxFee<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that the second tx output sends the change back</span>
  <span class="token builtin">int</span> newValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">-</span> fee<span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,je,ca,ul,Ke,pa,rl,Je,X,kl,ps,dl,hl,Qe,la,fl,Ze,nn,ml,$e,ia,vl,ge,sn,yl,to,j,ls,E,is,bl,El,us,_l,wl,rs,Tl,xl,ks,Dl,Pl,d,_,ds,Cl,Al,hs,Bl,Rl,fs,Hl,Ll,ms,ql,Ol,w,vs,Il,Sl,ys,Ul,Nl,bs,Fl,Vl,Es,Ml,zl,T,_s,Gl,Yl,ws,Wl,Xl,Ts,jl,Kl,xs,Jl,Ql,x,Ds,Zl,$l,Ps,gl,ti,Cs,ai,ni,As,si,ei,D,Bs,oi,ci,Rs,pi,li,Hs,ii,ui,Ls,ri,ki,P,qs,di,hi,Os,fi,mi,Is,vi,yi,Ss,bi,Ei,C,Us,_i,wi,Ns,Ti,xi,Fs,Di,Pi,Vs,Ci,Ai,A,Ms,Bi,Ri,zs,Hi,Li,Gs,qi,Oi,Ys,Ii,Si,B,Ws,Ui,Ni,Xs,Fi,Vi,js,Mi,zi,Ks,Gi,ao,q,Yi,ua,Wi,Xi,Js,ji,Ki,no,ra,Ji,so,ka,Qi,eo,K,Zi,da,$i,gi,oo,ha,tu,co,fa,ma,au,nu,po,va,su,lo,ya,eu,io,ba,ou,Ea,cu,uo,_a,pu,ro,en,lu,ko,on,wa,iu,ho,Ta,uu,fo,cn,ru,mo,xa,ku,vo,O,du,Qs,hu,fu,Zs,mu,vu,yo,Da,yu,bo,pn,bu,Eo,ln,Eu,_o,Pa,_u,wo,un,wu,To,rn,Tu;return{c(){U=s("nav"),N=s("ol"),Aa=s("li"),pt=s("a"),zo=c("Welcome!"),lt=s("li"),it=s("a"),Go=c("Contract Types"),F=s("ol"),Ba=s("li"),ut=s("a"),Yo=c("Beneficiary Contracts"),Ra=s("li"),rt=s("a"),Wo=c("Distributive Contracts"),Ha=s("li"),kt=s("a"),Xo=c("Informational Contracts"),La=s("li"),dt=s("a"),jo=c("Timelock v non-timelocked"),ht=s("li"),ft=s("a"),Ko=c("Contracts"),b=s("ol"),qa=s("li"),mt=s("a"),Jo=c("Annuity"),Oa=s("li"),vt=s("a"),Qo=c("Divide"),Ia=s("li"),yt=s("a"),Zo=c("Faucet"),Sa=s("li"),bt=s("a"),$o=c("Mine-able Faucet"),Ua=s("li"),Et=s("a"),go=c("Perpetuity"),Na=s("li"),_t=s("a"),tc=c("Record"),wt=s("li"),Tt=s("a"),ac=c("Definitions"),M=s("ol"),Fa=s("li"),xt=s("a"),nc=c("Units"),Va=s("li"),Dt=s("a"),sc=c("Languages"),Ma=s("li"),Pt=s("a"),ec=c("Script Components"),te=u(),ae=u(),Ct=s("h1"),oc=c("Welcome!"),ne=u(),za=s("p"),cc=c("Unspent Phi (\u20BF\u2219\u03D5) is an app for creating (and publishing) a set of simple contracts on the Bitcoin Cash (BCH) blockchain that anyone can execute. These contracts lock the value of unspent outputs from earlier transactions (UTXOs), and allow some small reward for any party to call a known contract (if valid according to the rules of BitcoinScript). Although simple, these contracts may be chained together to create complex outcomes."),se=u(),Ga=s("p"),pc=c("\u20BF\u2219\u03D5 contracts may be thought of as automata, machines that are unlocked and stepped forward by random participants on the blockchain. No one party has control, it\u2019s a race to spend them first. However, the code to unlock them must be known for the code to stepped forward. Money sent to \u20BF\u2219\u03D5 contracts appear identical to any other pay-to-script UTXOs on the network. Nothing is known about how to spend the contract until it is spent at least once, so in order for the contract to function automatically, both their existence and the parameters to unlock them must be known. While the code to unlock is broadcasted by spending the contract once, not all contracts can be spent right away, so it\u2019s easier and safer just to publish some unlock record and not worry about forgetting how to unlock them."),ee=u(),At=s("h1"),lc=c("Contract Types"),oe=u(),Ya=s("p"),ic=c("Each \u20BF\u2219\u03D5 contract is designed to do one thing. The contracts available (so far) are as follows:"),ce=u(),Bt=s("h2"),uc=c("Beneficiary Contracts"),pe=u(),Wa=s("p"),rc=c("Some contracts control value on behalf of the contract creator. They all have an executor allowance which can be claimed by the party which submits a valid spending transactions."),le=u(),z=s("table"),yn=s("thead"),Rt=s("tr"),bn=s("th"),kc=c("Name"),dc=u(),En=s("th"),hc=c("Description"),fc=u(),V=s("tbody"),Ht=s("tr"),_n=s("td"),mc=c("Annuity"),vc=u(),wn=s("td"),yc=c("Equal payments over time."),bc=u(),Lt=s("tr"),Tn=s("td"),Ec=c("Divide"),_c=u(),xn=s("td"),wc=c("Divide money into equal payments, up to four addresses"),Tc=u(),qt=s("tr"),Dn=s("td"),xc=c("Perpetuity"),Dc=u(),Pn=s("td"),Pc=c("Pay a fixed fraction of total value at intervals"),ie=u(),Ot=s("h2"),Cc=c("Distributive Contracts"),ue=u(),Xa=s("p"),Ac=c("Contracts with locked value that can be spent by anyone can be characterized as \u201Cfree\u201D. At present these include faucets, mining contracts."),re=u(),G=s("table"),Cn=s("thead"),It=s("tr"),An=s("th"),Bc=c("Name"),Rc=u(),Bn=s("th"),Hc=c("Description"),Lc=u(),St=s("tbody"),Ut=s("tr"),Rn=s("td"),qc=c("Faucet"),Oc=u(),Hn=s("td"),Ic=c("Distributes some free bitcoin per period"),Sc=u(),Nt=s("tr"),Ln=s("td"),Uc=c("Mine"),Nc=u(),qn=s("td"),Fc=c("Distributes some bitcoin per period, for proof of work"),ke=u(),Ft=s("h2"),Vc=c("Informational Contracts"),de=u(),ja=s("p"),Mc=c("A contract providing the facility to record data for free."),he=u(),Y=s("table"),On=s("thead"),Vt=s("tr"),In=s("th"),zc=c("Name"),Gc=u(),Sn=s("th"),Yc=c("Description"),Wc=u(),Un=s("tbody"),Mt=s("tr"),Nn=s("td"),Xc=c("Record"),jc=u(),Fn=s("td"),Kc=c("Broadcast a contract to the blockchain"),fe=u(),zt=s("h2"),Jc=c("Timelock v non-timelocked"),me=u(),Gt=s("p"),Qc=c("Contracts in BitcoinScript may be locked using "),Yt=s("a"),Zc=c("BIP68"),ve=u(),Ka=s("p"),$c=c("The Divide and Record contracts are not time-locked, they may be called at anytime."),ye=u(),Wt=s("h1"),gc=c("Contracts"),be=u(),Xt=s("h2"),tp=c("Annuity"),Ee=u(),Ja=s("p"),ap=c("The annuity contract pays a fixed amount (in satoshis) to a predefined locking bytecode (i.e. address)."),_e=u(),f=s("p"),np=c("To prevent the contract from being called successively (thus paying out all at once), a timelock is added restricting input be of a certain age (in blocks), this parameter is called the "),Vn=s("code"),sp=c("period"),ep=c(". The beneficiary address (or contract) is denoted by the "),Mn=s("code"),op=c("recipientLockingBytecode"),cp=c(". The amount paid in each period is the "),zn=s("code"),pp=c("installment"),lp=c(". To aid in execution, a small fee is left as "),Gn=s("code"),ip=c("executorAllowance"),up=c(" for each execution of the contract, it may be paid to anyone."),we=u(),Qa=s("p"),rp=c("This contract: checks that the first output pays to the beneficiary; checks that the timelock is satisfied; checks that the second output pays back to the contract; gets the total value being spent; calculates the amount to be returned, and finally, checks that both the installment amount of the first output & the total returned to the contract exceed the required amounts."),Te=u(),jt=s("pre"),xe=u(),Kt=s("h2"),kp=c("Divide"),De=u(),Za=s("p"),dp=c("The divide contract splits inputs across a predefined set of output destinations."),Pe=u(),m=s("p"),hp=c("Each output is denoted by "),Yn=s("code"),fp=c("r#LockingBytecode"),mp=c(", where "),Wn=s("code"),vp=c("#"),yp=c(" is the index of the output. Since early BitcoinScript did not have loops, this contract was written with a static list of outputs and a "),Xn=s("code"),bp=c("divisor"),Ep=c(", which is simply the number of outputs. An "),jn=s("code"),_p=c("executorAllowance"),wp=c(" amount is subtracted from the total distribution amount, which may be spent by anyone as long as the amount payed to the hardcoded receipts equals or exceeds the alloted share."),Ce=u(),W=s("p"),Tp=c("This contract: checks that each of the output destinations match the predefined output; calculates the total value on the contract; calculates the amount to be paid to each receipt ("),Kn=s("code"),xp=c("distribution"),Dp=c("), and finally calculates that each receipt receives an output greater than, or equal to, the distribution amount."),Ae=u(),Jt=s("pre"),Be=u(),Qt=s("h2"),Pp=c("Faucet"),Re=u(),$a=s("p"),Cp=c("The faucet contract pays \u201Cfree\u201D bitcoin."),He=u(),v=s("p"),Ap=c("To prevent the faucet from being drained by successive calls, a "),Jn=s("code"),Bp=c("period"),Rp=c(" timeout is set to specify the minimum age of the input being spent. The amount available to be spent is defined by a "),Qn=s("code"),Hp=c("payout"),Lp=c(". As a convenience, and to have multiple faucets with the same payout, an "),Zn=s("code"),qp=c("index"),Op=c(" parameter is added to distinguish identical contracts."),Le=u(),R=s("p"),Ip=c("The steps of this contract are as follows: first, it requires that the transaction be called with an age that is greater than the current "),$n=s("code"),Sp=c("period"),Up=c("; the "),gn=s("code"),Np=c("index"),Fp=c(" is used so that it is not unused; next the first output must return all value to the faucet contract, and finally the returned value is calculate and must be returned to the faucet if the current value exceeds the payout."),qe=u(),Zt=s("pre"),Oe=u(),$t=s("h2"),Vp=c("Mine-able Faucet"),Ie=u(),ga=s("p"),Mp=c("The \u20BF\u2219\u03D5 mining covenant is very much like the faucet, with some additional requirements."),Se=u(),H=s("p"),zp=c("First, execution of the contract must be called with a "),ts=s("code"),Gp=c("nonce"),Yp=c(` [a random value used once]
which when added to the current locking bytecode and hashed results in a value starting with some number of zeros.
How many zeros is the `),as=s("code"),Wp=c("difficulty"),Xp=c("."),Ue=u(),y=s("p"),jp=c("Finally, prior to spending the the mining "),ns=s("code"),Kp=c("payout"),Jp=c(`, the spender must announce
the winning `),ss=s("code"),Qp=c("nonce"),Zp=c(" in an OP_RETURN of the first output, and send the balance of the contract to a new mining covenant with the new nonce as a "),es=s("code"),$p=c("canary"),gp=c("."),Ne=u(),gt=s("p"),ta=s("img"),tl=c(`
Like an infinite series of Failures to Deliver (FTDs) for a stock, or banging forex futures to manipulate an outcome in currency markets, the canary is always brought back to life with a new copy of itself. You don\u2019t have to take over a whole blockchain to create a market for your energy, just mine a covenant\u2014there will be far less idiosyncratic risk.`),Fe=u(),aa=s("pre"),Ve=u(),na=s("h2"),al=c("Perpetuity"),Me=u(),tn=s("p"),nl=c("The Perpetuity contract works like an Annuity, however rather than pay a fixed amount, a fixed fraction of the total is paid each period."),ze=u(),L=s("p"),sl=c("The fraction paid is determined by the "),os=s("code"),el=c("decay"),ol=c(" parameter. If a "),cs=s("code"),cl=c("decay"),pl=c(" of 10 is specified, then one tenth the value is paid each period."),Ge=u(),sa=s("pre"),Ye=u(),ea=s("h2"),ll=c("Record"),We=u(),an=s("p"),il=c("A utility function to broadcast new contracts as OP_RETURN messages."),Xe=u(),oa=s("pre"),je=u(),ca=s("h1"),ul=c("Definitions"),Ke=u(),pa=s("h2"),rl=c("Units"),Je=u(),X=s("p"),kl=c("bitcoin has it\u2019s own units of value and time. Although there are whole coins and it\u2019s possible to use epoch time (seconds since 1970) in some cases, we\u2019ll stick to two here to steer clear of the politics surrounding \u201Cleap seconds\u201D and what is a "),ps=s("em"),dl=c("unit of account"),hl=c("."),Qe=u(),la=s("h3"),fl=c("satoshis"),Ze=u(),nn=s("p"),ml=c("A unit of account (on the Bitcoin Cash fork of the initial bitcoin blockchain). A hundred million satoshi are equal to 1 Bitcoin Cash."),$e=u(),ia=s("h3"),vl=c("blocks (time)"),ge=u(),sn=s("p"),yl=c("The base unit of time on bitcoin is called a block, blocktimes very, but are about 10 minutes on average."),to=u(),j=s("table"),ls=s("thead"),E=s("tr"),is=s("th"),bl=c("Blocks"),El=u(),us=s("th"),_l=c("Minutes"),wl=u(),rs=s("th"),Tl=c("Days"),xl=u(),ks=s("th"),Dl=c("Years"),Pl=u(),d=s("tbody"),_=s("tr"),ds=s("td"),Cl=c("1"),Al=u(),hs=s("td"),Bl=c("10"),Rl=u(),fs=s("td"),Hl=c("-"),Ll=u(),ms=s("td"),ql=c("-"),Ol=u(),w=s("tr"),vs=s("td"),Il=c("10"),Sl=u(),ys=s("td"),Ul=c("100"),Nl=u(),bs=s("td"),Fl=c("-"),Vl=u(),Es=s("td"),Ml=c("-"),zl=u(),T=s("tr"),_s=s("td"),Gl=c("100"),Yl=u(),ws=s("td"),Wl=c("1000"),Xl=u(),Ts=s("td"),jl=c("0.694"),Kl=u(),xs=s("td"),Jl=c("-"),Ql=u(),x=s("tr"),Ds=s("td"),Zl=c("144"),$l=u(),Ps=s("td"),gl=c("1440"),ti=u(),Cs=s("td"),ai=c("1"),ni=u(),As=s("td"),si=c("-"),ei=u(),D=s("tr"),Bs=s("td"),oi=c("1000"),ci=u(),Rs=s("td"),pi=c("-"),li=u(),Hs=s("td"),ii=c("6.94"),ui=u(),Ls=s("td"),ri=c("-"),ki=u(),P=s("tr"),qs=s("td"),di=c("4000"),hi=u(),Os=s("td"),fi=c("-"),mi=u(),Is=s("td"),vi=c("27.7"),yi=u(),Ss=s("td"),bi=c("-"),Ei=u(),C=s("tr"),Us=s("td"),_i=c("13140"),wi=u(),Ns=s("td"),Ti=c("-"),xi=u(),Fs=s("td"),Di=c("91.25"),Pi=u(),Vs=s("td"),Ci=c("0.249"),Ai=u(),A=s("tr"),Ms=s("td"),Bi=c("26280"),Ri=u(),zs=s("td"),Hi=c("-"),Li=u(),Gs=s("td"),qi=c("-"),Oi=u(),Ys=s("td"),Ii=c("0.499"),Si=u(),B=s("tr"),Ws=s("td"),Ui=c("52560"),Ni=u(),Xs=s("td"),Fi=c("-"),Vi=u(),js=s("td"),Mi=c("-"),zi=u(),Ks=s("td"),Gi=c("0.999"),ao=u(),q=s("p"),Yi=c("The largest value specified by the timelock upgrade "),ua=s("a"),Wi=c("(BIP68)"),Xi=c(" is a 16-bit value. Contracts with locking periods larger than the maximum value (65536) have "),Js=s("strong"),ji=c("not"),Ki=c(" been tested, and should not be expected to work."),no=u(),ra=s("h2"),Ji=c("Languages"),so=u(),ka=s("h3"),Qi=c("BitcoinScript"),eo=u(),K=s("p"),Zi=c("A procedural, stack-oriented programming language (Forth-like) with different rules and operations. In practice, it is "),da=s("a"),$i=c("Script"),gi=c(" that mostly unlocks value on a bitcoin network."),oo=u(),ha=s("h3"),tu=c("CashScript"),co=u(),fa=s("p"),ma=s("a"),au=c("CashScript is a high-level programming language for smart contracts on Bitcoin Cash"),nu=c(" that transpiles to BitcoinScript."),po=u(),va=s("h2"),su=c("Script Components"),lo=u(),ya=s("h3"),eu=c("Unlocking Script"),io=u(),ba=s("p"),ou=c(`Code that is run before running the unlocking code. If execution doesn\u2019t trigger failures and leaves a single non-zero value, it is considered unlocked.
`),Ea=s("a"),cu=c("More"),uo=u(),_a=s("h3"),pu=c("Locking Script"),ro=u(),en=s("p"),lu=c("At present (Nov 2022), there are two types of unlocking script (actually 4). P2PKH (pay-to-publicKeyHash), which pays to the hash of a public key. And Pay to Script (P2PSH) which pay to an unlocking script hash."),ko=u(),on=s("p"),wa=s("a"),iu=c("More info"),ho=u(),Ta=s("h3"),uu=c("OP_RETURN"),fo=u(),cn=s("p"),ru=c("A code (106) in BitcoinScript for transaction outputs which can store arbitrary data."),mo=u(),xa=s("h3"),ku=c("OP_RETURN data"),vo=u(),O=s("p"),du=c("Data in OP_RETURNs is commonly encoded by pushing the total number of bytes, followed by the data bytes. For example "),Qs=s("code"),hu=c("04"),fu=c(" followed by "),Zs=s("code"),mu=c("7574786f"),vu=c(" (4 bytes of in two letter hex). This format is used to \u201Cbroadcast\u201D \u20BF\u2219\u03D5 contracts."),yo=u(),Da=s("h3"),yu=c("Published"),bo=u(),pn=s("p"),bu=c("In the context of an unspent contract, a contract is published if the parameters to construct and spend it are recorded on the blockchain, either in an OP_RETURN or by reference to the spent output."),Eo=u(),ln=s("p"),Eu=c("A cashaddress locks value, the parameters of the contract allow unlocking the value."),_o=u(),Pa=s("h3"),_u=c("Unspent Transaction Output (UTXO)"),wo=u(),un=s("p"),wu=c("some value, defined by the output of a previous transaction, which is locked by some code, either the hash of a public key (cashaddr), or a script that, when executed, satisfies a locking code."),To=u(),rn=s("p"),Tu=c("The value may be zero, in the case of an OP_RETURN."),this.h()},l(t){U=e(t,"NAV",{class:!0});var l=o(U);N=e(l,"OL",{class:!0});var $s=o(N);Aa=e($s,"LI",{class:!0});var qu=o(Aa);pt=e(qu,"A",{class:!0,href:!0});var Ou=o(pt);zo=p(Ou,"Welcome!"),Ou.forEach(n),qu.forEach(n),lt=e($s,"LI",{class:!0});var xu=o(lt);it=e(xu,"A",{class:!0,href:!0});var Iu=o(it);Go=p(Iu,"Contract Types"),Iu.forEach(n),F=e(xu,"OL",{class:!0});var gs=o(F);Ba=e(gs,"LI",{class:!0});var Su=o(Ba);ut=e(Su,"A",{class:!0,href:!0});var Uu=o(ut);Yo=p(Uu,"Beneficiary Contracts"),Uu.forEach(n),Su.forEach(n),Ra=e(gs,"LI",{class:!0});var Nu=o(Ra);rt=e(Nu,"A",{class:!0,href:!0});var Fu=o(rt);Wo=p(Fu,"Distributive Contracts"),Fu.forEach(n),Nu.forEach(n),Ha=e(gs,"LI",{class:!0});var Vu=o(Ha);kt=e(Vu,"A",{class:!0,href:!0});var Mu=o(kt);Xo=p(Mu,"Informational Contracts"),Mu.forEach(n),Vu.forEach(n),La=e(gs,"LI",{class:!0});var zu=o(La);dt=e(zu,"A",{class:!0,href:!0});var Gu=o(dt);jo=p(Gu,"Timelock v non-timelocked"),Gu.forEach(n),zu.forEach(n),gs.forEach(n),xu.forEach(n),ht=e($s,"LI",{class:!0});var Du=o(ht);ft=e(Du,"A",{class:!0,href:!0});var Yu=o(ft);Ko=p(Yu,"Contracts"),Yu.forEach(n),b=e(Du,"OL",{class:!0});var Ca=o(b);qa=e(Ca,"LI",{class:!0});var Wu=o(qa);mt=e(Wu,"A",{class:!0,href:!0});var Xu=o(mt);Jo=p(Xu,"Annuity"),Xu.forEach(n),Wu.forEach(n),Oa=e(Ca,"LI",{class:!0});var ju=o(Oa);vt=e(ju,"A",{class:!0,href:!0});var Ku=o(vt);Qo=p(Ku,"Divide"),Ku.forEach(n),ju.forEach(n),Ia=e(Ca,"LI",{class:!0});var Ju=o(Ia);yt=e(Ju,"A",{class:!0,href:!0});var Qu=o(yt);Zo=p(Qu,"Faucet"),Qu.forEach(n),Ju.forEach(n),Sa=e(Ca,"LI",{class:!0});var Zu=o(Sa);bt=e(Zu,"A",{class:!0,href:!0});var $u=o(bt);$o=p($u,"Mine-able Faucet"),$u.forEach(n),Zu.forEach(n),Ua=e(Ca,"LI",{class:!0});var gu=o(Ua);Et=e(gu,"A",{class:!0,href:!0});var tr=o(Et);go=p(tr,"Perpetuity"),tr.forEach(n),gu.forEach(n),Na=e(Ca,"LI",{class:!0});var ar=o(Na);_t=e(ar,"A",{class:!0,href:!0});var nr=o(_t);tc=p(nr,"Record"),nr.forEach(n),ar.forEach(n),Ca.forEach(n),Du.forEach(n),wt=e($s,"LI",{class:!0});var Pu=o(wt);Tt=e(Pu,"A",{class:!0,href:!0});var sr=o(Tt);ac=p(sr,"Definitions"),sr.forEach(n),M=e(Pu,"OL",{class:!0});var xo=o(M);Fa=e(xo,"LI",{class:!0});var er=o(Fa);xt=e(er,"A",{class:!0,href:!0});var or=o(xt);nc=p(or,"Units"),or.forEach(n),er.forEach(n),Va=e(xo,"LI",{class:!0});var cr=o(Va);Dt=e(cr,"A",{class:!0,href:!0});var pr=o(Dt);sc=p(pr,"Languages"),pr.forEach(n),cr.forEach(n),Ma=e(xo,"LI",{class:!0});var lr=o(Ma);Pt=e(lr,"A",{class:!0,href:!0});var ir=o(Pt);ec=p(ir,"Script Components"),ir.forEach(n),lr.forEach(n),xo.forEach(n),Pu.forEach(n),$s.forEach(n),l.forEach(n),te=r(t),lh("svelte-2pc8sv",document.head).forEach(n),ae=r(t),Ct=e(t,"H1",{id:!0});var ur=o(Ct);oc=p(ur,"Welcome!"),ur.forEach(n),ne=r(t),za=e(t,"P",{});var rr=o(za);cc=p(rr,"Unspent Phi (\u20BF\u2219\u03D5) is an app for creating (and publishing) a set of simple contracts on the Bitcoin Cash (BCH) blockchain that anyone can execute. These contracts lock the value of unspent outputs from earlier transactions (UTXOs), and allow some small reward for any party to call a known contract (if valid according to the rules of BitcoinScript). Although simple, these contracts may be chained together to create complex outcomes."),rr.forEach(n),se=r(t),Ga=e(t,"P",{});var kr=o(Ga);pc=p(kr,"\u20BF\u2219\u03D5 contracts may be thought of as automata, machines that are unlocked and stepped forward by random participants on the blockchain. No one party has control, it\u2019s a race to spend them first. However, the code to unlock them must be known for the code to stepped forward. Money sent to \u20BF\u2219\u03D5 contracts appear identical to any other pay-to-script UTXOs on the network. Nothing is known about how to spend the contract until it is spent at least once, so in order for the contract to function automatically, both their existence and the parameters to unlock them must be known. While the code to unlock is broadcasted by spending the contract once, not all contracts can be spent right away, so it\u2019s easier and safer just to publish some unlock record and not worry about forgetting how to unlock them."),kr.forEach(n),ee=r(t),At=e(t,"H1",{id:!0});var dr=o(At);lc=p(dr,"Contract Types"),dr.forEach(n),oe=r(t),Ya=e(t,"P",{});var hr=o(Ya);ic=p(hr,"Each \u20BF\u2219\u03D5 contract is designed to do one thing. The contracts available (so far) are as follows:"),hr.forEach(n),ce=r(t),Bt=e(t,"H2",{id:!0});var fr=o(Bt);uc=p(fr,"Beneficiary Contracts"),fr.forEach(n),pe=r(t),Wa=e(t,"P",{});var mr=o(Wa);rc=p(mr,"Some contracts control value on behalf of the contract creator. They all have an executor allowance which can be claimed by the party which submits a valid spending transactions."),mr.forEach(n),le=r(t),z=e(t,"TABLE",{});var Do=o(z);yn=e(Do,"THEAD",{});var vr=o(yn);Rt=e(vr,"TR",{});var Po=o(Rt);bn=e(Po,"TH",{});var yr=o(bn);kc=p(yr,"Name"),yr.forEach(n),dc=r(Po),En=e(Po,"TH",{});var br=o(En);hc=p(br,"Description"),br.forEach(n),Po.forEach(n),vr.forEach(n),fc=r(Do),V=e(Do,"TBODY",{});var kn=o(V);Ht=e(kn,"TR",{});var Co=o(Ht);_n=e(Co,"TD",{});var Er=o(_n);mc=p(Er,"Annuity"),Er.forEach(n),vc=r(Co),wn=e(Co,"TD",{});var _r=o(wn);yc=p(_r,"Equal payments over time."),_r.forEach(n),Co.forEach(n),bc=r(kn),Lt=e(kn,"TR",{});var Ao=o(Lt);Tn=e(Ao,"TD",{});var wr=o(Tn);Ec=p(wr,"Divide"),wr.forEach(n),_c=r(Ao),xn=e(Ao,"TD",{});var Tr=o(xn);wc=p(Tr,"Divide money into equal payments, up to four addresses"),Tr.forEach(n),Ao.forEach(n),Tc=r(kn),qt=e(kn,"TR",{});var Bo=o(qt);Dn=e(Bo,"TD",{});var xr=o(Dn);xc=p(xr,"Perpetuity"),xr.forEach(n),Dc=r(Bo),Pn=e(Bo,"TD",{});var Dr=o(Pn);Pc=p(Dr,"Pay a fixed fraction of total value at intervals"),Dr.forEach(n),Bo.forEach(n),kn.forEach(n),Do.forEach(n),ie=r(t),Ot=e(t,"H2",{id:!0});var Pr=o(Ot);Cc=p(Pr,"Distributive Contracts"),Pr.forEach(n),ue=r(t),Xa=e(t,"P",{});var Cr=o(Xa);Ac=p(Cr,"Contracts with locked value that can be spent by anyone can be characterized as \u201Cfree\u201D. At present these include faucets, mining contracts."),Cr.forEach(n),re=r(t),G=e(t,"TABLE",{});var Ro=o(G);Cn=e(Ro,"THEAD",{});var Ar=o(Cn);It=e(Ar,"TR",{});var Ho=o(It);An=e(Ho,"TH",{});var Br=o(An);Bc=p(Br,"Name"),Br.forEach(n),Rc=r(Ho),Bn=e(Ho,"TH",{});var Rr=o(Bn);Hc=p(Rr,"Description"),Rr.forEach(n),Ho.forEach(n),Ar.forEach(n),Lc=r(Ro),St=e(Ro,"TBODY",{});var Lo=o(St);Ut=e(Lo,"TR",{});var qo=o(Ut);Rn=e(qo,"TD",{});var Hr=o(Rn);qc=p(Hr,"Faucet"),Hr.forEach(n),Oc=r(qo),Hn=e(qo,"TD",{});var Lr=o(Hn);Ic=p(Lr,"Distributes some free bitcoin per period"),Lr.forEach(n),qo.forEach(n),Sc=r(Lo),Nt=e(Lo,"TR",{});var Oo=o(Nt);Ln=e(Oo,"TD",{});var qr=o(Ln);Uc=p(qr,"Mine"),qr.forEach(n),Nc=r(Oo),qn=e(Oo,"TD",{});var Or=o(qn);Fc=p(Or,"Distributes some bitcoin per period, for proof of work"),Or.forEach(n),Oo.forEach(n),Lo.forEach(n),Ro.forEach(n),ke=r(t),Ft=e(t,"H2",{id:!0});var Ir=o(Ft);Vc=p(Ir,"Informational Contracts"),Ir.forEach(n),de=r(t),ja=e(t,"P",{});var Sr=o(ja);Mc=p(Sr,"A contract providing the facility to record data for free."),Sr.forEach(n),he=r(t),Y=e(t,"TABLE",{});var Io=o(Y);On=e(Io,"THEAD",{});var Ur=o(On);Vt=e(Ur,"TR",{});var So=o(Vt);In=e(So,"TH",{});var Nr=o(In);zc=p(Nr,"Name"),Nr.forEach(n),Gc=r(So),Sn=e(So,"TH",{});var Fr=o(Sn);Yc=p(Fr,"Description"),Fr.forEach(n),So.forEach(n),Ur.forEach(n),Wc=r(Io),Un=e(Io,"TBODY",{});var Vr=o(Un);Mt=e(Vr,"TR",{});var Uo=o(Mt);Nn=e(Uo,"TD",{});var Mr=o(Nn);Xc=p(Mr,"Record"),Mr.forEach(n),jc=r(Uo),Fn=e(Uo,"TD",{});var zr=o(Fn);Kc=p(zr,"Broadcast a contract to the blockchain"),zr.forEach(n),Uo.forEach(n),Vr.forEach(n),Io.forEach(n),fe=r(t),zt=e(t,"H2",{id:!0});var Gr=o(zt);Jc=p(Gr,"Timelock v non-timelocked"),Gr.forEach(n),me=r(t),Gt=e(t,"P",{});var Cu=o(Gt);Qc=p(Cu,"Contracts in BitcoinScript may be locked using "),Yt=e(Cu,"A",{href:!0,rel:!0});var Yr=o(Yt);Zc=p(Yr,"BIP68"),Yr.forEach(n),Cu.forEach(n),ve=r(t),Ka=e(t,"P",{});var Wr=o(Ka);$c=p(Wr,"The Divide and Record contracts are not time-locked, they may be called at anytime."),Wr.forEach(n),ye=r(t),Wt=e(t,"H1",{id:!0});var Xr=o(Wt);gc=p(Xr,"Contracts"),Xr.forEach(n),be=r(t),Xt=e(t,"H2",{id:!0});var jr=o(Xt);tp=p(jr,"Annuity"),jr.forEach(n),Ee=r(t),Ja=e(t,"P",{});var Kr=o(Ja);ap=p(Kr,"The annuity contract pays a fixed amount (in satoshis) to a predefined locking bytecode (i.e. address)."),Kr.forEach(n),_e=r(t),f=e(t,"P",{});var I=o(f);np=p(I,"To prevent the contract from being called successively (thus paying out all at once), a timelock is added restricting input be of a certain age (in blocks), this parameter is called the "),Vn=e(I,"CODE",{});var Jr=o(Vn);sp=p(Jr,"period"),Jr.forEach(n),ep=p(I,". The beneficiary address (or contract) is denoted by the "),Mn=e(I,"CODE",{});var Qr=o(Mn);op=p(Qr,"recipientLockingBytecode"),Qr.forEach(n),cp=p(I,". The amount paid in each period is the "),zn=e(I,"CODE",{});var Zr=o(zn);pp=p(Zr,"installment"),Zr.forEach(n),lp=p(I,". To aid in execution, a small fee is left as "),Gn=e(I,"CODE",{});var $r=o(Gn);ip=p($r,"executorAllowance"),$r.forEach(n),up=p(I," for each execution of the contract, it may be paid to anyone."),I.forEach(n),we=r(t),Qa=e(t,"P",{});var gr=o(Qa);rp=p(gr,"This contract: checks that the first output pays to the beneficiary; checks that the timelock is satisfied; checks that the second output pays back to the contract; gets the total value being spent; calculates the amount to be returned, and finally, checks that both the installment amount of the first output & the total returned to the contract exceed the required amounts."),gr.forEach(n),Te=r(t),jt=e(t,"PRE",{class:!0});var gd=o(jt);gd.forEach(n),xe=r(t),Kt=e(t,"H2",{id:!0});var tk=o(Kt);kp=p(tk,"Divide"),tk.forEach(n),De=r(t),Za=e(t,"P",{});var ak=o(Za);dp=p(ak,"The divide contract splits inputs across a predefined set of output destinations."),ak.forEach(n),Pe=r(t),m=e(t,"P",{});var S=o(m);hp=p(S,"Each output is denoted by "),Yn=e(S,"CODE",{});var nk=o(Yn);fp=p(nk,"r#LockingBytecode"),nk.forEach(n),mp=p(S,", where "),Wn=e(S,"CODE",{});var sk=o(Wn);vp=p(sk,"#"),sk.forEach(n),yp=p(S," is the index of the output. Since early BitcoinScript did not have loops, this contract was written with a static list of outputs and a "),Xn=e(S,"CODE",{});var ek=o(Xn);bp=p(ek,"divisor"),ek.forEach(n),Ep=p(S,", which is simply the number of outputs. An "),jn=e(S,"CODE",{});var ok=o(jn);_p=p(ok,"executorAllowance"),ok.forEach(n),wp=p(S," amount is subtracted from the total distribution amount, which may be spent by anyone as long as the amount payed to the hardcoded receipts equals or exceeds the alloted share."),S.forEach(n),Ce=r(t),W=e(t,"P",{});var No=o(W);Tp=p(No,"This contract: checks that each of the output destinations match the predefined output; calculates the total value on the contract; calculates the amount to be paid to each receipt ("),Kn=e(No,"CODE",{});var ck=o(Kn);xp=p(ck,"distribution"),ck.forEach(n),Dp=p(No,"), and finally calculates that each receipt receives an output greater than, or equal to, the distribution amount."),No.forEach(n),Ae=r(t),Jt=e(t,"PRE",{class:!0});var th=o(Jt);th.forEach(n),Be=r(t),Qt=e(t,"H2",{id:!0});var pk=o(Qt);Pp=p(pk,"Faucet"),pk.forEach(n),Re=r(t),$a=e(t,"P",{});var lk=o($a);Cp=p(lk,"The faucet contract pays \u201Cfree\u201D bitcoin."),lk.forEach(n),He=r(t),v=e(t,"P",{});var J=o(v);Ap=p(J,"To prevent the faucet from being drained by successive calls, a "),Jn=e(J,"CODE",{});var ik=o(Jn);Bp=p(ik,"period"),ik.forEach(n),Rp=p(J," timeout is set to specify the minimum age of the input being spent. The amount available to be spent is defined by a "),Qn=e(J,"CODE",{});var uk=o(Qn);Hp=p(uk,"payout"),uk.forEach(n),Lp=p(J,". As a convenience, and to have multiple faucets with the same payout, an "),Zn=e(J,"CODE",{});var rk=o(Zn);qp=p(rk,"index"),rk.forEach(n),Op=p(J," parameter is added to distinguish identical contracts."),J.forEach(n),Le=r(t),R=e(t,"P",{});var dn=o(R);Ip=p(dn,"The steps of this contract are as follows: first, it requires that the transaction be called with an age that is greater than the current "),$n=e(dn,"CODE",{});var kk=o($n);Sp=p(kk,"period"),kk.forEach(n),Up=p(dn,"; the "),gn=e(dn,"CODE",{});var dk=o(gn);Np=p(dk,"index"),dk.forEach(n),Fp=p(dn," is used so that it is not unused; next the first output must return all value to the faucet contract, and finally the returned value is calculate and must be returned to the faucet if the current value exceeds the payout."),dn.forEach(n),qe=r(t),Zt=e(t,"PRE",{class:!0});var ah=o(Zt);ah.forEach(n),Oe=r(t),$t=e(t,"H2",{id:!0});var hk=o($t);Vp=p(hk,"Mine-able Faucet"),hk.forEach(n),Ie=r(t),ga=e(t,"P",{});var fk=o(ga);Mp=p(fk,"The \u20BF\u2219\u03D5 mining covenant is very much like the faucet, with some additional requirements."),fk.forEach(n),Se=r(t),H=e(t,"P",{});var hn=o(H);zp=p(hn,"First, execution of the contract must be called with a "),ts=e(hn,"CODE",{});var mk=o(ts);Gp=p(mk,"nonce"),mk.forEach(n),Yp=p(hn,` [a random value used once]
which when added to the current locking bytecode and hashed results in a value starting with some number of zeros.
How many zeros is the `),as=e(hn,"CODE",{});var vk=o(as);Wp=p(vk,"difficulty"),vk.forEach(n),Xp=p(hn,"."),hn.forEach(n),Ue=r(t),y=e(t,"P",{});var Q=o(y);jp=p(Q,"Finally, prior to spending the the mining "),ns=e(Q,"CODE",{});var yk=o(ns);Kp=p(yk,"payout"),yk.forEach(n),Jp=p(Q,`, the spender must announce
the winning `),ss=e(Q,"CODE",{});var bk=o(ss);Qp=p(bk,"nonce"),bk.forEach(n),Zp=p(Q," in an OP_RETURN of the first output, and send the balance of the contract to a new mining covenant with the new nonce as a "),es=e(Q,"CODE",{});var Ek=o(es);$p=p(Ek,"canary"),Ek.forEach(n),gp=p(Q,"."),Q.forEach(n),Ne=r(t),gt=e(t,"P",{});var Au=o(gt);ta=e(Au,"IMG",{src:!0,alt:!0,title:!0}),tl=p(Au,`
Like an infinite series of Failures to Deliver (FTDs) for a stock, or banging forex futures to manipulate an outcome in currency markets, the canary is always brought back to life with a new copy of itself. You don\u2019t have to take over a whole blockchain to create a market for your energy, just mine a covenant\u2014there will be far less idiosyncratic risk.`),Au.forEach(n),Fe=r(t),aa=e(t,"PRE",{class:!0});var nh=o(aa);nh.forEach(n),Ve=r(t),na=e(t,"H2",{id:!0});var _k=o(na);al=p(_k,"Perpetuity"),_k.forEach(n),Me=r(t),tn=e(t,"P",{});var wk=o(tn);nl=p(wk,"The Perpetuity contract works like an Annuity, however rather than pay a fixed amount, a fixed fraction of the total is paid each period."),wk.forEach(n),ze=r(t),L=e(t,"P",{});var fn=o(L);sl=p(fn,"The fraction paid is determined by the "),os=e(fn,"CODE",{});var Tk=o(os);el=p(Tk,"decay"),Tk.forEach(n),ol=p(fn," parameter. If a "),cs=e(fn,"CODE",{});var xk=o(cs);cl=p(xk,"decay"),xk.forEach(n),pl=p(fn," of 10 is specified, then one tenth the value is paid each period."),fn.forEach(n),Ge=r(t),sa=e(t,"PRE",{class:!0});var sh=o(sa);sh.forEach(n),Ye=r(t),ea=e(t,"H2",{id:!0});var Dk=o(ea);ll=p(Dk,"Record"),Dk.forEach(n),We=r(t),an=e(t,"P",{});var Pk=o(an);il=p(Pk,"A utility function to broadcast new contracts as OP_RETURN messages."),Pk.forEach(n),Xe=r(t),oa=e(t,"PRE",{class:!0});var eh=o(oa);eh.forEach(n),je=r(t),ca=e(t,"H1",{id:!0});var Ck=o(ca);ul=p(Ck,"Definitions"),Ck.forEach(n),Ke=r(t),pa=e(t,"H2",{id:!0});var Ak=o(pa);rl=p(Ak,"Units"),Ak.forEach(n),Je=r(t),X=e(t,"P",{});var Fo=o(X);kl=p(Fo,"bitcoin has it\u2019s own units of value and time. Although there are whole coins and it\u2019s possible to use epoch time (seconds since 1970) in some cases, we\u2019ll stick to two here to steer clear of the politics surrounding \u201Cleap seconds\u201D and what is a "),ps=e(Fo,"EM",{});var Bk=o(ps);dl=p(Bk,"unit of account"),Bk.forEach(n),hl=p(Fo,"."),Fo.forEach(n),Qe=r(t),la=e(t,"H3",{id:!0});var Rk=o(la);fl=p(Rk,"satoshis"),Rk.forEach(n),Ze=r(t),nn=e(t,"P",{});var Hk=o(nn);ml=p(Hk,"A unit of account (on the Bitcoin Cash fork of the initial bitcoin blockchain). A hundred million satoshi are equal to 1 Bitcoin Cash."),Hk.forEach(n),$e=r(t),ia=e(t,"H3",{id:!0});var Lk=o(ia);vl=p(Lk,"blocks (time)"),Lk.forEach(n),ge=r(t),sn=e(t,"P",{});var qk=o(sn);yl=p(qk,"The base unit of time on bitcoin is called a block, blocktimes very, but are about 10 minutes on average."),qk.forEach(n),to=r(t),j=e(t,"TABLE",{});var Vo=o(j);ls=e(Vo,"THEAD",{});var Ok=o(ls);E=e(Ok,"TR",{});var Z=o(E);is=e(Z,"TH",{});var Ik=o(is);bl=p(Ik,"Blocks"),Ik.forEach(n),El=r(Z),us=e(Z,"TH",{});var Sk=o(us);_l=p(Sk,"Minutes"),Sk.forEach(n),wl=r(Z),rs=e(Z,"TH",{});var Uk=o(rs);Tl=p(Uk,"Days"),Uk.forEach(n),xl=r(Z),ks=e(Z,"TH",{});var Nk=o(ks);Dl=p(Nk,"Years"),Nk.forEach(n),Z.forEach(n),Ok.forEach(n),Pl=r(Vo),d=e(Vo,"TBODY",{});var h=o(d);_=e(h,"TR",{});var $=o(_);ds=e($,"TD",{});var Fk=o(ds);Cl=p(Fk,"1"),Fk.forEach(n),Al=r($),hs=e($,"TD",{});var Vk=o(hs);Bl=p(Vk,"10"),Vk.forEach(n),Rl=r($),fs=e($,"TD",{});var Mk=o(fs);Hl=p(Mk,"-"),Mk.forEach(n),Ll=r($),ms=e($,"TD",{});var zk=o(ms);ql=p(zk,"-"),zk.forEach(n),$.forEach(n),Ol=r(h),w=e(h,"TR",{});var g=o(w);vs=e(g,"TD",{});var Gk=o(vs);Il=p(Gk,"10"),Gk.forEach(n),Sl=r(g),ys=e(g,"TD",{});var Yk=o(ys);Ul=p(Yk,"100"),Yk.forEach(n),Nl=r(g),bs=e(g,"TD",{});var Wk=o(bs);Fl=p(Wk,"-"),Wk.forEach(n),Vl=r(g),Es=e(g,"TD",{});var Xk=o(Es);Ml=p(Xk,"-"),Xk.forEach(n),g.forEach(n),zl=r(h),T=e(h,"TR",{});var tt=o(T);_s=e(tt,"TD",{});var jk=o(_s);Gl=p(jk,"100"),jk.forEach(n),Yl=r(tt),ws=e(tt,"TD",{});var Kk=o(ws);Wl=p(Kk,"1000"),Kk.forEach(n),Xl=r(tt),Ts=e(tt,"TD",{});var Jk=o(Ts);jl=p(Jk,"0.694"),Jk.forEach(n),Kl=r(tt),xs=e(tt,"TD",{});var Qk=o(xs);Jl=p(Qk,"-"),Qk.forEach(n),tt.forEach(n),Ql=r(h),x=e(h,"TR",{});var at=o(x);Ds=e(at,"TD",{});var Zk=o(Ds);Zl=p(Zk,"144"),Zk.forEach(n),$l=r(at),Ps=e(at,"TD",{});var $k=o(Ps);gl=p($k,"1440"),$k.forEach(n),ti=r(at),Cs=e(at,"TD",{});var gk=o(Cs);ai=p(gk,"1"),gk.forEach(n),ni=r(at),As=e(at,"TD",{});var td=o(As);si=p(td,"-"),td.forEach(n),at.forEach(n),ei=r(h),D=e(h,"TR",{});var nt=o(D);Bs=e(nt,"TD",{});var ad=o(Bs);oi=p(ad,"1000"),ad.forEach(n),ci=r(nt),Rs=e(nt,"TD",{});var nd=o(Rs);pi=p(nd,"-"),nd.forEach(n),li=r(nt),Hs=e(nt,"TD",{});var sd=o(Hs);ii=p(sd,"6.94"),sd.forEach(n),ui=r(nt),Ls=e(nt,"TD",{});var ed=o(Ls);ri=p(ed,"-"),ed.forEach(n),nt.forEach(n),ki=r(h),P=e(h,"TR",{});var st=o(P);qs=e(st,"TD",{});var od=o(qs);di=p(od,"4000"),od.forEach(n),hi=r(st),Os=e(st,"TD",{});var cd=o(Os);fi=p(cd,"-"),cd.forEach(n),mi=r(st),Is=e(st,"TD",{});var pd=o(Is);vi=p(pd,"27.7"),pd.forEach(n),yi=r(st),Ss=e(st,"TD",{});var ld=o(Ss);bi=p(ld,"-"),ld.forEach(n),st.forEach(n),Ei=r(h),C=e(h,"TR",{});var et=o(C);Us=e(et,"TD",{});var id=o(Us);_i=p(id,"13140"),id.forEach(n),wi=r(et),Ns=e(et,"TD",{});var ud=o(Ns);Ti=p(ud,"-"),ud.forEach(n),xi=r(et),Fs=e(et,"TD",{});var rd=o(Fs);Di=p(rd,"91.25"),rd.forEach(n),Pi=r(et),Vs=e(et,"TD",{});var kd=o(Vs);Ci=p(kd,"0.249"),kd.forEach(n),et.forEach(n),Ai=r(h),A=e(h,"TR",{});var ot=o(A);Ms=e(ot,"TD",{});var dd=o(Ms);Bi=p(dd,"26280"),dd.forEach(n),Ri=r(ot),zs=e(ot,"TD",{});var hd=o(zs);Hi=p(hd,"-"),hd.forEach(n),Li=r(ot),Gs=e(ot,"TD",{});var fd=o(Gs);qi=p(fd,"-"),fd.forEach(n),Oi=r(ot),Ys=e(ot,"TD",{});var md=o(Ys);Ii=p(md,"0.499"),md.forEach(n),ot.forEach(n),Si=r(h),B=e(h,"TR",{});var ct=o(B);Ws=e(ct,"TD",{});var vd=o(Ws);Ui=p(vd,"52560"),vd.forEach(n),Ni=r(ct),Xs=e(ct,"TD",{});var yd=o(Xs);Fi=p(yd,"-"),yd.forEach(n),Vi=r(ct),js=e(ct,"TD",{});var bd=o(js);Mi=p(bd,"-"),bd.forEach(n),zi=r(ct),Ks=e(ct,"TD",{});var Ed=o(Ks);Gi=p(Ed,"0.999"),Ed.forEach(n),ct.forEach(n),h.forEach(n),Vo.forEach(n),ao=r(t),q=e(t,"P",{});var mn=o(q);Yi=p(mn,"The largest value specified by the timelock upgrade "),ua=e(mn,"A",{href:!0,rel:!0});var _d=o(ua);Wi=p(_d,"(BIP68)"),_d.forEach(n),Xi=p(mn," is a 16-bit value. Contracts with locking periods larger than the maximum value (65536) have "),Js=e(mn,"STRONG",{});var wd=o(Js);ji=p(wd,"not"),wd.forEach(n),Ki=p(mn," been tested, and should not be expected to work."),mn.forEach(n),no=r(t),ra=e(t,"H2",{id:!0});var Td=o(ra);Ji=p(Td,"Languages"),Td.forEach(n),so=r(t),ka=e(t,"H3",{id:!0});var xd=o(ka);Qi=p(xd,"BitcoinScript"),xd.forEach(n),eo=r(t),K=e(t,"P",{});var Mo=o(K);Zi=p(Mo,"A procedural, stack-oriented programming language (Forth-like) with different rules and operations. In practice, it is "),da=e(Mo,"A",{href:!0,rel:!0});var Dd=o(da);$i=p(Dd,"Script"),Dd.forEach(n),gi=p(Mo," that mostly unlocks value on a bitcoin network."),Mo.forEach(n),oo=r(t),ha=e(t,"H3",{id:!0});var Pd=o(ha);tu=p(Pd,"CashScript"),Pd.forEach(n),co=r(t),fa=e(t,"P",{});var Bu=o(fa);ma=e(Bu,"A",{href:!0,rel:!0});var Cd=o(ma);au=p(Cd,"CashScript is a high-level programming language for smart contracts on Bitcoin Cash"),Cd.forEach(n),nu=p(Bu," that transpiles to BitcoinScript."),Bu.forEach(n),po=r(t),va=e(t,"H2",{id:!0});var Ad=o(va);su=p(Ad,"Script Components"),Ad.forEach(n),lo=r(t),ya=e(t,"H3",{id:!0});var Bd=o(ya);eu=p(Bd,"Unlocking Script"),Bd.forEach(n),io=r(t),ba=e(t,"P",{});var Ru=o(ba);ou=p(Ru,`Code that is run before running the unlocking code. If execution doesn\u2019t trigger failures and leaves a single non-zero value, it is considered unlocked.
`),Ea=e(Ru,"A",{href:!0,rel:!0});var Rd=o(Ea);cu=p(Rd,"More"),Rd.forEach(n),Ru.forEach(n),uo=r(t),_a=e(t,"H3",{id:!0});var Hd=o(_a);pu=p(Hd,"Locking Script"),Hd.forEach(n),ro=r(t),en=e(t,"P",{});var Ld=o(en);lu=p(Ld,"At present (Nov 2022), there are two types of unlocking script (actually 4). P2PKH (pay-to-publicKeyHash), which pays to the hash of a public key. And Pay to Script (P2PSH) which pay to an unlocking script hash."),Ld.forEach(n),ko=r(t),on=e(t,"P",{});var qd=o(on);wa=e(qd,"A",{href:!0,rel:!0});var Od=o(wa);iu=p(Od,"More info"),Od.forEach(n),qd.forEach(n),ho=r(t),Ta=e(t,"H3",{id:!0});var Id=o(Ta);uu=p(Id,"OP_RETURN"),Id.forEach(n),fo=r(t),cn=e(t,"P",{});var Sd=o(cn);ru=p(Sd,"A code (106) in BitcoinScript for transaction outputs which can store arbitrary data."),Sd.forEach(n),mo=r(t),xa=e(t,"H3",{id:!0});var Ud=o(xa);ku=p(Ud,"OP_RETURN data"),Ud.forEach(n),vo=r(t),O=e(t,"P",{});var vn=o(O);du=p(vn,"Data in OP_RETURNs is commonly encoded by pushing the total number of bytes, followed by the data bytes. For example "),Qs=e(vn,"CODE",{});var Nd=o(Qs);hu=p(Nd,"04"),Nd.forEach(n),fu=p(vn," followed by "),Zs=e(vn,"CODE",{});var Fd=o(Zs);mu=p(Fd,"7574786f"),Fd.forEach(n),vu=p(vn," (4 bytes of in two letter hex). This format is used to \u201Cbroadcast\u201D \u20BF\u2219\u03D5 contracts."),vn.forEach(n),yo=r(t),Da=e(t,"H3",{id:!0});var Vd=o(Da);yu=p(Vd,"Published"),Vd.forEach(n),bo=r(t),pn=e(t,"P",{});var Md=o(pn);bu=p(Md,"In the context of an unspent contract, a contract is published if the parameters to construct and spend it are recorded on the blockchain, either in an OP_RETURN or by reference to the spent output."),Md.forEach(n),Eo=r(t),ln=e(t,"P",{});var zd=o(ln);Eu=p(zd,"A cashaddress locks value, the parameters of the contract allow unlocking the value."),zd.forEach(n),_o=r(t),Pa=e(t,"H3",{id:!0});var Gd=o(Pa);_u=p(Gd,"Unspent Transaction Output (UTXO)"),Gd.forEach(n),wo=r(t),un=e(t,"P",{});var Yd=o(un);wu=p(Yd,"some value, defined by the output of a previous transaction, which is locked by some code, either the hash of a public key (cashaddr), or a script that, when executed, satisfies a locking code."),Yd.forEach(n),To=r(t),rn=e(t,"P",{});var Wd=o(rn);Tu=p(Wd,"The value may be zero, in the case of an OP_RETURN."),Wd.forEach(n),this.h()},h(){k(pt,"class","toc-link toc-link-h1"),k(pt,"href","#welcome"),k(Aa,"class","toc-item toc-item-h1"),k(it,"class","toc-link toc-link-h1"),k(it,"href","#contract-types"),k(ut,"class","toc-link toc-link-h2"),k(ut,"href","#beneficiary-contracts"),k(Ba,"class","toc-item toc-item-h2"),k(rt,"class","toc-link toc-link-h2"),k(rt,"href","#distributive-contracts"),k(Ra,"class","toc-item toc-item-h2"),k(kt,"class","toc-link toc-link-h2"),k(kt,"href","#informational-contracts"),k(Ha,"class","toc-item toc-item-h2"),k(dt,"class","toc-link toc-link-h2"),k(dt,"href","#timelock-v-non-timelocked"),k(La,"class","toc-item toc-item-h2"),k(F,"class","toc-level toc-level-2"),k(lt,"class","toc-item toc-item-h1"),k(ft,"class","toc-link toc-link-h1"),k(ft,"href","#contracts"),k(mt,"class","toc-link toc-link-h2"),k(mt,"href","#annuity"),k(qa,"class","toc-item toc-item-h2"),k(vt,"class","toc-link toc-link-h2"),k(vt,"href","#divide"),k(Oa,"class","toc-item toc-item-h2"),k(yt,"class","toc-link toc-link-h2"),k(yt,"href","#faucet"),k(Ia,"class","toc-item toc-item-h2"),k(bt,"class","toc-link toc-link-h2"),k(bt,"href","#mine-able-faucet"),k(Sa,"class","toc-item toc-item-h2"),k(Et,"class","toc-link toc-link-h2"),k(Et,"href","#perpetuity"),k(Ua,"class","toc-item toc-item-h2"),k(_t,"class","toc-link toc-link-h2"),k(_t,"href","#record"),k(Na,"class","toc-item toc-item-h2"),k(b,"class","toc-level toc-level-2"),k(ht,"class","toc-item toc-item-h1"),k(Tt,"class","toc-link toc-link-h1"),k(Tt,"href","#definitions"),k(xt,"class","toc-link toc-link-h2"),k(xt,"href","#units"),k(Fa,"class","toc-item toc-item-h2"),k(Dt,"class","toc-link toc-link-h2"),k(Dt,"href","#languages"),k(Va,"class","toc-item toc-item-h2"),k(Pt,"class","toc-link toc-link-h2"),k(Pt,"href","#script-components"),k(Ma,"class","toc-item toc-item-h2"),k(M,"class","toc-level toc-level-2"),k(wt,"class","toc-item toc-item-h1"),k(N,"class","toc-level toc-level-1"),k(U,"class","toc"),document.title="Unspent Phi",k(Ct,"id","welcome"),k(At,"id","contract-types"),k(Bt,"id","beneficiary-contracts"),k(Ot,"id","distributive-contracts"),k(Ft,"id","informational-contracts"),k(zt,"id","timelock-v-non-timelocked"),k(Yt,"href","https://reference.cash/protocol/forks/bip-0068"),k(Yt,"rel","nofollow"),k(Wt,"id","contracts"),k(Xt,"id","annuity"),k(jt,"class","language-solidity"),k(Kt,"id","divide"),k(Jt,"class","language-solidity"),k(Qt,"id","faucet"),k(Zt,"class","language-solidity"),k($t,"id","mine-able-faucet"),ih(ta.src,Lu="images/canary.jpeg")||k(ta,"src",Lu),k(ta,"alt","Replace the canary"),k(ta,"title","Look, see, he's alright. He's fine."),k(aa,"class","language-solidity"),k(na,"id","perpetuity"),k(sa,"class","language-solidity"),k(ea,"id","record"),k(oa,"class","language-solidity"),k(ca,"id","definitions"),k(pa,"id","units"),k(la,"id","satoshis"),k(ia,"id","blocks-time"),k(ua,"href","https://reference.cash/protocol/forks/bip-0068"),k(ua,"rel","nofollow"),k(ra,"id","languages"),k(ka,"id","bitcoinscript"),k(da,"href","https://reference.cash/protocol/blockchain/script"),k(da,"rel","nofollow"),k(ha,"id","cashscript"),k(ma,"href","https://cashscript.org/docs/basics/about"),k(ma,"rel","nofollow"),k(va,"id","script-components"),k(ya,"id","unlocking-script"),k(Ea,"href","https://reference.cash/protocol/blockchain/transaction/unlocking-script"),k(Ea,"rel","nofollow"),k(_a,"id","locking-script"),k(wa,"href","https://reference.cash/protocol/blockchain/transaction/locking-script"),k(wa,"rel","nofollow"),k(Ta,"id","op_return"),k(xa,"id","op_return-data"),k(Da,"id","published"),k(Pa,"id","unspent-transaction-output-utxo")},m(t,l){i(t,U,l),a(U,N),a(N,Aa),a(Aa,pt),a(pt,zo),a(N,lt),a(lt,it),a(it,Go),a(lt,F),a(F,Ba),a(Ba,ut),a(ut,Yo),a(F,Ra),a(Ra,rt),a(rt,Wo),a(F,Ha),a(Ha,kt),a(kt,Xo),a(F,La),a(La,dt),a(dt,jo),a(N,ht),a(ht,ft),a(ft,Ko),a(ht,b),a(b,qa),a(qa,mt),a(mt,Jo),a(b,Oa),a(Oa,vt),a(vt,Qo),a(b,Ia),a(Ia,yt),a(yt,Zo),a(b,Sa),a(Sa,bt),a(bt,$o),a(b,Ua),a(Ua,Et),a(Et,go),a(b,Na),a(Na,_t),a(_t,tc),a(N,wt),a(wt,Tt),a(Tt,ac),a(wt,M),a(M,Fa),a(Fa,xt),a(xt,nc),a(M,Va),a(Va,Dt),a(Dt,sc),a(M,Ma),a(Ma,Pt),a(Pt,ec),i(t,te,l),i(t,ae,l),i(t,Ct,l),a(Ct,oc),i(t,ne,l),i(t,za,l),a(za,cc),i(t,se,l),i(t,Ga,l),a(Ga,pc),i(t,ee,l),i(t,At,l),a(At,lc),i(t,oe,l),i(t,Ya,l),a(Ya,ic),i(t,ce,l),i(t,Bt,l),a(Bt,uc),i(t,pe,l),i(t,Wa,l),a(Wa,rc),i(t,le,l),i(t,z,l),a(z,yn),a(yn,Rt),a(Rt,bn),a(bn,kc),a(Rt,dc),a(Rt,En),a(En,hc),a(z,fc),a(z,V),a(V,Ht),a(Ht,_n),a(_n,mc),a(Ht,vc),a(Ht,wn),a(wn,yc),a(V,bc),a(V,Lt),a(Lt,Tn),a(Tn,Ec),a(Lt,_c),a(Lt,xn),a(xn,wc),a(V,Tc),a(V,qt),a(qt,Dn),a(Dn,xc),a(qt,Dc),a(qt,Pn),a(Pn,Pc),i(t,ie,l),i(t,Ot,l),a(Ot,Cc),i(t,ue,l),i(t,Xa,l),a(Xa,Ac),i(t,re,l),i(t,G,l),a(G,Cn),a(Cn,It),a(It,An),a(An,Bc),a(It,Rc),a(It,Bn),a(Bn,Hc),a(G,Lc),a(G,St),a(St,Ut),a(Ut,Rn),a(Rn,qc),a(Ut,Oc),a(Ut,Hn),a(Hn,Ic),a(St,Sc),a(St,Nt),a(Nt,Ln),a(Ln,Uc),a(Nt,Nc),a(Nt,qn),a(qn,Fc),i(t,ke,l),i(t,Ft,l),a(Ft,Vc),i(t,de,l),i(t,ja,l),a(ja,Mc),i(t,he,l),i(t,Y,l),a(Y,On),a(On,Vt),a(Vt,In),a(In,zc),a(Vt,Gc),a(Vt,Sn),a(Sn,Yc),a(Y,Wc),a(Y,Un),a(Un,Mt),a(Mt,Nn),a(Nn,Xc),a(Mt,jc),a(Mt,Fn),a(Fn,Kc),i(t,fe,l),i(t,zt,l),a(zt,Jc),i(t,me,l),i(t,Gt,l),a(Gt,Qc),a(Gt,Yt),a(Yt,Zc),i(t,ve,l),i(t,Ka,l),a(Ka,$c),i(t,ye,l),i(t,Wt,l),a(Wt,gc),i(t,be,l),i(t,Xt,l),a(Xt,tp),i(t,Ee,l),i(t,Ja,l),a(Ja,ap),i(t,_e,l),i(t,f,l),a(f,np),a(f,Vn),a(Vn,sp),a(f,ep),a(f,Mn),a(Mn,op),a(f,cp),a(f,zn),a(zn,pp),a(f,lp),a(f,Gn),a(Gn,ip),a(f,up),i(t,we,l),i(t,Qa,l),a(Qa,rp),i(t,Te,l),i(t,jt,l),jt.innerHTML=jd,i(t,xe,l),i(t,Kt,l),a(Kt,kp),i(t,De,l),i(t,Za,l),a(Za,dp),i(t,Pe,l),i(t,m,l),a(m,hp),a(m,Yn),a(Yn,fp),a(m,mp),a(m,Wn),a(Wn,vp),a(m,yp),a(m,Xn),a(Xn,bp),a(m,Ep),a(m,jn),a(jn,_p),a(m,wp),i(t,Ce,l),i(t,W,l),a(W,Tp),a(W,Kn),a(Kn,xp),a(W,Dp),i(t,Ae,l),i(t,Jt,l),Jt.innerHTML=Kd,i(t,Be,l),i(t,Qt,l),a(Qt,Pp),i(t,Re,l),i(t,$a,l),a($a,Cp),i(t,He,l),i(t,v,l),a(v,Ap),a(v,Jn),a(Jn,Bp),a(v,Rp),a(v,Qn),a(Qn,Hp),a(v,Lp),a(v,Zn),a(Zn,qp),a(v,Op),i(t,Le,l),i(t,R,l),a(R,Ip),a(R,$n),a($n,Sp),a(R,Up),a(R,gn),a(gn,Np),a(R,Fp),i(t,qe,l),i(t,Zt,l),Zt.innerHTML=Jd,i(t,Oe,l),i(t,$t,l),a($t,Vp),i(t,Ie,l),i(t,ga,l),a(ga,Mp),i(t,Se,l),i(t,H,l),a(H,zp),a(H,ts),a(ts,Gp),a(H,Yp),a(H,as),a(as,Wp),a(H,Xp),i(t,Ue,l),i(t,y,l),a(y,jp),a(y,ns),a(ns,Kp),a(y,Jp),a(y,ss),a(ss,Qp),a(y,Zp),a(y,es),a(es,$p),a(y,gp),i(t,Ne,l),i(t,gt,l),a(gt,ta),a(gt,tl),i(t,Fe,l),i(t,aa,l),aa.innerHTML=Qd,i(t,Ve,l),i(t,na,l),a(na,al),i(t,Me,l),i(t,tn,l),a(tn,nl),i(t,ze,l),i(t,L,l),a(L,sl),a(L,os),a(os,el),a(L,ol),a(L,cs),a(cs,cl),a(L,pl),i(t,Ge,l),i(t,sa,l),sa.innerHTML=Zd,i(t,Ye,l),i(t,ea,l),a(ea,ll),i(t,We,l),i(t,an,l),a(an,il),i(t,Xe,l),i(t,oa,l),oa.innerHTML=$d,i(t,je,l),i(t,ca,l),a(ca,ul),i(t,Ke,l),i(t,pa,l),a(pa,rl),i(t,Je,l),i(t,X,l),a(X,kl),a(X,ps),a(ps,dl),a(X,hl),i(t,Qe,l),i(t,la,l),a(la,fl),i(t,Ze,l),i(t,nn,l),a(nn,ml),i(t,$e,l),i(t,ia,l),a(ia,vl),i(t,ge,l),i(t,sn,l),a(sn,yl),i(t,to,l),i(t,j,l),a(j,ls),a(ls,E),a(E,is),a(is,bl),a(E,El),a(E,us),a(us,_l),a(E,wl),a(E,rs),a(rs,Tl),a(E,xl),a(E,ks),a(ks,Dl),a(j,Pl),a(j,d),a(d,_),a(_,ds),a(ds,Cl),a(_,Al),a(_,hs),a(hs,Bl),a(_,Rl),a(_,fs),a(fs,Hl),a(_,Ll),a(_,ms),a(ms,ql),a(d,Ol),a(d,w),a(w,vs),a(vs,Il),a(w,Sl),a(w,ys),a(ys,Ul),a(w,Nl),a(w,bs),a(bs,Fl),a(w,Vl),a(w,Es),a(Es,Ml),a(d,zl),a(d,T),a(T,_s),a(_s,Gl),a(T,Yl),a(T,ws),a(ws,Wl),a(T,Xl),a(T,Ts),a(Ts,jl),a(T,Kl),a(T,xs),a(xs,Jl),a(d,Ql),a(d,x),a(x,Ds),a(Ds,Zl),a(x,$l),a(x,Ps),a(Ps,gl),a(x,ti),a(x,Cs),a(Cs,ai),a(x,ni),a(x,As),a(As,si),a(d,ei),a(d,D),a(D,Bs),a(Bs,oi),a(D,ci),a(D,Rs),a(Rs,pi),a(D,li),a(D,Hs),a(Hs,ii),a(D,ui),a(D,Ls),a(Ls,ri),a(d,ki),a(d,P),a(P,qs),a(qs,di),a(P,hi),a(P,Os),a(Os,fi),a(P,mi),a(P,Is),a(Is,vi),a(P,yi),a(P,Ss),a(Ss,bi),a(d,Ei),a(d,C),a(C,Us),a(Us,_i),a(C,wi),a(C,Ns),a(Ns,Ti),a(C,xi),a(C,Fs),a(Fs,Di),a(C,Pi),a(C,Vs),a(Vs,Ci),a(d,Ai),a(d,A),a(A,Ms),a(Ms,Bi),a(A,Ri),a(A,zs),a(zs,Hi),a(A,Li),a(A,Gs),a(Gs,qi),a(A,Oi),a(A,Ys),a(Ys,Ii),a(d,Si),a(d,B),a(B,Ws),a(Ws,Ui),a(B,Ni),a(B,Xs),a(Xs,Fi),a(B,Vi),a(B,js),a(js,Mi),a(B,zi),a(B,Ks),a(Ks,Gi),i(t,ao,l),i(t,q,l),a(q,Yi),a(q,ua),a(ua,Wi),a(q,Xi),a(q,Js),a(Js,ji),a(q,Ki),i(t,no,l),i(t,ra,l),a(ra,Ji),i(t,so,l),i(t,ka,l),a(ka,Qi),i(t,eo,l),i(t,K,l),a(K,Zi),a(K,da),a(da,$i),a(K,gi),i(t,oo,l),i(t,ha,l),a(ha,tu),i(t,co,l),i(t,fa,l),a(fa,ma),a(ma,au),a(fa,nu),i(t,po,l),i(t,va,l),a(va,su),i(t,lo,l),i(t,ya,l),a(ya,eu),i(t,io,l),i(t,ba,l),a(ba,ou),a(ba,Ea),a(Ea,cu),i(t,uo,l),i(t,_a,l),a(_a,pu),i(t,ro,l),i(t,en,l),a(en,lu),i(t,ko,l),i(t,on,l),a(on,wa),a(wa,iu),i(t,ho,l),i(t,Ta,l),a(Ta,uu),i(t,fo,l),i(t,cn,l),a(cn,ru),i(t,mo,l),i(t,xa,l),a(xa,ku),i(t,vo,l),i(t,O,l),a(O,du),a(O,Qs),a(Qs,hu),a(O,fu),a(O,Zs),a(Zs,mu),a(O,vu),i(t,yo,l),i(t,Da,l),a(Da,yu),i(t,bo,l),i(t,pn,l),a(pn,bu),i(t,Eo,l),i(t,ln,l),a(ln,Eu),i(t,_o,l),i(t,Pa,l),a(Pa,_u),i(t,wo,l),i(t,un,l),a(un,wu),i(t,To,l),i(t,rn,l),a(rn,Tu)},p:Hu,i:Hu,o:Hu,d(t){t&&n(U),t&&n(te),t&&n(ae),t&&n(Ct),t&&n(ne),t&&n(za),t&&n(se),t&&n(Ga),t&&n(ee),t&&n(At),t&&n(oe),t&&n(Ya),t&&n(ce),t&&n(Bt),t&&n(pe),t&&n(Wa),t&&n(le),t&&n(z),t&&n(ie),t&&n(Ot),t&&n(ue),t&&n(Xa),t&&n(re),t&&n(G),t&&n(ke),t&&n(Ft),t&&n(de),t&&n(ja),t&&n(he),t&&n(Y),t&&n(fe),t&&n(zt),t&&n(me),t&&n(Gt),t&&n(ve),t&&n(Ka),t&&n(ye),t&&n(Wt),t&&n(be),t&&n(Xt),t&&n(Ee),t&&n(Ja),t&&n(_e),t&&n(f),t&&n(we),t&&n(Qa),t&&n(Te),t&&n(jt),t&&n(xe),t&&n(Kt),t&&n(De),t&&n(Za),t&&n(Pe),t&&n(m),t&&n(Ce),t&&n(W),t&&n(Ae),t&&n(Jt),t&&n(Be),t&&n(Qt),t&&n(Re),t&&n($a),t&&n(He),t&&n(v),t&&n(Le),t&&n(R),t&&n(qe),t&&n(Zt),t&&n(Oe),t&&n($t),t&&n(Ie),t&&n(ga),t&&n(Se),t&&n(H),t&&n(Ue),t&&n(y),t&&n(Ne),t&&n(gt),t&&n(Fe),t&&n(aa),t&&n(Ve),t&&n(na),t&&n(Me),t&&n(tn),t&&n(ze),t&&n(L),t&&n(Ge),t&&n(sa),t&&n(Ye),t&&n(ea),t&&n(We),t&&n(an),t&&n(Xe),t&&n(oa),t&&n(je),t&&n(ca),t&&n(Ke),t&&n(pa),t&&n(Je),t&&n(X),t&&n(Qe),t&&n(la),t&&n(Ze),t&&n(nn),t&&n($e),t&&n(ia),t&&n(ge),t&&n(sn),t&&n(to),t&&n(j),t&&n(ao),t&&n(q),t&&n(no),t&&n(ra),t&&n(so),t&&n(ka),t&&n(eo),t&&n(K),t&&n(oo),t&&n(ha),t&&n(co),t&&n(fa),t&&n(po),t&&n(va),t&&n(lo),t&&n(ya),t&&n(io),t&&n(ba),t&&n(uo),t&&n(_a),t&&n(ro),t&&n(en),t&&n(ko),t&&n(on),t&&n(ho),t&&n(Ta),t&&n(fo),t&&n(cn),t&&n(mo),t&&n(xa),t&&n(vo),t&&n(O),t&&n(yo),t&&n(Da),t&&n(bo),t&&n(pn),t&&n(Eo),t&&n(ln),t&&n(_o),t&&n(Pa),t&&n(wo),t&&n(un),t&&n(To),t&&n(rn)}}}const dh={layout:"splash"};class hh extends oh{constructor(U){super(),ch(this,U,null,uh,ph,{})}}export{hh as default,dh as metadata};
//# sourceMappingURL=_page.md-994e0609.js.map
