pragma cashscript >= 0.7.1;

// v20221205

// Relative or rolling timelocks, per utxo.
// This contract requires input be sufficently aged 
// according to BIP68 relative time locks.

contract TimeLock(

  // interval for payouts, in blocks
  int period,

  // LockingBytecode of the beneficiary, the address receiving payments
  bytes recipientLockingBytecode,

  // extra allowance for administration of contract
  // fees are paid from executors' allowance. 
  int executorAllowance
) {
  function execute() {

    // Check that the first output sends to the recipient
    require(tx.outputs[0].lockingBytecode == recipientLockingBytecode);

    // Check that time has passed and that time locks are enabled
    require(tx.age >= period);
        
    // Get the total value of the inputs the contract
    int currentValue = tx.inputs[this.activeInputIndex].value;

    // Calculate value minus allowance
    int unlockedValue = currentValue - executorAllowance;

    // Check that the outputs send the correct amount
    require(tx.outputs[0].value >= unlockedValue);
        
  }
}