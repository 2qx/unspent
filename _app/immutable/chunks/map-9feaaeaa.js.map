{"version":3,"file":"map-9feaaeaa.js","sources":["../../../../../../../phi/dist/main/contract/constant.js","../../../../../../../phi/dist/main/common/map.js"],"sourcesContent":["import { Annuity } from \"./annuity/index.js\";\nimport { Divide } from \"./divide/index.js\";\nimport { Faucet } from \"./faucet/index.js\";\nimport { Mine } from \"./mine/index.js\";\nimport { Perpetuity } from \"./perpetuity/index.js\";\nimport { Record } from \"./record/index.js\";\nexport const contractMap = {\n    A: Annuity,\n    D: Divide,\n    F: Faucet,\n    M: Mine,\n    P: Perpetuity,\n    R: Record,\n};\nexport const nameMap = {\n    A: \"annuity\",\n    D: \"divide\",\n    F: \"faucet\",\n    M: \"mine\",\n    P: \"perpetuity\",\n    R: \"record\",\n};\n//# sourceMappingURL=constant.js.map","import { binToHex, hexToBin } from \"@bitauth/libauth\";\nimport { nameMap, contractMap } from \"../contract/constant.js\";\nimport { decodeNullDataScript } from \"./util.js\";\nimport { BaseUtxPhiContract } from \"./contract.js\";\nexport function parseOpReturn(serialized) {\n    if (typeof serialized === \"string\") {\n        serialized = hexToBin(serialized);\n    }\n    let data = BaseUtxPhiContract.parseOpReturn(serialized);\n    return {\n        name: nameMap[data.code],\n        opReturn: serialized,\n        ...data,\n    };\n}\nexport function opReturnToInstance(serialized, network) {\n    if (typeof serialized === \"string\") {\n        serialized = hexToBin(serialized);\n    }\n    let serializedBinChunks = decodeNullDataScript(serialized);\n    let contractCode = binToHex(serializedBinChunks[1]);\n    let code = String.fromCharCode(parseInt(contractCode, 16));\n    let instance = contractMap[code].fromOpReturn(serialized, network);\n    return instance;\n}\nexport function opReturnToSerializedString(serialized, network) {\n    let instance = opReturnToInstance(serialized, network);\n    if (instance) {\n        return instance.toString();\n    }\n    else {\n        return;\n    }\n}\nexport function stringToInstance(serialized, network) {\n    let code = serialized[0];\n    try {\n        let instance = contractMap[code].fromString(serialized, network);\n        return instance;\n    }\n    catch (e) {\n        console.warn(`Couldn't parse serialized contract, ${e}`);\n        return;\n    }\n}\nexport function castConstructorParametersFromArtifact(parameters, artifact) {\n    let result = [];\n    let inputs = artifact.constructorInputs;\n    parameters.forEach(function (value, i) {\n        let abiInput = inputs[i];\n        let parsedVal = undefined;\n        if (abiInput.type.startsWith(\"bytes\")) {\n            if (typeof value === \"string\") {\n                if (value.includes(\",\")) {\n                    parsedVal = Uint8Array.from(value.split(\",\").map((vStr) => parseInt(vStr)));\n                }\n                else {\n                    parsedVal = hexToBin(value);\n                }\n            }\n            else {\n                throw Error(`Couldn't parse ${value} from string to bytes`);\n            }\n        }\n        else if (abiInput.type === \"int\") {\n            parsedVal = parseInt(value);\n        }\n        else if (abiInput.type === \"boolean\") {\n            parsedVal = Boolean(value);\n        }\n        else {\n            throw Error(`Couldn't parse type ${abiInput.type}`);\n        }\n        result.push({\n            name: abiInput.name,\n            cashScriptType: abiInput.type,\n            value: parsedVal,\n        });\n    });\n}\n//# sourceMappingURL=map.js.map"],"names":["contractMap","Annuity","Divide","Faucet","Mine","Perpetuity","Record","nameMap","parseOpReturn","serialized","hexToBin","data","BaseUtxPhiContract","opReturnToInstance","network","serializedBinChunks","decodeNullDataScript","contractCode","binToHex","code","stringToInstance"],"mappings":"2GAMO,MAAMA,EAAc,CACvB,EAAGC,EACH,EAAGC,EACH,EAAGC,EACH,EAAGC,EACH,EAAGC,EACHC,CACJ,EACaC,EAAU,CACnB,EAAG,UACH,EAAG,SACH,EAAG,SACH,EAAG,OACH,EAAG,aACH,EAAG,QACP,ECjBO,SAASC,EAAcC,EAAY,CAClC,OAAOA,GAAe,WACtBA,EAAaC,EAASD,CAAU,GAEpC,IAAIE,EAAOC,EAAmB,cAAcH,CAAU,EACtD,MAAO,CACH,KAAMF,EAAQI,EAAK,MACnB,SAAUF,EACV,GAAGE,CACX,CACA,CACO,SAASE,EAAmBJ,EAAYK,EAAS,CAChD,OAAOL,GAAe,WACtBA,EAAaC,EAASD,CAAU,GAEpC,IAAIM,EAAsBC,EAAqBP,CAAU,EACrDQ,EAAeC,EAASH,EAAoB,EAAE,EAC9CI,EAAO,OAAO,aAAa,SAASF,EAAc,EAAE,CAAC,EAEzD,OADejB,EAAYmB,GAAM,aAAaV,EAAYK,CAAO,CAErE,CAUO,SAASM,EAAiBX,EAAYK,EAAS,CAClD,IAAIK,EAAOV,EAAW,GACtB,GAAI,CAEA,OADeT,EAAYmB,GAAM,WAAWV,EAAYK,CAAO,CAElE,OACM,EAAP,CACI,QAAQ,KAAK,uCAAuC,GAAG,EACvD,MACH,CACL"}