{"version":3,"file":"_page.md-375147e9.js","sources":["../../../../../../../src/routes/+page.md"],"sourcesContent":["---\nlayout: splash\n---\n<svelte:head>\n<title>Unspent Phi</title>\n</svelte:head>\n\n# Welcome!\n\nUnspent Phi (₿∙ϕ) is an app for creating (and publishing) a set of simple contracts on the Bitcoin Cash (BCH) blockchain that anyone can execute. These contracts lock the value of unspent outputs from earlier transactions (UTXOs), and allow some small reward for any party to call a known contract (if valid according to the rules of BitcoinScript). Although simple, these contracts may be chained together to create complex outcomes.\n\n₿∙ϕ contracts may be thought of as automata, machines that are unlocked and stepped forward by random participants on the blockchain. No one party has control, it's a race to spend them first. However, the code to unlock them must be known for the code to stepped forward. Money sent to ₿∙ϕ contracts appear identical to any other pay-to-script UTXOs on the network. Nothing is known about how to spend the contract until it is spent at least once, so in order for the contract to function automatically, both their existence and the parameters to unlock them must be known. While the code to unlock is broadcasted by spending the contract once, not all contracts can be spent right away, so it's easier and safer just to publish some unlock record and not worry about forgetting how to unlock them.\n\n\n# Contract Types\n\nEach ₿∙ϕ contract is designed to do one thing. The contracts available (so far) are as follows:\n\n## Beneficiary Contracts\n\nSome contracts control value on behalf of the contract creator. They all have an executor allowance which can be claimed by the party which submits a valid spending transactions.\n\n| Name       | Description                                            |\n| ---------- | ------------------------------------------------------ |\n| Annuity    | Equal payments over time.                              |\n| Divide     | Divide money into equal payments, up to four addresses |\n| Perpetuity | Pay a fixed fraction of total value at intervals       |\n\n## Distributive Contracts\n\nContracts with locked value that can be spent by anyone can be characterized as \"free\". At present these include faucets, mining contracts.\n\n| Name   | Description                                            |\n| ------ | ------------------------------------------------------ |\n| Faucet | Distributes some free bitcoin per period               |\n| Mine   | Distributes some bitcoin per period, for proof of work |\n\n## Informational Contracts\n\n\nA contract providing the facility to record data for free.\n\n| Name   | Description                                            |\n| ------ | ------------------------------------------------------ |\n| Record | Broadcast a contract to the blockchain                 |\n\n## Timelock v non-timelocked\n\nContracts in BitcoinScript may be locked using [BIP68](https://reference.cash/protocol/forks/bip-0068)\n\nThe Divide and Record contracts are not time-locked, they may be called at anytime.\n\n\n\n# Contracts\n\n## Annuity\n\nThe annuity contract pays a fixed amount (in satoshis) to a predefined locking bytecode (i.e. address).\n\nTo prevent the contract from being called successively (thus paying out all at once), a timelock is added restricting input be of a certain age (in blocks), this parameter is called the `period`. The beneficiary address (or contract) is denoted by the `recipientLockingBytecode`. The amount paid in each period is the `installment`. To aid in execution, a small fee is left as `executorAllowance` for each execution of the contract, it may be paid to anyone.\n\nThis contract: checks that the first output pays to the beneficiary; checks that the timelock is satisfied; checks that the second output pays back to the contract; gets the total value being spent; calculates the amount to be returned, and finally, checks that both the installment amount of the first output & the total returned to the contract exceed the required amounts.\n\n```solidity\npragma cashscript >= 0.7.1;\n\n// v202205626\n\n// Pay equal payments at regular intervals using input locks\ncontract Annuity(\n\n  // interval for payouts, in blocks\n  int period,\n\n  // LockingBytecode of the beneficiary,\n  // the address receiving payments\n  bytes recipientLockingBytecode,\n\n  // amount paid in each installment\n  int installment,\n\n  // extra allowance for administration of contract\n  // fees are paid from executors' allowance.\n  int executorAllowance\n) {\n  function execute() {\n\n    // Check that the first output sends to the recipient\n    require(tx.outputs[0].lockingBytecode == recipientLockingBytecode);\n\n    // Check that time has passed and that time locks are enabled\n    require(tx.age >= period);\n\n    // require the second output to match the active bytecode\n    require(tx.outputs[1].lockingBytecode == new LockingBytecodeP2SH(hash160(this.activeBytecode)));\n\n    // Get the total value on the contract\n    int currentValue = tx.inputs[this.activeInputIndex].value;\n\n    // Calculate value returned to the contract\n    int returnedValue = currentValue - installment - executorAllowance;\n\n    // Check that the outputs send the correct amounts\n    require(tx.outputs[0].value >= installment);\n    require(tx.outputs[1].value >= returnedValue);\n  }\n}\n```\n\n## Divide\n\nThe divide contract splits inputs across a predefined set of output destinations.\n\nEach output is denoted by `r#LockingBytecode`, where `#` is the index of the output. Since early BitcoinScript did not have loops, this contract was written with a static list of outputs and a `divisor`, which is simply the number of outputs. An `executorAllowance` amount is subtracted from the total distribution amount, which may be spent by anyone as long as the amount payed to the hardcoded receipts equals or exceeds the alloted share.\n\nThis contract: checks that each of the output destinations match the predefined output; calculates the total value on the contract; calculates the amount to be paid to each receipt (`distribution`), and finally calculates that each receipt receives an output greater than, or equal to, the distribution amount.\n\n```solidity\npragma cashscript >= 0.7.0;\n\n contract Divide(\n   // allowance for party executing the contract\n   int executorAllowance,\n   // number of outputs receiving payout\n   int divisor,\n\n   // for each beneficiary,\n   // take the LockingBytecode as input\n   bytes r0LockingBytecode,\n   bytes r1LockingBytecode\n ) {\n   function execute() {\n\n    // distributes to each output in order\n    require(tx.outputs[0].lockingBytecode == r0LockingBytecode);\n    require(tx.outputs[1].lockingBytecode == r1LockingBytecode);\n\n    // Get the total value of inputs\n    int currentValue = tx.inputs[this.activeInputIndex].value;\n\n    // Total value paid to beneficiaries,\n    // minus executor allowance\n    int distributedValue = currentValue - executorAllowance;\n\n    // Value paid to each beneficiary\n    int distribution = distributedValue / divisor;\n\n    // each output must be greater\n    // or equal to the distribution amount\n    require(tx.outputs[0].value >= distribution);\n    require(tx.outputs[1].value >= distribution);\n   }\n }\n```\n\n## Faucet\n\nThe faucet contract pays \"free\" bitcoin.\n\nTo prevent the faucet from being drained by successive calls, a `period` timeout is set to specify the minimum age of the input being spent. The amount available to be spent is defined by a `payout`. As a convenience, and to have multiple faucets with the same payout, an `index` parameter is added to distinguish identical contracts.\n\nThe steps of this contract are as follows: first, it requires that the transaction be called with an age that is greater than the current `period`; the `index` is used so that it is not unused; next the first output must return all value to the faucet contract, and finally the returned value is calculate and must be returned to the faucet if the current value exceeds the payout.\n\n```solidity\npragma cashscript >= 0.7.0;\n\n// v20220609\n\ncontract Faucet(\n\n  // interval for payouts, in blocks\n  int period,\n\n  // amount to be paid by faucet allowance.\n  int payout,\n\n  // random number input into contract to have more than one\n  int index\n) {\n  function drip() {\n\n    // Check that time has passed and that time locks are enabled\n    require(tx.age >= period);\n\n    // use the index\n    require(index >= 0);\n\n    // require the first output to match the active bytecode\n    require(tx.outputs[0].lockingBytecode == new LockingBytecodeP2SH(hash160(this.activeBytecode)));\n\n    // Get the total value on the contract\n    int currentValue = tx.inputs[this.activeInputIndex].value;\n\n    // Calculate value returned to the contract\n    int returnedValue = currentValue - payout;\n\n    // If the value on the contract exceeds the payout amount\n    // then assert that the value must return to the contract\n    if(currentValue > payout){\n      require(tx.outputs[0].value >= returnedValue);\n    }\n\n  }\n\n}\n```\n\n## Mine-able Faucet\n\nThe ₿∙ϕ mining covenant is very much like the faucet, with some additional requirements.\n\nFirst, execution of the contract must be called with a `nonce` [a random value used once]\nwhich when added to the current locking bytecode and hashed results in a value starting with some number of zeros.\nHow many zeros is the `difficulty`.\n\nFinally, prior to spending the the mining `payout`, the spender must announce\nthe winning `nonce` in an OP_RETURN of the first output, and send the balance of the contract to a new mining covenant with the new nonce as a `canary`.\n\n![Replace the canary](images/canary.jpeg \"Look, see, he's alright. He's fine.\")\nLike an infinite series of Failures to Deliver (FTDs) for a stock, or banging forex futures to manipulate an outcome in currency markets, the canary is always brought back to life with a new copy of itself. You don't have to take over a whole blockchain to create a market for your energy, just mine a covenant—there will be far less idiosyncratic risk.\n\n```solidity\npragma cashscript >= 0.7.1;\n\n// v20220727\n\n// A faucet with proof of work.\ncontract Mine(\n\n  // interval for payouts, in blocks\n  int period,\n\n  // amount to be paid by faucet allowance.\n  int payout,\n\n  // how many leading zeros should the hash of the nonce and current bytecode have\n  int difficulty,\n\n  // the old nonce, which is replaced each time.\n  bytes7 canary\n) {\n  function execute(bytes7 nonce) {\n\n    // Check that time has passed and that time locks are enabled\n    require(tx.age >= period);\n\n    // Use the old nonce\n    require(canary.length==7);\n\n    // Check that the new nonce creates a hash with\n    // some D (difficulty) leading zeros when hashed with the active bytecode\n    bytes version = byte(1);\n    bytes zeros = bytes7(0);\n    bytes hash = sha256(this.activeBytecode + bytes7(nonce));\n    require(hash.split(difficulty)[0] == zeros.split(difficulty)[0]);\n\n    // calculate the locking bytecode\n    // of a new mining contract with the nonce as canary\n    bytes newContract = 0x7 + bytes7(nonce) + this.activeBytecode.split(8)[1];\n    bytes20 contractHash = hash160(newContract);\n    bytes23 lockingCode = new LockingBytecodeP2SH(contractHash);\n\n\n    // Require the first output details the parameters\n    // of the mining contract in a zero value OP_RETURN\n    bytes announcement = new LockingBytecodeNullData([\n      // The protocol\n      0x7574786f,\n      // M for mining contract\n      bytes('M'),\n      // version\n      bytes(version),\n      // The period,\n      bytes(period),\n      // The payout,\n      bytes(payout),\n      // preceding zeros on solution\n      bytes(difficulty),\n      // The current nonce (future canary), of the mining contract,\n      // where funds are simultaneously sent to\n      bytes(nonce),\n      // The new bytecode\n      bytes(lockingCode)\n    ]);\n\n    // Assure that the first output matches the arguments to the contract\n    require(tx.outputs[0].lockingBytecode == announcement);\n\n    // check that the change output sends to that contract\n    require(tx.outputs[1].lockingBytecode == lockingCode);\n\n    // Get the total value on the contract\n    int currentValue = tx.inputs[this.activeInputIndex].value;\n\n    // Calculate value returned to the contract\n    int returnedValue = currentValue - payout;\n\n    // If the value on the contract exceeds the payout amount\n    // then assert that the value must return to the contract\n    if(currentValue > payout){\n    require(tx.outputs[1].value >= returnedValue);\n    }\n\n    // Assure it has zero value\n    require(tx.outputs[0].value == 0);\n  }\n\n}\n```\n\n## Perpetuity\n\nThe Perpetuity contract works like an Annuity, however rather than pay a fixed amount, a fixed fraction of the total is paid each period.\n\nThe fraction paid is determined by the `decay` parameter. If a `decay` of 10 is specified, then one tenth the value is paid each period.\n\n```solidity\npragma cashscript >= 0.7.1;\n\n// v20220522\n\ncontract Perpetuity(\n\n // interval for payouts, in blocks\n int period,\n\n // lockingBytecode of the beneficiary,\n // the address receiving payments\n bytes recipientLockingBytecode,\n\n // extra allowance for administration of contract\n // fees are paid from executors' allowance.\n int executorAllowance,\n\n // divisor for the payout,\n // each payout must be greater than\n // the total amount held on the contract\n // divided by this number\n int decay\n\n) {\n function execute() {\n\n  // Check that the first output sends to the recipient\n  require(tx.outputs[0].lockingBytecode == recipientLockingBytecode);\n\n  // Check that time has passed and that time locks are enabled\n  require(tx.age >= period);\n\n  // require the second output to match the active bytecode\n  require(tx.outputs[1].lockingBytecode == new LockingBytecodeP2SH(hash160(this.activeBytecode)));\n\n  // Get the total value on the contract\n  int currentValue = tx.inputs[this.activeInputIndex].value;\n\n  // The payout is the current value divided by the decay\n  int installment = currentValue/decay;\n\n  // Calculate value returned to the contract\n  int returnedValue = currentValue - installment - executorAllowance;\n\n  // Check that the outputs send the correct amounts\n  require(tx.outputs[0].value >= installment);\n  require(tx.outputs[1].value >= returnedValue);\n\n }\n}\n```\n\n## Record\n\nA utility function to broadcast new contracts as OP_RETURN messages.\n\n```solidity\npragma cashscript ^0.7.0;\n\n/* Allows publishing some OP_RETURN message,\n * given that:\n * 1. the hash160 value of the zero value OP_RETURN message is passed\n * 2. the first output has zero value\n * 3. the remaining value is pass back to the contract, mostly.\n */\n\n\ncontract Record(int maxFee, int index) {\n function execute(bytes20 dataHash) {\n\n  // this does nothing\n  // different indices enable different contract addresses\n  require(index >= 0);\n\n  // Check that the first tx output is a zero value opcode matching the provided hash\n  require(hash160(tx.outputs[0].lockingBytecode) == dataHash);\n  require(tx.outputs[0].value == 0);\n\n  // calculate the fee required to propagate the transaction 1 sat/ byte\n  int baseFee = 162;\n\n  int fee = baseFee + tx.outputs[0].lockingBytecode.length;\n  require(fee<=maxFee);\n\n  // Check that the second tx output sends the change back\n  int newValue = tx.inputs[this.activeInputIndex].value - fee;\n  require(tx.outputs[1].lockingBytecode == tx.inputs[this.activeInputIndex].lockingBytecode);\n  require(tx.outputs[1].value >= newValue);\n }\n}\n```\n\n\n# Definitions\n\n## Units\n\nbitcoin has it's own units of value and time. Although there are whole coins and it's possible to use epoch time (seconds since 1970) in some cases, we'll stick to two here to steer clear of the politics surrounding \"leap seconds\" and what is a *unit of account*.\n\n### satoshis\n\n A unit of account (on the Bitcoin Cash fork of the initial bitcoin blockchain). A hundred million satoshi are equal to 1 Bitcoin Cash.\n\n### blocks (time) \n\nThe base unit of time on bitcoin is called a block, blocktimes very, but are about 10 minutes on average.\n\n| Blocks | Minutes | Days  | Years |\n| ------ | ------- | ----- | ----- |\n| 1      | 10      | -     | -     |\n| 10     | 100     | -     | -     |\n| 100    | 1000    | 0.694 | -     |\n| 144    | 1440    | 1     | -     |\n| 1000   | -       | 6.94  | -     |\n| 4000   | -       | 27.7  | -     |\n| 13140  | -       | 91.25 | 0.249 |\n| 26280  | -       | -     | 0.499 |\n| 52560  | -       | -     | 0.999 |\n\nThe largest value specified by the timelock upgrade [(BIP68)](https://reference.cash/protocol/forks/bip-0068) is a 16-bit value. Contracts with locking periods larger than the maximum value (65536) have **not** been tested, and should not be expected to work.\n\n## Languages\n\n### BitcoinScript\n\nA procedural, stack-oriented programming language (Forth-like) with different rules and operations. In practice, it is [Script](https://reference.cash/protocol/blockchain/script) that mostly unlocks value on a bitcoin network.\n\n### CashScript\n\n[CashScript is a high-level programming language for smart contracts on Bitcoin Cash](https://cashscript.org/docs/basics/about) that transpiles to BitcoinScript.\n\n## Script Components\n\n### Unlocking Script\n\nCode that is run before running the unlocking code. If execution doesn't trigger failures and leaves a single non-zero value, it is considered unlocked.\n[More](https://reference.cash/protocol/blockchain/transaction/unlocking-script)\n\n### Locking Script\n\nAt present (Nov 2022), there are two types of unlocking script (actually 4). P2PKH (pay-to-publicKeyHash), which pays to the hash of a public key. And Pay to Script (P2PSH) which pay to an unlocking script hash.\n\n[More info](https://reference.cash/protocol/blockchain/transaction/locking-script)\n\n### OP_RETURN \n\nA code (106) in BitcoinScript for transaction outputs which can store arbitrary data.\n\n### OP_RETURN data\n Data in OP_RETURNs is commonly encoded by pushing the total number of bytes, followed by the data bytes. For example `04` followed by `7574786f` (4 bytes of in two letter hex). This format is used to \"broadcast\" ₿∙ϕ contracts.\n\n### Published\n\n In the context of an unspent contract, a contract is published if the parameters to construct and spend it are recorded on the blockchain, either in an OP_RETURN or by reference to the spent output.\n\n A cashaddress locks value, the parameters of the contract allow unlocking the value.\n\n### Unspent Transaction Output (UTXO)\n\n some value, defined by the output of a previous transaction, which is locked by some code, either the hash of a public key (cashaddr), or a script that, when executed, satisfies a locking code.\n\n The value may be zero, in the case of an OP_RETURN."],"names":["insert_hydration","target","nav","anchor","append_hydration","ol3","li0","a0","li5","a1","ol0","li1","a2","li2","a3","li3","a4","li4","a5","li12","a6","ol1","li6","a7","li7","a8","li8","a9","li9","a10","li10","a11","li11","a12","li16","a13","ol2","li13","a14","li14","a15","li15","a16","h10","p0","p1","h11","p2","h20","p3","table0","thead0","tr0","th0","th1","tbody0","tr1","td0","td1","tr2","td2","td3","tr3","td4","td5","h21","p4","table1","thead1","tr4","th2","th3","tbody1","tr5","td6","td7","tr6","td8","td9","h22","p5","table2","thead2","tr7","th4","th5","tbody2","tr8","td10","td11","h23","p6","a17","p7","h12","h24","p8","p9","code0","code1","code2","code3","p10","pre0","h25","p11","p12","code4","code5","code6","code7","p13","code8","pre1","h26","p14","p15","code9","code10","code11","p16","code12","code13","pre2","h27","p17","p18","code14","code15","p19","code16","code17","code18","p20","img","pre3","h28","p21","p22","code19","code20","pre4","h29","p23","pre5","h13","h210","p24","em","h30","p25","h31","p26","table3","thead3","tr9","th6","th7","th8","th9","tbody3","tr10","td12","td13","td14","td15","tr11","td16","td17","td18","td19","tr12","td20","td21","td22","td23","tr13","td24","td25","td26","td27","tr14","td28","td29","td30","td31","tr15","td32","td33","td34","td35","tr16","td36","td37","td38","td39","tr17","td40","td41","td42","td43","tr18","td44","td45","td46","td47","p27","a18","strong","h211","h32","p28","a19","h33","p29","a20","h212","h34","p30","a21","h35","p31","p32","a22","h36","p33","h37","p34","code21","code22","h38","p35","p36","h39","p37","p38","metadata"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yzBAAoI,UAAQ,4BAEpF,gBAAc,sCAKrE,uBAAqB,4BAKrB,wBAAsB,4BAKtB,yBAAuB,4BAKvB,2BAAyB,4BAEyB,WAAS,sCAEsB,SAAO,4BAEzC,QAAM,4BAEN,QAAM,4BAEI,kBAAgB,4BAEtB,YAAU,4BAEd,QAAM,4BAED,aAAW,sCAEgB,OAAK,4BAElC,WAAS,4BAED,mBAAiB,gCAS3D,UAAQ,wBACtB,mcAAkb,wBAClb,y0BAA+xB,yBAC1wB,gBAAc,wBACnC,gHAA+F,yBACnE,uBAAqB,wBACjD,oLAAkL,+DAIjL,MAAI,yBACJ,aAAW,iDAKX,SAAO,yBACP,2BAAyB,oCAGzB,QAAM,yBACN,wDAAsD,oCAGtD,YAAU,yBACV,kDAAgD,yBAIpB,wBAAsB,wBACnD,uJAA2I,+DAI1I,MAAI,yBACJ,aAAW,kDAKX,QAAM,yBACN,0CAAwC,oCAGxC,MAAI,yBACJ,wDAAsD,yBAIzB,yBAAuB,wBACrD,4DAA0D,+DAIzD,MAAI,yBACJ,aAAW,kDAKX,QAAM,yBACN,wCAAsC,yBAIP,2BAAyB,wBACzD,iDAA+C,iBAGjD,OAAK,wBACH,qFAAmF,yBACnE,WAAS,yBACX,SAAO,wBACrB,yGAAuG,uBACvG,4LAA0L,oBAAM,QAAM,OAAO,4DAA0D,oBAAM,0BAAwB,OAAO,0CAAwC,oBAAM,aAAW,OAAO,gDAA8C,oBAAM,mBAAiB,OAAO,gEAA8D,wBACtf,yXAAuX,4CA4C1W,QAAM,wBACnB,mFAAiF,uBACjF,4BAA0B,oBAAM,mBAAiB,OAAO,UAAQ,oBAAM,GAAC,OAAO,2IAAyI,oBAAM,SAAO,OAAO,8CAA4C,oBAAM,mBAAiB,OAAO,mLAAiL,uBACte,wLAAsL,oBAAM,cAAY,OAAO,oHAAkH,4CAoCpT,QAAM,wBACnB,oDAAwC,uBACxC,kEAAgE,oBAAM,QAAM,OAAO,wHAAsH,oBAAM,QAAM,OAAO,4EAA0E,oBAAM,OAAK,OAAO,yDAAuD,uBAC/W,4IAA0I,oBAAM,QAAM,OAAO,QAAM,oBAAM,OAAK,OAAO,gOAA8N,4CA0C5X,kBAAgB,wBACvC,yGAAwF,uBACxF,yDAAuD,oBAAM,OAAK,OAAO;AAAA;AAAA,uBAEtD,oBAAM,YAAU,OAAO,GAAC,uBAC3C,4CAA0C,oBAAM,QAAM,OAAO;AAAA,aACpD,oBAAM,OAAK,OAAO,8HAA4H,oBAAM,QAAM,OAAO,GAAC,oCAK9K;AAAA,4WACiW,4CAuF7U,YAAU,wBAC3B,2IAAyI,uBACzI,yCAAuC,oBAAM,OAAK,OAAO,mBAAiB,oBAAM,OAAK,OAAO,oEAAkE,4CAmDjJ,QAAM,wBACnB,sEAAoE,4CAkClD,aAAW,yBACjB,OAAK,uBACjB,gRAAqP,kBAAI,iBAAe,OAAK,GAAC,yBAC/P,UAAQ,wBACvB,wIAAuI,yBACrH,eAAa,wBAC/B,2GAAyG,8DAIxG,QAAM,yBACN,SAAO,yBACP,MAAI,yBACJ,OAAK,gDAKL,GAAC,yBACD,IAAE,yBACF,GAAC,yBACD,GAAC,mCAGD,IAAE,yBACF,KAAG,yBACH,GAAC,yBACD,GAAC,mCAGD,KAAG,yBACH,MAAI,yBACJ,OAAK,yBACL,GAAC,mCAGD,KAAG,yBACH,MAAI,yBACJ,GAAC,yBACD,GAAC,mCAGD,MAAI,yBACJ,GAAC,yBACD,MAAI,yBACJ,GAAC,mCAGD,MAAI,yBACJ,GAAC,yBACD,MAAI,yBACJ,GAAC,mCAGD,OAAK,yBACL,GAAC,yBACD,OAAK,yBACL,OAAK,mCAGL,OAAK,yBACL,GAAC,yBACD,GAAC,yBACD,OAAK,mCAGL,OAAK,yBACL,GAAC,yBACD,GAAC,yBACD,OAAK,uBAIN,sDAAoD,iBAGtD,SAAO,OAAI,gGAA8F,sBAAQ,KAAG,OAAS,mDAAiD,yBAC5J,WAAS,yBACL,eAAa,uBACjC,yHAAuH,iBAGzH,QAAM,OAAI,kDAAgD,yBACvC,YAAU,kCAI7B,qFAAmF,OAAI,oCAAkC,yBAC/F,mBAAiB,yBAClB,kBAAgB,wBACvC;AAAA,CACH,iBAGC,MAAI,yBACmB,gBAAc,wBACnC,qNAAmN,kCAIrN,WAAS,yBACS,WAAS,wBACzB,uFAAqF,yBAChE,gBAAc,uBACnC,uHAAsH,oBAAM,IAAE,OAAO,eAAa,oBAAM,UAAQ,OAAO,6GAAkF,yBACzO,WAAS,wBACzB,wMAAuM,wBACvM,sFAAqF,yBAC/C,mCAAiC,wBACvE,mMAAkM,wBAClM,qDAAoD,kLAziB6E,UAAQ,yHAEpF,gBAAc,+IAKrE,uBAAqB,yHAKrB,wBAAsB,yHAKtB,yBAAuB,yHAKvB,2BAAyB,qJAEyB,WAAS,+IAEsB,SAAO,yHAEzC,QAAM,yHAEN,QAAM,yHAEI,kBAAgB,yHAEtB,YAAU,yHAEd,QAAM,qJAED,aAAW,+IAEgB,OAAK,yHAElC,WAAS,yHAED,mBAAiB,4LAS3D,UAAQ,4DACtB,mcAAkb,4DAClb,y0BAA+xB,kEAC1wB,gBAAc,4DACnC,gHAA+F,kEACnE,uBAAqB,4DACjD,oLAAkL,2JAIjL,MAAI,+DACJ,aAAW,wJAKX,SAAO,+DACP,2BAAyB,2GAGzB,QAAM,+DACN,wDAAsD,2GAGtD,YAAU,+DACV,kDAAgD,4GAIpB,wBAAsB,4DACnD,uJAA2I,2JAI1I,MAAI,+DACJ,aAAW,0JAKX,QAAM,+DACN,0CAAwC,2GAGxC,MAAI,+DACJ,wDAAsD,4GAIzB,yBAAuB,4DACrD,4DAA0D,2JAIzD,MAAI,+DACJ,aAAW,0JAKX,QAAM,+DACN,wCAAsC,4GAIP,2BAAyB,4DACzD,iDAA+C,qDAGjD,OAAK,0EACH,qFAAmF,kEACnE,WAAS,kEACX,SAAO,4DACrB,yGAAuG,wDACvG,4LAA0L,yCAAM,QAAM,uBAAO,4DAA0D,yCAAM,0BAAwB,uBAAO,0CAAwC,yCAAM,aAAW,uBAAO,gDAA8C,yCAAM,mBAAiB,uBAAO,gEAA8D,2DACtf,yXAAuX,8HA4C1W,QAAM,4DACnB,mFAAiF,wDACjF,4BAA0B,yCAAM,mBAAiB,uBAAO,UAAQ,yCAAM,GAAC,uBAAO,2IAAyI,yCAAM,SAAO,uBAAO,8CAA4C,yCAAM,mBAAiB,uBAAO,mLAAiL,yDACte,wLAAsL,0CAAM,cAAY,wBAAO,oHAAkH,8HAoCpT,QAAM,4DACnB,oDAAwC,wDACxC,kEAAgE,yCAAM,QAAM,uBAAO,wHAAsH,yCAAM,QAAM,uBAAO,4EAA0E,yCAAM,OAAK,uBAAO,yDAAuD,yDAC/W,4IAA0I,0CAAM,QAAM,wBAAO,QAAM,0CAAM,OAAK,wBAAO,gOAA8N,8HA0C5X,kBAAgB,4DACvC,yGAAwF,0DACxF,yDAAuD,0CAAM,OAAK,wBAAO;AAAA;AAAA,uBAEtD,0CAAM,YAAU,wBAAO,GAAC,wDAC3C,4CAA0C,yCAAM,QAAM,uBAAO;AAAA,aACpD,yCAAM,OAAK,uBAAO,8HAA4H,yCAAM,QAAM,uBAAO,GAAC,mGAK9K;AAAA,4WACiW,8HAuF7U,YAAU,4DAC3B,2IAAyI,0DACzI,yCAAuC,0CAAM,OAAK,wBAAO,mBAAiB,0CAAM,OAAK,wBAAO,oEAAkE,8HAmDjJ,QAAM,4DACnB,sEAAoE,8HAkClD,aAAW,kEACjB,OAAK,0DACjB,gRAAqP,wCAAI,iBAAe,wBAAK,GAAC,kEAC/P,UAAQ,4DACvB,wIAAuI,kEACrH,eAAa,4DAC/B,2GAAyG,uJAIxG,QAAM,6DACN,SAAO,6DACP,MAAI,6DACJ,OAAK,iJAKL,GAAC,6DACD,IAAE,6DACF,GAAC,6DACD,GAAC,oGAGD,IAAE,6DACF,KAAG,6DACH,GAAC,6DACD,GAAC,sGAGD,KAAG,+DACH,MAAI,+DACJ,OAAK,+DACL,GAAC,uGAGD,KAAG,+DACH,MAAI,+DACJ,GAAC,+DACD,GAAC,uGAGD,MAAI,+DACJ,GAAC,+DACD,MAAI,+DACJ,GAAC,uGAGD,MAAI,+DACJ,GAAC,+DACD,MAAI,+DACJ,GAAC,uGAGD,OAAK,+DACL,GAAC,+DACD,OAAK,+DACL,OAAK,uGAGL,OAAK,+DACL,GAAC,+DACD,GAAC,+DACD,OAAK,uGAGL,OAAK,+DACL,GAAC,+DACD,GAAC,+DACD,OAAK,mGAIN,sDAAoD,qDAGtD,SAAO,wBAAI,gGAA8F,4CAAQ,KAAG,wBAAS,mDAAiD,kEAC5J,WAAS,kEACL,eAAa,0DACjC,yHAAuH,qDAGzH,QAAM,wBAAI,kDAAgD,kEACvC,YAAU,uGAI7B,qFAAmF,wBAAI,oCAAkC,kEAC/F,mBAAiB,kEAClB,kBAAgB,4DACvC;AAAA,CACH,qDAGC,MAAI,gFACmB,gBAAc,4DACnC,qNAAmN,uGAIrN,WAAS,gFACS,WAAS,4DACzB,uFAAqF,kEAChE,gBAAc,0DACnC,uHAAsH,0CAAM,IAAE,wBAAO,eAAa,0CAAM,UAAQ,wBAAO,6GAAkF,kEACzO,WAAS,4DACzB,wMAAuM,4DACvM,sFAAqF,kEAC/C,mCAAiC,4DACvE,mMAAkM,4DAClM,qDAAoD,iiHAziBvDA,EA4C0GC,EAAAC,EAAAC,CAAA,EA5CzFC,EA4CmFF,EAAAG,CAAA,EA5CjDD,EAAkGC,EAAAC,EAAA,EAAjEF,EAA4DE,GAAAC,EAAA,WAAKH,EAsBxGC,EAAAG,EAAA,EApB5CJ,EAAyEI,GAAAC,EAAA,WAAAL,EAoBlCI,GAAAE,CAAA,EAlBvCN,EAG8BM,EAAAC,EAAA,EAHGP,EAGRO,GAAAC,EAAA,WAAKR,EAKCM,EAAAG,EAAA,EAH/BT,EAG0BS,GAAAC,EAAA,WAAKV,EAKCM,EAAAK,EAAA,EAHhCX,EAG2BW,GAAAC,EAAA,WAAKZ,EAKEM,EAAAO,EAAA,EAHlCb,EAG6Ba,GAAAC,EAAA,WAAed,EAc4BC,EAAAc,EAAA,EAZxEf,EAA+De,GAAAC,EAAA,WAAAhB,EAYIe,GAAAE,CAAA,EAVnEjB,EAAiGiB,EAAAC,EAAA,EAAhElB,EAA2DkB,GAAAC,EAAA,WAAKnB,EAEnCiB,EAAAG,EAAA,EAA9DpB,EAAyDoB,GAAAC,EAAA,WAAKrB,EAEAiB,EAAAK,EAAA,EAA9DtB,EAAyDsB,GAAAC,EAAA,WAAKvB,EAEoBiB,EAAAO,EAAA,EAAlFxB,EAA6EwB,GAAAC,EAAA,WAAKzB,EAEZiB,EAAAS,EAAA,EAAtE1B,EAAiE0B,GAAAC,EAAA,WAAK3B,EAERiB,EAAAW,EAAA,EAA9D5B,EAAyD4B,GAAAC,EAAA,WAAe7B,EAQsBC,EAAA6B,EAAA,EAN9F9B,EAAmE8B,GAAAC,EAAA,WAAA/B,EAMsB8B,GAAAE,CAAA,EAJzFhC,EAA6FgC,EAAAC,EAAA,EAA5DjC,EAAuDiC,GAAAC,EAAA,WAAKlC,EAEzBgC,EAAAG,EAAA,EAApEnC,EAA+DmC,GAAAC,EAAA,WAAKpC,EAEgBgC,EAAAK,EAAA,EAApFrC,EAA+EqC,GAAAC,EAAA,+BAShF1C,EAA6BC,EAAA0C,GAAAxC,CAAA,qBAC7BH,EAAwbC,EAAA2C,GAAAzC,CAAA,qBACxbH,EAAqyBC,EAAA4C,GAAA1C,CAAA,qBACryBH,EAA0CC,EAAA6C,GAAA3C,CAAA,qBAC1CH,EAAqGC,EAAA8C,GAAA5C,CAAA,qBACrGH,EAAwDC,EAAA+C,GAAA7C,CAAA,qBACxDH,EAAwLC,EAAAgD,GAAA9C,CAAA,qBACxLH,EAqBOC,EAAAiD,EAAA/C,CAAA,EApBPC,EAKO8C,EAAAC,EAAA,EAJP/C,EAGI+C,GAAAC,EAAA,EAFJhD,EAAYgD,GAAAC,EAAA,oBACZjD,EAAmBgD,GAAAE,EAAA,mBAGnBlD,EAaO8C,EAAAK,CAAA,EAZPnD,EAGImD,EAAAC,EAAA,EAFJpD,EAAeoD,GAAAC,EAAA,oBACfrD,EAAiCoD,GAAAE,EAAA,mBAEjCtD,EAGImD,EAAAI,EAAA,EAFJvD,EAAcuD,GAAAC,EAAA,oBACdxD,EAA8DuD,GAAAE,EAAA,mBAE9DzD,EAGImD,EAAAO,EAAA,EAFJ1D,EAAkB0D,GAAAC,EAAA,oBAClB3D,EAAwD0D,GAAAE,EAAA,qBAIxDhE,EAA0DC,EAAAgE,GAAA9D,CAAA,qBAC1DH,EAAiJC,EAAAiE,GAAA/D,CAAA,qBACjJH,EAiBOC,EAAAkE,EAAAhE,CAAA,EAhBPC,EAKO+D,EAAAC,EAAA,EAJPhE,EAGIgE,GAAAC,EAAA,EAFJjE,EAAYiE,GAAAC,EAAA,oBACZlE,EAAmBiE,GAAAE,EAAA,mBAGnBnE,EASO+D,EAAAK,EAAA,EARPpE,EAGIoE,GAAAC,EAAA,EAFJrE,EAAcqE,GAAAC,EAAA,oBACdtE,EAAgDqE,GAAAE,EAAA,oBAEhDvE,EAGIoE,GAAAI,EAAA,EAFJxE,EAAYwE,GAAAC,EAAA,oBACZzE,EAA8DwE,GAAAE,EAAA,qBAI9D9E,EAA4DC,EAAA8E,GAAA5E,CAAA,qBAC5DH,EAAgEC,EAAA+E,GAAA7E,CAAA,qBAChEH,EAaOC,EAAAgF,EAAA9E,CAAA,EAZPC,EAKO6E,EAAAC,EAAA,EAJP9E,EAGI8E,GAAAC,EAAA,EAFJ/E,EAAY+E,GAAAC,EAAA,oBACZhF,EAAmB+E,GAAAE,EAAA,mBAGnBjF,EAKO6E,EAAAK,EAAA,EAJPlF,EAGIkF,GAAAC,EAAA,EAFJnF,EAAcmF,GAAAC,EAAA,oBACdpF,EAA8CmF,GAAAE,EAAA,qBAI9CzF,EAAgEC,EAAAyF,GAAAvF,CAAA,qBAChEH,EAGaC,EAAA0F,GAAAxF,CAAA,WAHqCC,EAGxCuF,GAAAC,EAAA,qBACV5F,EAAyFC,EAAA4F,GAAA1F,CAAA,qBACzFH,EAAgCC,EAAA6F,GAAA3F,CAAA,qBAChCH,EAA4BC,EAAA8F,GAAA5F,CAAA,qBAC5BH,EAA6GC,EAAA+F,GAAA7F,CAAA,qBAC7GH,EAA4fC,EAAAgG,EAAA9F,CAAA,UAA/TC,EAAmB6F,EAAAC,EAAA,mBAA0D9F,EAAqC6F,EAAAE,EAAA,mBAAwC/F,EAAwB6F,EAAAG,EAAA,mBAA8ChG,EAA8B6F,EAAAI,EAAA,6BAC3brG,EAA6XC,EAAAqG,GAAAnG,CAAA,qBAC7XH,EA0C2DC,EAAAsG,GAAApG,CAAA,4BAC3DH,EAA0BC,EAAAuG,GAAArG,CAAA,qBAC1BH,EAAuFC,EAAAwG,GAAAtG,CAAA,qBACvFH,EAA4eC,EAAAyG,EAAAvG,CAAA,UAA/cC,EAA8BsG,EAAAC,EAAA,mBAAQvG,EAAcsG,EAAAE,EAAA,mBAAyIxG,EAAoBsG,EAAAG,EAAA,mBAA4CzG,EAA8BsG,EAAAI,EAAA,6BACxT9G,EAAuUC,EAAA8G,EAAA5G,CAAA,UAA9IC,EAAyB2G,EAAAC,EAAA,6BAClNhH,EAkC4DC,EAAAgH,GAAA9G,CAAA,4BAC5DH,EAA0BC,EAAAiH,GAAA/G,CAAA,qBAC1BH,EAA8CC,EAAAkH,GAAAhH,CAAA,qBAC9CH,EAAqXC,EAAAmH,EAAAjH,CAAA,UAAlTC,EAAmBgH,EAAAC,EAAA,mBAAsHjH,EAAmBgH,EAAAE,EAAA,mBAA0ElH,EAAkBgH,EAAAG,EAAA,6BAC3TvH,EAAyZC,EAAAuH,EAAArH,CAAA,UAA5QC,EAAmBoH,EAAAC,EAAA,mBAAMrH,EAAkBoH,EAAAE,EAAA,6BACxL1H,EAwC2DC,EAAA0H,GAAAxH,CAAA,4BAC3DH,EAA8CC,EAAA2H,GAAAzH,CAAA,qBAC9CH,EAA8FC,EAAA4H,GAAA1H,CAAA,qBAC9FH,EAEiDC,EAAA6H,EAAA3H,CAAA,UAFSC,EAAkB0H,EAAAC,EAAA,mBAEtD3H,EAAuB0H,EAAAE,EAAA,6BAC7ChI,EACiLC,EAAAgI,EAAA9H,CAAA,UADpIC,EAAmB6H,EAAAC,EAAA,mBACpD9H,EAAkB6H,EAAAE,EAAA,mBAA4H/H,EAAmB6H,EAAAG,EAAA,6BAC7KpI,EAKoWC,EAAAoI,GAAAlI,CAAA,EALjWC,EAIHiI,GAAAC,EAAA,qBAEAtI,EAqF2DC,EAAAsI,GAAApI,CAAA,4BAC3DH,EAAkCC,EAAAuI,GAAArI,CAAA,qBAClCH,EAA+IC,EAAAwI,GAAAtI,CAAA,qBAC/IH,EAAoKC,EAAAyI,EAAAvI,CAAA,UAA1HC,EAAkBsI,EAAAC,EAAA,mBAAiBvI,EAAkBsI,EAAAE,EAAA,6BAC/F5I,EAiD2DC,EAAA4I,GAAA1I,CAAA,4BAC3DH,EAA0BC,EAAA6I,GAAA3I,CAAA,qBAC1BH,EAA0EC,EAAA8I,GAAA5I,CAAA,qBAC1EH,EAgC2DC,EAAA+I,GAAA7I,CAAA,4BAC3DH,EAAoCC,EAAAgJ,GAAA9I,CAAA,qBACpCH,EAAwBC,EAAAiJ,GAAA/I,CAAA,qBACxBH,EAAoRC,EAAAkJ,EAAAhJ,CAAA,UAA5BC,EAAwB+I,EAAAC,EAAA,6BAChRpJ,EAA8BC,EAAAoJ,GAAAlJ,CAAA,qBAC9BH,EAA6IC,EAAAqJ,GAAAnJ,CAAA,qBAC7IH,EAAsCC,EAAAsJ,GAAApJ,CAAA,qBACtCH,EAA+GC,EAAAuJ,GAAArJ,CAAA,qBAC/GH,EAiEOC,EAAAwJ,EAAAtJ,CAAA,EAhEPC,EAOOqJ,EAAAC,EAAA,EANPtJ,EAKIsJ,GAAAC,CAAA,EAJJvJ,EAAcuJ,EAAAC,EAAA,mBACdxJ,EAAeuJ,EAAAE,EAAA,mBACfzJ,EAAYuJ,EAAAG,EAAA,mBACZ1J,EAAauJ,EAAAI,EAAA,mBAGb3J,EAuDOqJ,EAAAO,CAAA,EAtDP5J,EAKI4J,EAAAC,CAAA,EAJJ7J,EAAS6J,EAAAC,EAAA,mBACT9J,EAAU6J,EAAAE,EAAA,mBACV/J,EAAS6J,EAAAG,EAAA,mBACThK,EAAS6J,EAAAI,EAAA,mBAETjK,EAKI4J,EAAAM,CAAA,EAJJlK,EAAUkK,EAAAC,EAAA,mBACVnK,EAAWkK,EAAAE,EAAA,mBACXpK,EAASkK,EAAAG,EAAA,mBACTrK,EAASkK,EAAAI,EAAA,mBAETtK,EAKI4J,EAAAW,CAAA,EAJJvK,EAAWuK,EAAAC,EAAA,mBACXxK,EAAYuK,EAAAE,EAAA,mBACZzK,EAAauK,EAAAG,EAAA,mBACb1K,EAASuK,EAAAI,EAAA,mBAET3K,EAKI4J,EAAAgB,CAAA,EAJJ5K,EAAW4K,EAAAC,EAAA,mBACX7K,EAAY4K,EAAAE,EAAA,mBACZ9K,EAAS4K,EAAAG,EAAA,mBACT/K,EAAS4K,EAAAI,EAAA,mBAEThL,EAKI4J,EAAAqB,CAAA,EAJJjL,EAAYiL,EAAAC,EAAA,mBACZlL,EAASiL,EAAAE,EAAA,mBACTnL,EAAYiL,EAAAG,EAAA,mBACZpL,EAASiL,EAAAI,EAAA,mBAETrL,EAKI4J,EAAA0B,CAAA,EAJJtL,EAAYsL,EAAAC,EAAA,mBACZvL,EAASsL,EAAAE,EAAA,mBACTxL,EAAYsL,EAAAG,EAAA,mBACZzL,EAASsL,EAAAI,EAAA,mBAET1L,EAKI4J,EAAA+B,CAAA,EAJJ3L,EAAa2L,EAAAC,EAAA,mBACb5L,EAAS2L,EAAAE,EAAA,mBACT7L,EAAa2L,EAAAG,EAAA,mBACb9L,EAAa2L,EAAAI,EAAA,mBAEb/L,EAKI4J,EAAAoC,CAAA,EAJJhM,EAAagM,EAAAC,EAAA,mBACbjM,EAASgM,EAAAE,EAAA,mBACTlM,EAASgM,EAAAG,EAAA,mBACTnM,EAAagM,EAAAI,EAAA,mBAEbpM,EAKI4J,EAAAyC,CAAA,EAJJrM,EAAaqM,EAAAC,EAAA,mBACbtM,EAASqM,EAAAE,EAAA,mBACTvM,EAASqM,EAAAG,EAAA,mBACTxM,EAAaqM,EAAAI,EAAA,qBAIb7M,EAGkLC,EAAA6M,EAAA3M,CAAA,UAH3HC,EAG3C0M,EAAAC,EAAA,mBAA8F3M,EAAoB0M,EAAAE,EAAA,6BAC9HhN,EAAgCC,EAAAgN,GAAA9M,CAAA,qBAChCH,EAAwCC,EAAAiN,GAAA/M,CAAA,qBACxCH,EAG8DC,EAAAkN,EAAAhN,CAAA,UAH4DC,EAG/G+M,EAAAC,EAAA,6BACXpN,EAAkCC,EAAAoN,GAAAlN,CAAA,qBAClCH,EAG6HC,EAAAqN,GAAAnN,CAAA,EAH1HC,EAGqFkN,GAAAC,EAAA,8BACxFvN,EAAgDC,EAAAuN,GAAArN,CAAA,qBAChDH,EAA8CC,EAAAwN,GAAAtN,CAAA,qBAC9CH,EAIYC,EAAAyN,GAAAvN,CAAA,WAHZC,EAGSsN,GAAAC,EAAA,qBACT3N,EAA0CC,EAAA2N,GAAAzN,CAAA,qBAC1CH,EAAyNC,EAAA4N,GAAA1N,CAAA,qBACzNH,EAGiBC,EAAA6N,GAAA3N,CAAA,EAHdC,EAGW0N,GAAAC,EAAA,qBACd/N,EAAgCC,EAAA+N,GAAA7N,CAAA,qBAChCH,EAA2FC,EAAAgO,GAAA9N,CAAA,qBAC3FH,EAA0CC,EAAAiO,GAAA/N,CAAA,qBAC1CH,EAA+PC,EAAAkO,EAAAhO,CAAA,UAAtIC,EAAe+N,EAAAC,EAAA,mBAAahO,EAAqB+N,EAAAE,EAAA,6BAC1KrO,EAAgCC,EAAAqO,GAAAnO,CAAA,qBAChCH,EAA6MC,EAAAsO,GAAApO,CAAA,qBAC7MH,EAA2FC,EAAAuO,GAAArO,CAAA,qBAC3FH,EAA8EC,EAAAwO,GAAAtO,CAAA,qBAC9EH,EAAwMC,EAAAyO,GAAAvO,CAAA,qBACxMH,EAA0DC,EAAA0O,GAAAxO,CAAA,i4CA5f5CyO,GAAQ,CAAI,OAAS,QAAQ"}