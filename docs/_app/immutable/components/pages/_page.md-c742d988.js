import{S as zd,i as Yd,s as Gd,k as s,q as c,a as u,l as e,m as o,r as p,h as a,a6 as Wd,c as r,n as k,E as Xd,b as i,G as n,B as mu}from"../../chunks/index-954d79cc.js";function jd(Bd){let S,U,Pn,ot,Oo,ct,pt,Io,N,Cn,lt,So,An,it,Uo,Bn,ut,No,Rn,rt,Fo,kt,dt,Vo,b,Hn,ht,Mo,Ln,ft,zo,qn,mt,Yo,On,vt,Go,In,yt,Wo,Sn,bt,Xo,Et,_t,jo,V,Un,wt,Ko,Nn,Tt,Jo,Fn,xt,Qo,Js,Dt,Zo,Qs,Vn,$o,Zs,Mn,go,$s,Pt,tc,gs,zn,nc,te,Ct,ac,ne,Yn,sc,ae,M,fa,At,ma,ec,oc,va,cc,pc,F,Bt,ya,lc,ic,ba,uc,rc,Rt,Ea,kc,dc,_a,hc,fc,Ht,wa,mc,vc,Ta,yc,se,Lt,bc,ee,Gn,Ec,oe,z,xa,qt,Da,_c,wc,Pa,Tc,xc,Ot,It,Ca,Dc,Pc,Aa,Cc,Ac,St,Ba,Bc,Rc,Ra,Hc,ce,Ut,Lc,pe,Wn,qc,le,Y,Ha,Nt,La,Oc,Ic,qa,Sc,Uc,Oa,Ft,Ia,Nc,Fc,Sa,Vc,ie,Vt,Mc,ue,Mt,zc,zt,Yc,re,Xn,Gc,ke,Yt,Wc,de,Gt,Xc,he,jn,jc,fe,f,Kc,Ua,Jc,Qc,Na,Zc,$c,Fa,gc,tp,Va,np,ap,me,Kn,sp,ve,Wt,Rd=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>

<span class="token comment">// v202205626</span>

<span class="token comment">// Pay equal payments at regular intervals using input locks</span>
<span class="token keyword">contract</span> <span class="token class-name">Annuity</span><span class="token punctuation">(</span>

  <span class="token comment">// interval for payouts, in blocks</span>
  <span class="token builtin">int</span> period<span class="token punctuation">,</span>

  <span class="token comment">// LockingBytecode of the beneficiary,</span>
  <span class="token comment">// the address receiving payments</span>
  <span class="token builtin">bytes</span> recipientLockingBytecode<span class="token punctuation">,</span>

  <span class="token comment">// amount paid in each installment</span>
  <span class="token builtin">int</span> installment<span class="token punctuation">,</span>

  <span class="token comment">// extra allowance for administration of contract</span>
  <span class="token comment">// fees are paid from executors' allowance.</span>
  <span class="token builtin">int</span> executorAllowance
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Check that the first output sends to the recipient</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> recipientLockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Check that time has passed and that time locks are enabled</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// require the second output to match the active bytecode</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value on the contract</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Calculate value returned to the contract</span>
    <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> installment <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

    <span class="token comment">// Check that the outputs send the correct amounts</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> installment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ye,Xt,ep,be,Jn,op,Ee,m,cp,Ma,pp,lp,za,ip,up,Ya,rp,kp,Ga,dp,hp,_e,G,fp,Wa,mp,vp,we,jt,Hd=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.0</span><span class="token punctuation">;</span>

 <span class="token keyword">contract</span> <span class="token class-name">Divide</span><span class="token punctuation">(</span>
   <span class="token comment">// allowance for party executing the contract</span>
   <span class="token builtin">int</span> executorAllowance<span class="token punctuation">,</span>
   <span class="token comment">// number of outputs receiving payout</span>
   <span class="token builtin">int</span> divisor<span class="token punctuation">,</span>

   <span class="token comment">// for each beneficiary,</span>
   <span class="token comment">// take the LockingBytecode as input</span>
   <span class="token builtin">bytes</span> r0LockingBytecode<span class="token punctuation">,</span>
   <span class="token builtin">bytes</span> r1LockingBytecode
 <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// distributes to each output in order</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> r0LockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> r1LockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value of inputs</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Total value paid to beneficiaries,</span>
    <span class="token comment">// minus executor allowance</span>
    <span class="token builtin">int</span> distributedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

    <span class="token comment">// Value paid to each beneficiary</span>
    <span class="token builtin">int</span> distribution <span class="token operator">=</span> distributedValue <span class="token operator">/</span> divisor<span class="token punctuation">;</span>

    <span class="token comment">// each output must be greater</span>
    <span class="token comment">// or equal to the distribution amount</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> distribution<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> distribution<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span></code>`,Te,Kt,yp,xe,Qn,bp,De,v,Ep,Xa,_p,wp,ja,Tp,xp,Ka,Dp,Pp,Pe,R,Cp,Ja,Ap,Bp,Qa,Rp,Hp,Ce,Jt,Ld=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.0</span><span class="token punctuation">;</span>

<span class="token comment">// v20220609</span>

<span class="token keyword">contract</span> <span class="token class-name">Faucet</span><span class="token punctuation">(</span>

  <span class="token comment">// interval for payouts, in blocks</span>
  <span class="token builtin">int</span> period<span class="token punctuation">,</span>

  <span class="token comment">// amount to be paid by faucet allowance.</span>
  <span class="token builtin">int</span> payout<span class="token punctuation">,</span>

  <span class="token comment">// random number input into contract to have more than one</span>
  <span class="token builtin">int</span> index
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">drip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Check that time has passed and that time locks are enabled</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// use the index</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// require the first output to match the active bytecode</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value on the contract</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Calculate value returned to the contract</span>
    <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> payout<span class="token punctuation">;</span>

    <span class="token comment">// If the value on the contract exceeds the payout amount</span>
    <span class="token comment">// then assert that the value must return to the contract</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>currentValue <span class="token operator">></span> payout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,Ae,Qt,Lp,Be,Zn,qp,Re,H,Op,Za,Ip,Sp,$a,Up,Np,He,y,Fp,ga,Vp,Mp,ts,zp,Yp,ns,Gp,Wp,Le,Zt,$t,vu,Xp,qe,gt,qd=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>

<span class="token comment">// v20220727</span>

<span class="token comment">// A faucet with proof of work.</span>
<span class="token keyword">contract</span> <span class="token class-name">Mine</span><span class="token punctuation">(</span>

  <span class="token comment">// interval for payouts, in blocks</span>
  <span class="token builtin">int</span> period<span class="token punctuation">,</span>

  <span class="token comment">// amount to be paid by faucet allowance.</span>
  <span class="token builtin">int</span> payout<span class="token punctuation">,</span>

  <span class="token comment">// how many leading zeros should the hash of the nonce and current bytecode have</span>
  <span class="token builtin">int</span> difficulty<span class="token punctuation">,</span>

  <span class="token comment">// the old nonce, which is replaced each time.</span>
  <span class="token builtin">bytes7</span> canary
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token builtin">bytes7</span> nonce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Check that time has passed and that time locks are enabled</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Use the old nonce</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>canary<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Check that the new nonce creates a hash with</span>
    <span class="token comment">// some D (difficulty) leading zeros when hashed with the active bytecode</span>
    <span class="token builtin">bytes</span> version <span class="token operator">=</span> <span class="token builtin">byte</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes</span> zeros <span class="token operator">=</span> <span class="token builtin">bytes7</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes</span> hash <span class="token operator">=</span> <span class="token function">sha256</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode <span class="token operator">+</span> <span class="token builtin">bytes7</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> zeros<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// calculate the locking bytecode</span>
    <span class="token comment">// of a new mining contract with the nonce as canary</span>
    <span class="token builtin">bytes</span> newContract <span class="token operator">=</span> <span class="token number">0x7</span> <span class="token operator">+</span> <span class="token builtin">bytes7</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes20</span> contractHash <span class="token operator">=</span> <span class="token function">hash160</span><span class="token punctuation">(</span>newContract<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">bytes23</span> lockingCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span>contractHash<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// Require the first output details the parameters</span>
    <span class="token comment">// of the mining contract in a zero value OP_RETURN</span>
    <span class="token builtin">bytes</span> announcement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeNullData</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token comment">// The protocol</span>
      <span class="token number">0x7574786f</span><span class="token punctuation">,</span>
      <span class="token comment">// M for mining contract</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// version</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The period,</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The payout,</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>payout<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// preceding zeros on solution</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The current nonce (future canary), of the mining contract,</span>
      <span class="token comment">// where funds are simultaneously sent to</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// The new bytecode</span>
      <span class="token builtin">bytes</span><span class="token punctuation">(</span>lockingCode<span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Assure that the first output matches the arguments to the contract</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> announcement<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// check that the change output sends to that contract</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> lockingCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the total value on the contract</span>
    <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token comment">// Calculate value returned to the contract</span>
    <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> payout<span class="token punctuation">;</span>

    <span class="token comment">// If the value on the contract exceeds the payout amount</span>
    <span class="token comment">// then assert that the value must return to the contract</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>currentValue <span class="token operator">></span> payout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Assure it has zero value</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,Oe,tn,jp,Ie,$n,Kp,Se,L,Jp,as,Qp,Zp,ss,$p,gp,Ue,nn,Od=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">>=</span> <span class="token number">0.7</span><span class="token number">.1</span><span class="token punctuation">;</span>

<span class="token comment">// v20220522</span>

<span class="token keyword">contract</span> <span class="token class-name">Perpetuity</span><span class="token punctuation">(</span>

 <span class="token comment">// interval for payouts, in blocks</span>
 <span class="token builtin">int</span> period<span class="token punctuation">,</span>

 <span class="token comment">// lockingBytecode of the beneficiary,</span>
 <span class="token comment">// the address receiving payments</span>
 <span class="token builtin">bytes</span> recipientLockingBytecode<span class="token punctuation">,</span>

 <span class="token comment">// extra allowance for administration of contract</span>
 <span class="token comment">// fees are paid from executors' allowance.</span>
 <span class="token builtin">int</span> executorAllowance<span class="token punctuation">,</span>

 <span class="token comment">// divisor for the payout,</span>
 <span class="token comment">// each payout must be greater than</span>
 <span class="token comment">// the total amount held on the contract</span>
 <span class="token comment">// divided by this number</span>
 <span class="token builtin">int</span> decay

<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">// Check that the first output sends to the recipient</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> recipientLockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that time has passed and that time locks are enabled</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>age <span class="token operator">>=</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// require the second output to match the active bytecode</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">LockingBytecodeP2SH</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeBytecode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Get the total value on the contract</span>
  <span class="token builtin">int</span> currentValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

  <span class="token comment">// The payout is the current value divided by the decay</span>
  <span class="token builtin">int</span> installment <span class="token operator">=</span> currentValue<span class="token operator">/</span>decay<span class="token punctuation">;</span>

  <span class="token comment">// Calculate value returned to the contract</span>
  <span class="token builtin">int</span> returnedValue <span class="token operator">=</span> currentValue <span class="token operator">-</span> installment <span class="token operator">-</span> executorAllowance<span class="token punctuation">;</span>

  <span class="token comment">// Check that the outputs send the correct amounts</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> installment<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> returnedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ne,an,tl,Fe,gn,nl,Ve,sn,Id=`<code class="language-solidity"><span class="token keyword">pragma</span> cashscript <span class="token operator">^</span><span class="token version number">0.7.0</span><span class="token punctuation">;</span>

<span class="token comment">/* Allows publishing some OP_RETURN message,
 * given that:
 * 1. the hash160 value of the zero value OP_RETURN message is passed
 * 2. the first output has zero value
 * 3. the remaining value is pass back to the contract, mostly.
 */</span>


<span class="token keyword">contract</span> <span class="token class-name">Record</span><span class="token punctuation">(</span><span class="token builtin">int</span> maxFee<span class="token punctuation">,</span> <span class="token builtin">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token builtin">bytes20</span> dataHash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">// this does nothing</span>
  <span class="token comment">// different indices enable different contract addresses</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that the first tx output is a zero value opcode matching the provided hash</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">hash160</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode<span class="token punctuation">)</span> <span class="token operator">==</span> dataHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// calculate the fee required to propagate the transaction 1 sat/ byte</span>
  <span class="token builtin">int</span> baseFee <span class="token operator">=</span> <span class="token number">162</span><span class="token punctuation">;</span>

  <span class="token builtin">int</span> fee <span class="token operator">=</span> baseFee <span class="token operator">+</span> tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>fee<span class="token operator">&lt;=</span>maxFee<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check that the second tx output sends the change back</span>
  <span class="token builtin">int</span> newValue <span class="token operator">=</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">-</span> fee<span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode <span class="token operator">==</span> tx<span class="token punctuation">.</span>inputs<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeInputIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>lockingBytecode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">>=</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Me,en,al,ze,on,sl,Ye,ta,el,Ge,cn,ol,We,na,cl,Xe,pn,pl,je,aa,ll,Ke,W,es,E,os,il,ul,cs,rl,kl,ps,dl,hl,ls,fl,ml,d,_,is,vl,yl,us,bl,El,rs,_l,wl,ks,Tl,xl,w,ds,Dl,Pl,hs,Cl,Al,fs,Bl,Rl,ms,Hl,Ll,T,vs,ql,Ol,ys,Il,Sl,bs,Ul,Nl,Es,Fl,Vl,x,_s,Ml,zl,ws,Yl,Gl,Ts,Wl,Xl,xs,jl,Kl,D,Ds,Jl,Ql,Ps,Zl,$l,Cs,gl,ti,As,ni,ai,P,Bs,si,ei,Rs,oi,ci,Hs,pi,li,Ls,ii,ui,C,qs,ri,ki,Os,di,hi,Is,fi,mi,Ss,vi,yi,A,Us,bi,Ei,Ns,_i,wi,Fs,Ti,xi,Vs,Di,Pi,B,Ms,Ci,Ai,zs,Bi,Ri,Ys,Hi,Li,Gs,qi,Je,ln,Oi,Qe,un,Ii,Ze,X,Si,rn,Ui,Ni,$e,kn,Fi,ge,dn,hn,Vi,Mi,to,fn,zi,no,mn,Yi,ao,vn,Gi,yn,Wi,so,bn,Xi,eo,sa,ji,oo,ea,En,Ki,co,_n,Ji,po,oa,Qi,lo,wn,Zi,io,q,$i,Ws,gi,tu,Xs,nu,au,uo,Tn,su,ro,ca,eu,ko,pa,ou,ho,xn,cu,fo,la,pu,mo,ia,lu;return{c(){S=s("nav"),U=s("ol"),Pn=s("li"),ot=s("a"),Oo=c("Welcome!"),ct=s("li"),pt=s("a"),Io=c("Contract Types"),N=s("ol"),Cn=s("li"),lt=s("a"),So=c("Beneficiary Contracts"),An=s("li"),it=s("a"),Uo=c("Distributive Contracts"),Bn=s("li"),ut=s("a"),No=c("Informational Contracts"),Rn=s("li"),rt=s("a"),Fo=c("Timelock v non-timelocked"),kt=s("li"),dt=s("a"),Vo=c("Implemented Contracts"),b=s("ol"),Hn=s("li"),ht=s("a"),Mo=c("Annuity"),Ln=s("li"),ft=s("a"),zo=c("Divide"),qn=s("li"),mt=s("a"),Yo=c("Faucet"),On=s("li"),vt=s("a"),Go=c("Mine-able Faucet"),In=s("li"),yt=s("a"),Wo=c("Perpetuity"),Sn=s("li"),bt=s("a"),Xo=c("Record"),Et=s("li"),_t=s("a"),jo=c("Definitions"),V=s("ol"),Un=s("li"),wt=s("a"),Ko=c("Units"),Nn=s("li"),Tt=s("a"),Jo=c("Languages"),Fn=s("li"),xt=s("a"),Qo=c("Script"),Js=u(),Dt=s("h1"),Zo=c("Welcome!"),Qs=u(),Vn=s("p"),$o=c("Unspent Phi (\u20BF\u2219\u03D5) is an app for creating (and publishing) a set of simple contracts on the Bitcoin Cash (BCH) blockchain that anyone can execute. These contracts lock the value of unspent outputs from earlier transactions (UTXOs), and allow some small reward for any party to call a known contract (if valid according to the rules of BitcoinScript). Although simple, these contracts may be chained together to create complex outcomes."),Zs=u(),Mn=s("p"),go=c("\u20BF\u2219\u03D5 contracts may be thought of as automata, machines that are unlocked and stepped forward by random participants on the blockchain. No one party has control, it\u2019s a race to spend them first. However, the code to unlock them must be known for the code to stepped forward. Money sent to \u20BF\u2219\u03D5 contracts appear identical to any other pay-to-script UTXOs on the network. Nothing is known about how to spend the contract until it is spent at least once, so in order for the contract to function automatically, both their existence and the parameters to unlock them must be known. While the code to unlock is broadcasted by spending the contract once, not all contracts can be spent right away, so it\u2019s easier and safer just to publish some unlock record and not worry about forgetting how to unlock them."),$s=u(),Pt=s("h1"),tc=c("Contract Types"),gs=u(),zn=s("p"),nc=c("Each \u20BF\u2219\u03D5 contract is designed to do one thing. The contracts available (so far) are as follows:"),te=u(),Ct=s("h2"),ac=c("Beneficiary Contracts"),ne=u(),Yn=s("p"),sc=c("Some contracts control value on behalf of the contract creator. They all have an executor allowance which can be claimed by the party which submits a valid spending transactions."),ae=u(),M=s("table"),fa=s("thead"),At=s("tr"),ma=s("th"),ec=c("Name"),oc=u(),va=s("th"),cc=c("Description"),pc=u(),F=s("tbody"),Bt=s("tr"),ya=s("td"),lc=c("Annuity"),ic=u(),ba=s("td"),uc=c("Equal payments over time."),rc=u(),Rt=s("tr"),Ea=s("td"),kc=c("Divide"),dc=u(),_a=s("td"),hc=c("Divide money into equal payments, up to four addresses"),fc=u(),Ht=s("tr"),wa=s("td"),mc=c("Perpetuity"),vc=u(),Ta=s("td"),yc=c("Pay a fixed fraction of total value at intervals"),se=u(),Lt=s("h2"),bc=c("Distributive Contracts"),ee=u(),Gn=s("p"),Ec=c("Contracts with locked value that can be spent by anyone can be characterized as \u201Cfree\u201D. At present these include faucets, mining contracts."),oe=u(),z=s("table"),xa=s("thead"),qt=s("tr"),Da=s("th"),_c=c("Name"),wc=u(),Pa=s("th"),Tc=c("Description"),xc=u(),Ot=s("tbody"),It=s("tr"),Ca=s("td"),Dc=c("Faucet"),Pc=u(),Aa=s("td"),Cc=c("Distributes some free bitcoin per period"),Ac=u(),St=s("tr"),Ba=s("td"),Bc=c("Mine"),Rc=u(),Ra=s("td"),Hc=c("Distributes some bitcoin per period, for proof of work"),ce=u(),Ut=s("h2"),Lc=c("Informational Contracts"),pe=u(),Wn=s("p"),qc=c("A contract providing the facility to record data for free."),le=u(),Y=s("table"),Ha=s("thead"),Nt=s("tr"),La=s("th"),Oc=c("Name"),Ic=u(),qa=s("th"),Sc=c("Description"),Uc=u(),Oa=s("tbody"),Ft=s("tr"),Ia=s("td"),Nc=c("Record"),Fc=u(),Sa=s("td"),Vc=c("Broadcast a contract to the blockchain"),ie=u(),Vt=s("h2"),Mc=c("Timelock v non-timelocked"),ue=u(),Mt=s("p"),zc=c("Contracts in BitcoinScript may be locked using "),zt=s("a"),Yc=c("BIP68"),re=u(),Xn=s("p"),Gc=c("The Divide and Record contracts are not time-locked, they may be called at anytime."),ke=u(),Yt=s("h1"),Wc=c("Implemented Contracts"),de=u(),Gt=s("h2"),Xc=c("Annuity"),he=u(),jn=s("p"),jc=c("The annuity contract pays a fixed amount (in satoshis) to a predefined locking bytecode (i.e. address)."),fe=u(),f=s("p"),Kc=c("To prevent the contract from being called successively (thus paying out all at once), a timelock is added restricting input be of a certain age (in blocks), this parameter is called the "),Ua=s("code"),Jc=c("period"),Qc=c(". The beneficiary address (or contract) is denoted by the "),Na=s("code"),Zc=c("recipientLockingBytecode"),$c=c(". The amount paid in each period is the "),Fa=s("code"),gc=c("installment"),tp=c(". To aid in execution, a small fee is left as "),Va=s("code"),np=c("executorAllowance"),ap=c(" for each execution of the contract, it may be paid to anyone."),me=u(),Kn=s("p"),sp=c("This contract: checks that the first output pays to the beneficiary; checks that the timelock is satisfied; checks that the second output pays back to the contract; gets the total value being spent; calculates the amount to be returned, and finally, checks that both the installment amount of the first output & the total returned to the contract exceed the required amounts."),ve=u(),Wt=s("pre"),ye=u(),Xt=s("h2"),ep=c("Divide"),be=u(),Jn=s("p"),op=c("The divide contract splits inputs across a predefined set of output destinations."),Ee=u(),m=s("p"),cp=c("Each output is denoted by "),Ma=s("code"),pp=c("r#LockingBytecode"),lp=c(", where "),za=s("code"),ip=c("#"),up=c(" is the index of the output. Since early BitcoinScript did not have loops, this contract was written with a static list of outputs and a "),Ya=s("code"),rp=c("divisor"),kp=c(", which is simply the number of outputs. An "),Ga=s("code"),dp=c("executorAllowance"),hp=c(" amount is subtracted from the total distribution amount, which may be spent by anyone as long as the amount payed to the hardcoded receipts equals or exceeds the alloted share."),_e=u(),G=s("p"),fp=c("This contract: checks that each of the output destinations match the predefined output; calculates the total value on the contract; calculates the amount to be paid to each receipt ("),Wa=s("code"),mp=c("distribution"),vp=c("), and finally calculates that each receipt receives an output greater than, or equal to, the distribution amount."),we=u(),jt=s("pre"),Te=u(),Kt=s("h2"),yp=c("Faucet"),xe=u(),Qn=s("p"),bp=c("The faucet contract pays \u201Cfree\u201D bitcoin."),De=u(),v=s("p"),Ep=c("To prevent the faucet from being drained by successive calls, a "),Xa=s("code"),_p=c("period"),wp=c(" timeout is set to specify the minimum age of the input being spent. The amount available to be spent is defined by a "),ja=s("code"),Tp=c("payout"),xp=c(". As a convenience, and to have multiple faucets with the same payout, an "),Ka=s("code"),Dp=c("index"),Pp=c(" parameter is added to distinguish identical contracts."),Pe=u(),R=s("p"),Cp=c("The steps of this contract are as follows: first, it requires that the transaction be called with an age that is greater than the current "),Ja=s("code"),Ap=c("period"),Bp=c("; the "),Qa=s("code"),Rp=c("index"),Hp=c(" is used so that it is not unused; next the first output must return all value to the faucet contract, and finally the returned value is calculate and must be returned to the faucet if the current value exceeds the payout."),Ce=u(),Jt=s("pre"),Ae=u(),Qt=s("h2"),Lp=c("Mine-able Faucet"),Be=u(),Zn=s("p"),qp=c("The \u20BF\u2219\u03D5 mining covenant is very much like the faucet, with some additional requirements."),Re=u(),H=s("p"),Op=c("First, execution of the contract must be called with a "),Za=s("code"),Ip=c("nonce"),Sp=c(` [a random value used once]
which when added to the current locking bytecode and hashed results in a value starting with some number of zeros.
How many zeros is the `),$a=s("code"),Up=c("difficulty"),Np=c("."),He=u(),y=s("p"),Fp=c("Finally, prior to spending the the mining "),ga=s("code"),Vp=c("payout"),Mp=c(`, the spender must announce
the winning `),ts=s("code"),zp=c("nonce"),Yp=c(" in an OP_RETURN of the first output, and send the balance of the contract to a new mining covenant with the new nonce as a "),ns=s("code"),Gp=c("canary"),Wp=c("."),Le=u(),Zt=s("p"),$t=s("img"),Xp=c(`
Like an infinite series of Failures to Deliver (FTDs) for a stock, or banging forex futures to manipulate an outcome in currency markets, the canary is always brought back to life with a new copy of itself. You don\u2019t have to take over a whole blockchain to create a market for your energy, just mine a covenant\u2014there will be far less idiosyncratic risk.`),qe=u(),gt=s("pre"),Oe=u(),tn=s("h2"),jp=c("Perpetuity"),Ie=u(),$n=s("p"),Kp=c("The Perpetuity contract works like an Annuity, however rather than pay a fixed amount, a fixed fraction of the total is paid each period."),Se=u(),L=s("p"),Jp=c("The fraction paid is determined by the "),as=s("code"),Qp=c("decay"),Zp=c(" parameter. If a "),ss=s("code"),$p=c("decay"),gp=c(" of 10 is specified, then one tenth the value is paid each period."),Ue=u(),nn=s("pre"),Ne=u(),an=s("h2"),tl=c("Record"),Fe=u(),gn=s("p"),nl=c("A utility function to broadcast new contracts as OP_RETURN messages."),Ve=u(),sn=s("pre"),Me=u(),en=s("h1"),al=c("Definitions"),ze=u(),on=s("h2"),sl=c("Units"),Ye=u(),ta=s("p"),el=c("bitcoin has it\u2019s own units of value and time. Although there are whole coins and it\u2019s possible to use epoch time (seconds since 1970) in some cases, we\u2019ll stick to two here."),Ge=u(),cn=s("h3"),ol=c("satoshis"),We=u(),na=s("p"),cl=c("A unit of account (on the Bitcoin Cash fork of the initial bitcoin blockchain). A hundred million satoshi are equal to 1 Bitcoin Cash."),Xe=u(),pn=s("h3"),pl=c("blocks (time)"),je=u(),aa=s("p"),ll=c("The base unit of time on bitcoin is called a block, blocktimes very, but are about 10 minutes on average."),Ke=u(),W=s("table"),es=s("thead"),E=s("tr"),os=s("th"),il=c("Blocks"),ul=u(),cs=s("th"),rl=c("Minutes"),kl=u(),ps=s("th"),dl=c("Days"),hl=u(),ls=s("th"),fl=c("Years"),ml=u(),d=s("tbody"),_=s("tr"),is=s("td"),vl=c("1"),yl=u(),us=s("td"),bl=c("10"),El=u(),rs=s("td"),_l=c("-"),wl=u(),ks=s("td"),Tl=c("-"),xl=u(),w=s("tr"),ds=s("td"),Dl=c("10"),Pl=u(),hs=s("td"),Cl=c("100"),Al=u(),fs=s("td"),Bl=c("-"),Rl=u(),ms=s("td"),Hl=c("-"),Ll=u(),T=s("tr"),vs=s("td"),ql=c("100"),Ol=u(),ys=s("td"),Il=c("1000"),Sl=u(),bs=s("td"),Ul=c("0.694"),Nl=u(),Es=s("td"),Fl=c("-"),Vl=u(),x=s("tr"),_s=s("td"),Ml=c("144"),zl=u(),ws=s("td"),Yl=c("1440"),Gl=u(),Ts=s("td"),Wl=c("1"),Xl=u(),xs=s("td"),jl=c("-"),Kl=u(),D=s("tr"),Ds=s("td"),Jl=c("1000"),Ql=u(),Ps=s("td"),Zl=c("-"),$l=u(),Cs=s("td"),gl=c("6.94"),ti=u(),As=s("td"),ni=c("-"),ai=u(),P=s("tr"),Bs=s("td"),si=c("4000"),ei=u(),Rs=s("td"),oi=c("-"),ci=u(),Hs=s("td"),pi=c("27.7"),li=u(),Ls=s("td"),ii=c("-"),ui=u(),C=s("tr"),qs=s("td"),ri=c("13140"),ki=u(),Os=s("td"),di=c("-"),hi=u(),Is=s("td"),fi=c("91.25"),mi=u(),Ss=s("td"),vi=c("0.249"),yi=u(),A=s("tr"),Us=s("td"),bi=c("26280"),Ei=u(),Ns=s("td"),_i=c("-"),wi=u(),Fs=s("td"),Ti=c("-"),xi=u(),Vs=s("td"),Di=c("0.499"),Pi=u(),B=s("tr"),Ms=s("td"),Ci=c("52560"),Ai=u(),zs=s("td"),Bi=c("-"),Ri=u(),Ys=s("td"),Hi=c("-"),Li=u(),Gs=s("td"),qi=c("0.999"),Je=u(),ln=s("h2"),Oi=c("Languages"),Qe=u(),un=s("h3"),Ii=c("BitcoinScript"),Ze=u(),X=s("p"),Si=c("A procedural, stack-oriented programming language (Forth-like) with different rules and operations. In practice, it is "),rn=s("a"),Ui=c("Script"),Ni=c(" that mostly unlocks value on a bitcoin network."),$e=u(),kn=s("h3"),Fi=c("CashScript"),ge=u(),dn=s("p"),hn=s("a"),Vi=c("CashScript is a high-level programming language for smart contracts on Bitcoin Cash"),Mi=c(" that transpiles to BitcoinScript."),to=u(),fn=s("h2"),zi=c("Script"),no=u(),mn=s("h3"),Yi=c("Unlocking Script"),ao=u(),vn=s("p"),Gi=c(`Code that is run before running the unlocking code. If execution doesn\u2019t trigger failures and leaves a single non-zero value, it is considered unlocked.
`),yn=s("a"),Wi=c("More"),so=u(),bn=s("h3"),Xi=c("Locking Script"),eo=u(),sa=s("p"),ji=c("At present (Nov 2022), there are two types of unlocking script (actually 4). P2PKH (pay-to-publicKeyHash), which pays to the hash of a public key. And Pay to Script (P2PSH) which pay to an unlocking script hash."),oo=u(),ea=s("p"),En=s("a"),Ki=c("More info"),co=u(),_n=s("h3"),Ji=c("OP_RETURN"),po=u(),oa=s("p"),Qi=c("A code (106) in BitcoinScript for transaction outputs which can store arbitrary data."),lo=u(),wn=s("h3"),Zi=c("OP_RETURN data"),io=u(),q=s("p"),$i=c("Data in OP_RETURNs is commonly encoded by pushing the total number of bytes, followed by the data bytes. For example "),Ws=s("code"),gi=c("04"),tu=c(" followed by "),Xs=s("code"),nu=c("7574786f"),au=c(" (4 bytes of in two letter hex). This format is used to \u201Cbroadcast\u201D \u20BF\u2219\u03D5 contracts."),uo=u(),Tn=s("h3"),su=c("Published"),ro=u(),ca=s("p"),eu=c("In the context of an unspent contract, a contract is published if the parameters to construct and spend it are recorded on the blockchain, either in an OP_RETURN or by reference to the spent output."),ko=u(),pa=s("p"),ou=c("A cashaddress locks value, the parameters of the contract allow unlocking the value."),ho=u(),xn=s("h3"),cu=c("Unspent Transaction Output (UTXO)"),fo=u(),la=s("p"),pu=c("some value, defined by the output of a previous transaction, which is locked by some code, either the hash of a public key (cashaddr), or a script that, when executed, satisfies a locking code."),mo=u(),ia=s("p"),lu=c("The value may be zero, in the case of an OP_RETURN."),this.h()},l(t){S=e(t,"NAV",{class:!0});var l=o(S);U=e(l,"OL",{class:!0});var js=o(U);Pn=e(js,"LI",{class:!0});var yu=o(Pn);ot=e(yu,"A",{class:!0,href:!0});var bu=o(ot);Oo=p(bu,"Welcome!"),bu.forEach(a),yu.forEach(a),ct=e(js,"LI",{class:!0});var iu=o(ct);pt=e(iu,"A",{class:!0,href:!0});var Eu=o(pt);Io=p(Eu,"Contract Types"),Eu.forEach(a),N=e(iu,"OL",{class:!0});var Ks=o(N);Cn=e(Ks,"LI",{class:!0});var _u=o(Cn);lt=e(_u,"A",{class:!0,href:!0});var wu=o(lt);So=p(wu,"Beneficiary Contracts"),wu.forEach(a),_u.forEach(a),An=e(Ks,"LI",{class:!0});var Tu=o(An);it=e(Tu,"A",{class:!0,href:!0});var xu=o(it);Uo=p(xu,"Distributive Contracts"),xu.forEach(a),Tu.forEach(a),Bn=e(Ks,"LI",{class:!0});var Du=o(Bn);ut=e(Du,"A",{class:!0,href:!0});var Pu=o(ut);No=p(Pu,"Informational Contracts"),Pu.forEach(a),Du.forEach(a),Rn=e(Ks,"LI",{class:!0});var Cu=o(Rn);rt=e(Cu,"A",{class:!0,href:!0});var Au=o(rt);Fo=p(Au,"Timelock v non-timelocked"),Au.forEach(a),Cu.forEach(a),Ks.forEach(a),iu.forEach(a),kt=e(js,"LI",{class:!0});var uu=o(kt);dt=e(uu,"A",{class:!0,href:!0});var Bu=o(dt);Vo=p(Bu,"Implemented Contracts"),Bu.forEach(a),b=e(uu,"OL",{class:!0});var Dn=o(b);Hn=e(Dn,"LI",{class:!0});var Ru=o(Hn);ht=e(Ru,"A",{class:!0,href:!0});var Hu=o(ht);Mo=p(Hu,"Annuity"),Hu.forEach(a),Ru.forEach(a),Ln=e(Dn,"LI",{class:!0});var Lu=o(Ln);ft=e(Lu,"A",{class:!0,href:!0});var qu=o(ft);zo=p(qu,"Divide"),qu.forEach(a),Lu.forEach(a),qn=e(Dn,"LI",{class:!0});var Ou=o(qn);mt=e(Ou,"A",{class:!0,href:!0});var Iu=o(mt);Yo=p(Iu,"Faucet"),Iu.forEach(a),Ou.forEach(a),On=e(Dn,"LI",{class:!0});var Su=o(On);vt=e(Su,"A",{class:!0,href:!0});var Uu=o(vt);Go=p(Uu,"Mine-able Faucet"),Uu.forEach(a),Su.forEach(a),In=e(Dn,"LI",{class:!0});var Nu=o(In);yt=e(Nu,"A",{class:!0,href:!0});var Fu=o(yt);Wo=p(Fu,"Perpetuity"),Fu.forEach(a),Nu.forEach(a),Sn=e(Dn,"LI",{class:!0});var Vu=o(Sn);bt=e(Vu,"A",{class:!0,href:!0});var Mu=o(bt);Xo=p(Mu,"Record"),Mu.forEach(a),Vu.forEach(a),Dn.forEach(a),uu.forEach(a),Et=e(js,"LI",{class:!0});var ru=o(Et);_t=e(ru,"A",{class:!0,href:!0});var zu=o(_t);jo=p(zu,"Definitions"),zu.forEach(a),V=e(ru,"OL",{class:!0});var vo=o(V);Un=e(vo,"LI",{class:!0});var Yu=o(Un);wt=e(Yu,"A",{class:!0,href:!0});var Gu=o(wt);Ko=p(Gu,"Units"),Gu.forEach(a),Yu.forEach(a),Nn=e(vo,"LI",{class:!0});var Wu=o(Nn);Tt=e(Wu,"A",{class:!0,href:!0});var Xu=o(Tt);Jo=p(Xu,"Languages"),Xu.forEach(a),Wu.forEach(a),Fn=e(vo,"LI",{class:!0});var ju=o(Fn);xt=e(ju,"A",{class:!0,href:!0});var Ku=o(xt);Qo=p(Ku,"Script"),Ku.forEach(a),ju.forEach(a),vo.forEach(a),ru.forEach(a),js.forEach(a),l.forEach(a),Wd("svelte-2pc8sv",document.head).forEach(a),Js=r(t),Dt=e(t,"H1",{id:!0});var Ju=o(Dt);Zo=p(Ju,"Welcome!"),Ju.forEach(a),Qs=r(t),Vn=e(t,"P",{});var Qu=o(Vn);$o=p(Qu,"Unspent Phi (\u20BF\u2219\u03D5) is an app for creating (and publishing) a set of simple contracts on the Bitcoin Cash (BCH) blockchain that anyone can execute. These contracts lock the value of unspent outputs from earlier transactions (UTXOs), and allow some small reward for any party to call a known contract (if valid according to the rules of BitcoinScript). Although simple, these contracts may be chained together to create complex outcomes."),Qu.forEach(a),Zs=r(t),Mn=e(t,"P",{});var Zu=o(Mn);go=p(Zu,"\u20BF\u2219\u03D5 contracts may be thought of as automata, machines that are unlocked and stepped forward by random participants on the blockchain. No one party has control, it\u2019s a race to spend them first. However, the code to unlock them must be known for the code to stepped forward. Money sent to \u20BF\u2219\u03D5 contracts appear identical to any other pay-to-script UTXOs on the network. Nothing is known about how to spend the contract until it is spent at least once, so in order for the contract to function automatically, both their existence and the parameters to unlock them must be known. While the code to unlock is broadcasted by spending the contract once, not all contracts can be spent right away, so it\u2019s easier and safer just to publish some unlock record and not worry about forgetting how to unlock them."),Zu.forEach(a),$s=r(t),Pt=e(t,"H1",{id:!0});var $u=o(Pt);tc=p($u,"Contract Types"),$u.forEach(a),gs=r(t),zn=e(t,"P",{});var gu=o(zn);nc=p(gu,"Each \u20BF\u2219\u03D5 contract is designed to do one thing. The contracts available (so far) are as follows:"),gu.forEach(a),te=r(t),Ct=e(t,"H2",{id:!0});var tr=o(Ct);ac=p(tr,"Beneficiary Contracts"),tr.forEach(a),ne=r(t),Yn=e(t,"P",{});var nr=o(Yn);sc=p(nr,"Some contracts control value on behalf of the contract creator. They all have an executor allowance which can be claimed by the party which submits a valid spending transactions."),nr.forEach(a),ae=r(t),M=e(t,"TABLE",{});var yo=o(M);fa=e(yo,"THEAD",{});var ar=o(fa);At=e(ar,"TR",{});var bo=o(At);ma=e(bo,"TH",{});var sr=o(ma);ec=p(sr,"Name"),sr.forEach(a),oc=r(bo),va=e(bo,"TH",{});var er=o(va);cc=p(er,"Description"),er.forEach(a),bo.forEach(a),ar.forEach(a),pc=r(yo),F=e(yo,"TBODY",{});var ua=o(F);Bt=e(ua,"TR",{});var Eo=o(Bt);ya=e(Eo,"TD",{});var or=o(ya);lc=p(or,"Annuity"),or.forEach(a),ic=r(Eo),ba=e(Eo,"TD",{});var cr=o(ba);uc=p(cr,"Equal payments over time."),cr.forEach(a),Eo.forEach(a),rc=r(ua),Rt=e(ua,"TR",{});var _o=o(Rt);Ea=e(_o,"TD",{});var pr=o(Ea);kc=p(pr,"Divide"),pr.forEach(a),dc=r(_o),_a=e(_o,"TD",{});var lr=o(_a);hc=p(lr,"Divide money into equal payments, up to four addresses"),lr.forEach(a),_o.forEach(a),fc=r(ua),Ht=e(ua,"TR",{});var wo=o(Ht);wa=e(wo,"TD",{});var ir=o(wa);mc=p(ir,"Perpetuity"),ir.forEach(a),vc=r(wo),Ta=e(wo,"TD",{});var ur=o(Ta);yc=p(ur,"Pay a fixed fraction of total value at intervals"),ur.forEach(a),wo.forEach(a),ua.forEach(a),yo.forEach(a),se=r(t),Lt=e(t,"H2",{id:!0});var rr=o(Lt);bc=p(rr,"Distributive Contracts"),rr.forEach(a),ee=r(t),Gn=e(t,"P",{});var kr=o(Gn);Ec=p(kr,"Contracts with locked value that can be spent by anyone can be characterized as \u201Cfree\u201D. At present these include faucets, mining contracts."),kr.forEach(a),oe=r(t),z=e(t,"TABLE",{});var To=o(z);xa=e(To,"THEAD",{});var dr=o(xa);qt=e(dr,"TR",{});var xo=o(qt);Da=e(xo,"TH",{});var hr=o(Da);_c=p(hr,"Name"),hr.forEach(a),wc=r(xo),Pa=e(xo,"TH",{});var fr=o(Pa);Tc=p(fr,"Description"),fr.forEach(a),xo.forEach(a),dr.forEach(a),xc=r(To),Ot=e(To,"TBODY",{});var Do=o(Ot);It=e(Do,"TR",{});var Po=o(It);Ca=e(Po,"TD",{});var mr=o(Ca);Dc=p(mr,"Faucet"),mr.forEach(a),Pc=r(Po),Aa=e(Po,"TD",{});var vr=o(Aa);Cc=p(vr,"Distributes some free bitcoin per period"),vr.forEach(a),Po.forEach(a),Ac=r(Do),St=e(Do,"TR",{});var Co=o(St);Ba=e(Co,"TD",{});var yr=o(Ba);Bc=p(yr,"Mine"),yr.forEach(a),Rc=r(Co),Ra=e(Co,"TD",{});var br=o(Ra);Hc=p(br,"Distributes some bitcoin per period, for proof of work"),br.forEach(a),Co.forEach(a),Do.forEach(a),To.forEach(a),ce=r(t),Ut=e(t,"H2",{id:!0});var Er=o(Ut);Lc=p(Er,"Informational Contracts"),Er.forEach(a),pe=r(t),Wn=e(t,"P",{});var _r=o(Wn);qc=p(_r,"A contract providing the facility to record data for free."),_r.forEach(a),le=r(t),Y=e(t,"TABLE",{});var Ao=o(Y);Ha=e(Ao,"THEAD",{});var wr=o(Ha);Nt=e(wr,"TR",{});var Bo=o(Nt);La=e(Bo,"TH",{});var Tr=o(La);Oc=p(Tr,"Name"),Tr.forEach(a),Ic=r(Bo),qa=e(Bo,"TH",{});var xr=o(qa);Sc=p(xr,"Description"),xr.forEach(a),Bo.forEach(a),wr.forEach(a),Uc=r(Ao),Oa=e(Ao,"TBODY",{});var Dr=o(Oa);Ft=e(Dr,"TR",{});var Ro=o(Ft);Ia=e(Ro,"TD",{});var Pr=o(Ia);Nc=p(Pr,"Record"),Pr.forEach(a),Fc=r(Ro),Sa=e(Ro,"TD",{});var Cr=o(Sa);Vc=p(Cr,"Broadcast a contract to the blockchain"),Cr.forEach(a),Ro.forEach(a),Dr.forEach(a),Ao.forEach(a),ie=r(t),Vt=e(t,"H2",{id:!0});var Ar=o(Vt);Mc=p(Ar,"Timelock v non-timelocked"),Ar.forEach(a),ue=r(t),Mt=e(t,"P",{});var ku=o(Mt);zc=p(ku,"Contracts in BitcoinScript may be locked using "),zt=e(ku,"A",{href:!0,rel:!0});var Br=o(zt);Yc=p(Br,"BIP68"),Br.forEach(a),ku.forEach(a),re=r(t),Xn=e(t,"P",{});var Rr=o(Xn);Gc=p(Rr,"The Divide and Record contracts are not time-locked, they may be called at anytime."),Rr.forEach(a),ke=r(t),Yt=e(t,"H1",{id:!0});var Hr=o(Yt);Wc=p(Hr,"Implemented Contracts"),Hr.forEach(a),de=r(t),Gt=e(t,"H2",{id:!0});var Lr=o(Gt);Xc=p(Lr,"Annuity"),Lr.forEach(a),he=r(t),jn=e(t,"P",{});var qr=o(jn);jc=p(qr,"The annuity contract pays a fixed amount (in satoshis) to a predefined locking bytecode (i.e. address)."),qr.forEach(a),fe=r(t),f=e(t,"P",{});var O=o(f);Kc=p(O,"To prevent the contract from being called successively (thus paying out all at once), a timelock is added restricting input be of a certain age (in blocks), this parameter is called the "),Ua=e(O,"CODE",{});var Or=o(Ua);Jc=p(Or,"period"),Or.forEach(a),Qc=p(O,". The beneficiary address (or contract) is denoted by the "),Na=e(O,"CODE",{});var Ir=o(Na);Zc=p(Ir,"recipientLockingBytecode"),Ir.forEach(a),$c=p(O,". The amount paid in each period is the "),Fa=e(O,"CODE",{});var Sr=o(Fa);gc=p(Sr,"installment"),Sr.forEach(a),tp=p(O,". To aid in execution, a small fee is left as "),Va=e(O,"CODE",{});var Ur=o(Va);np=p(Ur,"executorAllowance"),Ur.forEach(a),ap=p(O," for each execution of the contract, it may be paid to anyone."),O.forEach(a),me=r(t),Kn=e(t,"P",{});var Nr=o(Kn);sp=p(Nr,"This contract: checks that the first output pays to the beneficiary; checks that the timelock is satisfied; checks that the second output pays back to the contract; gets the total value being spent; calculates the amount to be returned, and finally, checks that both the installment amount of the first output & the total returned to the contract exceed the required amounts."),Nr.forEach(a),ve=r(t),Wt=e(t,"PRE",{class:!0});var Sd=o(Wt);Sd.forEach(a),ye=r(t),Xt=e(t,"H2",{id:!0});var Fr=o(Xt);ep=p(Fr,"Divide"),Fr.forEach(a),be=r(t),Jn=e(t,"P",{});var Vr=o(Jn);op=p(Vr,"The divide contract splits inputs across a predefined set of output destinations."),Vr.forEach(a),Ee=r(t),m=e(t,"P",{});var I=o(m);cp=p(I,"Each output is denoted by "),Ma=e(I,"CODE",{});var Mr=o(Ma);pp=p(Mr,"r#LockingBytecode"),Mr.forEach(a),lp=p(I,", where "),za=e(I,"CODE",{});var zr=o(za);ip=p(zr,"#"),zr.forEach(a),up=p(I," is the index of the output. Since early BitcoinScript did not have loops, this contract was written with a static list of outputs and a "),Ya=e(I,"CODE",{});var Yr=o(Ya);rp=p(Yr,"divisor"),Yr.forEach(a),kp=p(I,", which is simply the number of outputs. An "),Ga=e(I,"CODE",{});var Gr=o(Ga);dp=p(Gr,"executorAllowance"),Gr.forEach(a),hp=p(I," amount is subtracted from the total distribution amount, which may be spent by anyone as long as the amount payed to the hardcoded receipts equals or exceeds the alloted share."),I.forEach(a),_e=r(t),G=e(t,"P",{});var Ho=o(G);fp=p(Ho,"This contract: checks that each of the output destinations match the predefined output; calculates the total value on the contract; calculates the amount to be paid to each receipt ("),Wa=e(Ho,"CODE",{});var Wr=o(Wa);mp=p(Wr,"distribution"),Wr.forEach(a),vp=p(Ho,"), and finally calculates that each receipt receives an output greater than, or equal to, the distribution amount."),Ho.forEach(a),we=r(t),jt=e(t,"PRE",{class:!0});var Ud=o(jt);Ud.forEach(a),Te=r(t),Kt=e(t,"H2",{id:!0});var Xr=o(Kt);yp=p(Xr,"Faucet"),Xr.forEach(a),xe=r(t),Qn=e(t,"P",{});var jr=o(Qn);bp=p(jr,"The faucet contract pays \u201Cfree\u201D bitcoin."),jr.forEach(a),De=r(t),v=e(t,"P",{});var j=o(v);Ep=p(j,"To prevent the faucet from being drained by successive calls, a "),Xa=e(j,"CODE",{});var Kr=o(Xa);_p=p(Kr,"period"),Kr.forEach(a),wp=p(j," timeout is set to specify the minimum age of the input being spent. The amount available to be spent is defined by a "),ja=e(j,"CODE",{});var Jr=o(ja);Tp=p(Jr,"payout"),Jr.forEach(a),xp=p(j,". As a convenience, and to have multiple faucets with the same payout, an "),Ka=e(j,"CODE",{});var Qr=o(Ka);Dp=p(Qr,"index"),Qr.forEach(a),Pp=p(j," parameter is added to distinguish identical contracts."),j.forEach(a),Pe=r(t),R=e(t,"P",{});var ra=o(R);Cp=p(ra,"The steps of this contract are as follows: first, it requires that the transaction be called with an age that is greater than the current "),Ja=e(ra,"CODE",{});var Zr=o(Ja);Ap=p(Zr,"period"),Zr.forEach(a),Bp=p(ra,"; the "),Qa=e(ra,"CODE",{});var $r=o(Qa);Rp=p($r,"index"),$r.forEach(a),Hp=p(ra," is used so that it is not unused; next the first output must return all value to the faucet contract, and finally the returned value is calculate and must be returned to the faucet if the current value exceeds the payout."),ra.forEach(a),Ce=r(t),Jt=e(t,"PRE",{class:!0});var Nd=o(Jt);Nd.forEach(a),Ae=r(t),Qt=e(t,"H2",{id:!0});var gr=o(Qt);Lp=p(gr,"Mine-able Faucet"),gr.forEach(a),Be=r(t),Zn=e(t,"P",{});var tk=o(Zn);qp=p(tk,"The \u20BF\u2219\u03D5 mining covenant is very much like the faucet, with some additional requirements."),tk.forEach(a),Re=r(t),H=e(t,"P",{});var ka=o(H);Op=p(ka,"First, execution of the contract must be called with a "),Za=e(ka,"CODE",{});var nk=o(Za);Ip=p(nk,"nonce"),nk.forEach(a),Sp=p(ka,` [a random value used once]
which when added to the current locking bytecode and hashed results in a value starting with some number of zeros.
How many zeros is the `),$a=e(ka,"CODE",{});var ak=o($a);Up=p(ak,"difficulty"),ak.forEach(a),Np=p(ka,"."),ka.forEach(a),He=r(t),y=e(t,"P",{});var K=o(y);Fp=p(K,"Finally, prior to spending the the mining "),ga=e(K,"CODE",{});var sk=o(ga);Vp=p(sk,"payout"),sk.forEach(a),Mp=p(K,`, the spender must announce
the winning `),ts=e(K,"CODE",{});var ek=o(ts);zp=p(ek,"nonce"),ek.forEach(a),Yp=p(K," in an OP_RETURN of the first output, and send the balance of the contract to a new mining covenant with the new nonce as a "),ns=e(K,"CODE",{});var ok=o(ns);Gp=p(ok,"canary"),ok.forEach(a),Wp=p(K,"."),K.forEach(a),Le=r(t),Zt=e(t,"P",{});var du=o(Zt);$t=e(du,"IMG",{src:!0,alt:!0,title:!0}),Xp=p(du,`
Like an infinite series of Failures to Deliver (FTDs) for a stock, or banging forex futures to manipulate an outcome in currency markets, the canary is always brought back to life with a new copy of itself. You don\u2019t have to take over a whole blockchain to create a market for your energy, just mine a covenant\u2014there will be far less idiosyncratic risk.`),du.forEach(a),qe=r(t),gt=e(t,"PRE",{class:!0});var Fd=o(gt);Fd.forEach(a),Oe=r(t),tn=e(t,"H2",{id:!0});var ck=o(tn);jp=p(ck,"Perpetuity"),ck.forEach(a),Ie=r(t),$n=e(t,"P",{});var pk=o($n);Kp=p(pk,"The Perpetuity contract works like an Annuity, however rather than pay a fixed amount, a fixed fraction of the total is paid each period."),pk.forEach(a),Se=r(t),L=e(t,"P",{});var da=o(L);Jp=p(da,"The fraction paid is determined by the "),as=e(da,"CODE",{});var lk=o(as);Qp=p(lk,"decay"),lk.forEach(a),Zp=p(da," parameter. If a "),ss=e(da,"CODE",{});var ik=o(ss);$p=p(ik,"decay"),ik.forEach(a),gp=p(da," of 10 is specified, then one tenth the value is paid each period."),da.forEach(a),Ue=r(t),nn=e(t,"PRE",{class:!0});var Vd=o(nn);Vd.forEach(a),Ne=r(t),an=e(t,"H2",{id:!0});var uk=o(an);tl=p(uk,"Record"),uk.forEach(a),Fe=r(t),gn=e(t,"P",{});var rk=o(gn);nl=p(rk,"A utility function to broadcast new contracts as OP_RETURN messages."),rk.forEach(a),Ve=r(t),sn=e(t,"PRE",{class:!0});var Md=o(sn);Md.forEach(a),Me=r(t),en=e(t,"H1",{id:!0});var kk=o(en);al=p(kk,"Definitions"),kk.forEach(a),ze=r(t),on=e(t,"H2",{id:!0});var dk=o(on);sl=p(dk,"Units"),dk.forEach(a),Ye=r(t),ta=e(t,"P",{});var hk=o(ta);el=p(hk,"bitcoin has it\u2019s own units of value and time. Although there are whole coins and it\u2019s possible to use epoch time (seconds since 1970) in some cases, we\u2019ll stick to two here."),hk.forEach(a),Ge=r(t),cn=e(t,"H3",{id:!0});var fk=o(cn);ol=p(fk,"satoshis"),fk.forEach(a),We=r(t),na=e(t,"P",{});var mk=o(na);cl=p(mk,"A unit of account (on the Bitcoin Cash fork of the initial bitcoin blockchain). A hundred million satoshi are equal to 1 Bitcoin Cash."),mk.forEach(a),Xe=r(t),pn=e(t,"H3",{id:!0});var vk=o(pn);pl=p(vk,"blocks (time)"),vk.forEach(a),je=r(t),aa=e(t,"P",{});var yk=o(aa);ll=p(yk,"The base unit of time on bitcoin is called a block, blocktimes very, but are about 10 minutes on average."),yk.forEach(a),Ke=r(t),W=e(t,"TABLE",{});var Lo=o(W);es=e(Lo,"THEAD",{});var bk=o(es);E=e(bk,"TR",{});var J=o(E);os=e(J,"TH",{});var Ek=o(os);il=p(Ek,"Blocks"),Ek.forEach(a),ul=r(J),cs=e(J,"TH",{});var _k=o(cs);rl=p(_k,"Minutes"),_k.forEach(a),kl=r(J),ps=e(J,"TH",{});var wk=o(ps);dl=p(wk,"Days"),wk.forEach(a),hl=r(J),ls=e(J,"TH",{});var Tk=o(ls);fl=p(Tk,"Years"),Tk.forEach(a),J.forEach(a),bk.forEach(a),ml=r(Lo),d=e(Lo,"TBODY",{});var h=o(d);_=e(h,"TR",{});var Q=o(_);is=e(Q,"TD",{});var xk=o(is);vl=p(xk,"1"),xk.forEach(a),yl=r(Q),us=e(Q,"TD",{});var Dk=o(us);bl=p(Dk,"10"),Dk.forEach(a),El=r(Q),rs=e(Q,"TD",{});var Pk=o(rs);_l=p(Pk,"-"),Pk.forEach(a),wl=r(Q),ks=e(Q,"TD",{});var Ck=o(ks);Tl=p(Ck,"-"),Ck.forEach(a),Q.forEach(a),xl=r(h),w=e(h,"TR",{});var Z=o(w);ds=e(Z,"TD",{});var Ak=o(ds);Dl=p(Ak,"10"),Ak.forEach(a),Pl=r(Z),hs=e(Z,"TD",{});var Bk=o(hs);Cl=p(Bk,"100"),Bk.forEach(a),Al=r(Z),fs=e(Z,"TD",{});var Rk=o(fs);Bl=p(Rk,"-"),Rk.forEach(a),Rl=r(Z),ms=e(Z,"TD",{});var Hk=o(ms);Hl=p(Hk,"-"),Hk.forEach(a),Z.forEach(a),Ll=r(h),T=e(h,"TR",{});var $=o(T);vs=e($,"TD",{});var Lk=o(vs);ql=p(Lk,"100"),Lk.forEach(a),Ol=r($),ys=e($,"TD",{});var qk=o(ys);Il=p(qk,"1000"),qk.forEach(a),Sl=r($),bs=e($,"TD",{});var Ok=o(bs);Ul=p(Ok,"0.694"),Ok.forEach(a),Nl=r($),Es=e($,"TD",{});var Ik=o(Es);Fl=p(Ik,"-"),Ik.forEach(a),$.forEach(a),Vl=r(h),x=e(h,"TR",{});var g=o(x);_s=e(g,"TD",{});var Sk=o(_s);Ml=p(Sk,"144"),Sk.forEach(a),zl=r(g),ws=e(g,"TD",{});var Uk=o(ws);Yl=p(Uk,"1440"),Uk.forEach(a),Gl=r(g),Ts=e(g,"TD",{});var Nk=o(Ts);Wl=p(Nk,"1"),Nk.forEach(a),Xl=r(g),xs=e(g,"TD",{});var Fk=o(xs);jl=p(Fk,"-"),Fk.forEach(a),g.forEach(a),Kl=r(h),D=e(h,"TR",{});var tt=o(D);Ds=e(tt,"TD",{});var Vk=o(Ds);Jl=p(Vk,"1000"),Vk.forEach(a),Ql=r(tt),Ps=e(tt,"TD",{});var Mk=o(Ps);Zl=p(Mk,"-"),Mk.forEach(a),$l=r(tt),Cs=e(tt,"TD",{});var zk=o(Cs);gl=p(zk,"6.94"),zk.forEach(a),ti=r(tt),As=e(tt,"TD",{});var Yk=o(As);ni=p(Yk,"-"),Yk.forEach(a),tt.forEach(a),ai=r(h),P=e(h,"TR",{});var nt=o(P);Bs=e(nt,"TD",{});var Gk=o(Bs);si=p(Gk,"4000"),Gk.forEach(a),ei=r(nt),Rs=e(nt,"TD",{});var Wk=o(Rs);oi=p(Wk,"-"),Wk.forEach(a),ci=r(nt),Hs=e(nt,"TD",{});var Xk=o(Hs);pi=p(Xk,"27.7"),Xk.forEach(a),li=r(nt),Ls=e(nt,"TD",{});var jk=o(Ls);ii=p(jk,"-"),jk.forEach(a),nt.forEach(a),ui=r(h),C=e(h,"TR",{});var at=o(C);qs=e(at,"TD",{});var Kk=o(qs);ri=p(Kk,"13140"),Kk.forEach(a),ki=r(at),Os=e(at,"TD",{});var Jk=o(Os);di=p(Jk,"-"),Jk.forEach(a),hi=r(at),Is=e(at,"TD",{});var Qk=o(Is);fi=p(Qk,"91.25"),Qk.forEach(a),mi=r(at),Ss=e(at,"TD",{});var Zk=o(Ss);vi=p(Zk,"0.249"),Zk.forEach(a),at.forEach(a),yi=r(h),A=e(h,"TR",{});var st=o(A);Us=e(st,"TD",{});var $k=o(Us);bi=p($k,"26280"),$k.forEach(a),Ei=r(st),Ns=e(st,"TD",{});var gk=o(Ns);_i=p(gk,"-"),gk.forEach(a),wi=r(st),Fs=e(st,"TD",{});var td=o(Fs);Ti=p(td,"-"),td.forEach(a),xi=r(st),Vs=e(st,"TD",{});var nd=o(Vs);Di=p(nd,"0.499"),nd.forEach(a),st.forEach(a),Pi=r(h),B=e(h,"TR",{});var et=o(B);Ms=e(et,"TD",{});var ad=o(Ms);Ci=p(ad,"52560"),ad.forEach(a),Ai=r(et),zs=e(et,"TD",{});var sd=o(zs);Bi=p(sd,"-"),sd.forEach(a),Ri=r(et),Ys=e(et,"TD",{});var ed=o(Ys);Hi=p(ed,"-"),ed.forEach(a),Li=r(et),Gs=e(et,"TD",{});var od=o(Gs);qi=p(od,"0.999"),od.forEach(a),et.forEach(a),h.forEach(a),Lo.forEach(a),Je=r(t),ln=e(t,"H2",{id:!0});var cd=o(ln);Oi=p(cd,"Languages"),cd.forEach(a),Qe=r(t),un=e(t,"H3",{id:!0});var pd=o(un);Ii=p(pd,"BitcoinScript"),pd.forEach(a),Ze=r(t),X=e(t,"P",{});var qo=o(X);Si=p(qo,"A procedural, stack-oriented programming language (Forth-like) with different rules and operations. In practice, it is "),rn=e(qo,"A",{href:!0,rel:!0});var ld=o(rn);Ui=p(ld,"Script"),ld.forEach(a),Ni=p(qo," that mostly unlocks value on a bitcoin network."),qo.forEach(a),$e=r(t),kn=e(t,"H3",{id:!0});var id=o(kn);Fi=p(id,"CashScript"),id.forEach(a),ge=r(t),dn=e(t,"P",{});var hu=o(dn);hn=e(hu,"A",{href:!0,rel:!0});var ud=o(hn);Vi=p(ud,"CashScript is a high-level programming language for smart contracts on Bitcoin Cash"),ud.forEach(a),Mi=p(hu," that transpiles to BitcoinScript."),hu.forEach(a),to=r(t),fn=e(t,"H2",{id:!0});var rd=o(fn);zi=p(rd,"Script"),rd.forEach(a),no=r(t),mn=e(t,"H3",{id:!0});var kd=o(mn);Yi=p(kd,"Unlocking Script"),kd.forEach(a),ao=r(t),vn=e(t,"P",{});var fu=o(vn);Gi=p(fu,`Code that is run before running the unlocking code. If execution doesn\u2019t trigger failures and leaves a single non-zero value, it is considered unlocked.
`),yn=e(fu,"A",{href:!0,rel:!0});var dd=o(yn);Wi=p(dd,"More"),dd.forEach(a),fu.forEach(a),so=r(t),bn=e(t,"H3",{id:!0});var hd=o(bn);Xi=p(hd,"Locking Script"),hd.forEach(a),eo=r(t),sa=e(t,"P",{});var fd=o(sa);ji=p(fd,"At present (Nov 2022), there are two types of unlocking script (actually 4). P2PKH (pay-to-publicKeyHash), which pays to the hash of a public key. And Pay to Script (P2PSH) which pay to an unlocking script hash."),fd.forEach(a),oo=r(t),ea=e(t,"P",{});var md=o(ea);En=e(md,"A",{href:!0,rel:!0});var vd=o(En);Ki=p(vd,"More info"),vd.forEach(a),md.forEach(a),co=r(t),_n=e(t,"H3",{id:!0});var yd=o(_n);Ji=p(yd,"OP_RETURN"),yd.forEach(a),po=r(t),oa=e(t,"P",{});var bd=o(oa);Qi=p(bd,"A code (106) in BitcoinScript for transaction outputs which can store arbitrary data."),bd.forEach(a),lo=r(t),wn=e(t,"H3",{id:!0});var Ed=o(wn);Zi=p(Ed,"OP_RETURN data"),Ed.forEach(a),io=r(t),q=e(t,"P",{});var ha=o(q);$i=p(ha,"Data in OP_RETURNs is commonly encoded by pushing the total number of bytes, followed by the data bytes. For example "),Ws=e(ha,"CODE",{});var _d=o(Ws);gi=p(_d,"04"),_d.forEach(a),tu=p(ha," followed by "),Xs=e(ha,"CODE",{});var wd=o(Xs);nu=p(wd,"7574786f"),wd.forEach(a),au=p(ha," (4 bytes of in two letter hex). This format is used to \u201Cbroadcast\u201D \u20BF\u2219\u03D5 contracts."),ha.forEach(a),uo=r(t),Tn=e(t,"H3",{id:!0});var Td=o(Tn);su=p(Td,"Published"),Td.forEach(a),ro=r(t),ca=e(t,"P",{});var xd=o(ca);eu=p(xd,"In the context of an unspent contract, a contract is published if the parameters to construct and spend it are recorded on the blockchain, either in an OP_RETURN or by reference to the spent output."),xd.forEach(a),ko=r(t),pa=e(t,"P",{});var Dd=o(pa);ou=p(Dd,"A cashaddress locks value, the parameters of the contract allow unlocking the value."),Dd.forEach(a),ho=r(t),xn=e(t,"H3",{id:!0});var Pd=o(xn);cu=p(Pd,"Unspent Transaction Output (UTXO)"),Pd.forEach(a),fo=r(t),la=e(t,"P",{});var Cd=o(la);pu=p(Cd,"some value, defined by the output of a previous transaction, which is locked by some code, either the hash of a public key (cashaddr), or a script that, when executed, satisfies a locking code."),Cd.forEach(a),mo=r(t),ia=e(t,"P",{});var Ad=o(ia);lu=p(Ad,"The value may be zero, in the case of an OP_RETURN."),Ad.forEach(a),this.h()},h(){k(ot,"class","toc-link toc-link-h1"),k(ot,"href","#welcome"),k(Pn,"class","toc-item toc-item-h1"),k(pt,"class","toc-link toc-link-h1"),k(pt,"href","#contract-types"),k(lt,"class","toc-link toc-link-h2"),k(lt,"href","#beneficiary-contracts"),k(Cn,"class","toc-item toc-item-h2"),k(it,"class","toc-link toc-link-h2"),k(it,"href","#distributive-contracts"),k(An,"class","toc-item toc-item-h2"),k(ut,"class","toc-link toc-link-h2"),k(ut,"href","#informational-contracts"),k(Bn,"class","toc-item toc-item-h2"),k(rt,"class","toc-link toc-link-h2"),k(rt,"href","#timelock-v-non-timelocked"),k(Rn,"class","toc-item toc-item-h2"),k(N,"class","toc-level toc-level-2"),k(ct,"class","toc-item toc-item-h1"),k(dt,"class","toc-link toc-link-h1"),k(dt,"href","#implemented-contracts"),k(ht,"class","toc-link toc-link-h2"),k(ht,"href","#annuity"),k(Hn,"class","toc-item toc-item-h2"),k(ft,"class","toc-link toc-link-h2"),k(ft,"href","#divide"),k(Ln,"class","toc-item toc-item-h2"),k(mt,"class","toc-link toc-link-h2"),k(mt,"href","#faucet"),k(qn,"class","toc-item toc-item-h2"),k(vt,"class","toc-link toc-link-h2"),k(vt,"href","#mine-able-faucet"),k(On,"class","toc-item toc-item-h2"),k(yt,"class","toc-link toc-link-h2"),k(yt,"href","#perpetuity"),k(In,"class","toc-item toc-item-h2"),k(bt,"class","toc-link toc-link-h2"),k(bt,"href","#record"),k(Sn,"class","toc-item toc-item-h2"),k(b,"class","toc-level toc-level-2"),k(kt,"class","toc-item toc-item-h1"),k(_t,"class","toc-link toc-link-h1"),k(_t,"href","#definitions"),k(wt,"class","toc-link toc-link-h2"),k(wt,"href","#units"),k(Un,"class","toc-item toc-item-h2"),k(Tt,"class","toc-link toc-link-h2"),k(Tt,"href","#languages"),k(Nn,"class","toc-item toc-item-h2"),k(xt,"class","toc-link toc-link-h2"),k(xt,"href","#script"),k(Fn,"class","toc-item toc-item-h2"),k(V,"class","toc-level toc-level-2"),k(Et,"class","toc-item toc-item-h1"),k(U,"class","toc-level toc-level-1"),k(S,"class","toc"),document.title="Unspent Phi",k(Dt,"id","welcome"),k(Pt,"id","contract-types"),k(Ct,"id","beneficiary-contracts"),k(Lt,"id","distributive-contracts"),k(Ut,"id","informational-contracts"),k(Vt,"id","timelock-v-non-timelocked"),k(zt,"href","https://reference.cash/protocol/forks/bip-0068"),k(zt,"rel","nofollow"),k(Yt,"id","implemented-contracts"),k(Gt,"id","annuity"),k(Wt,"class","language-solidity"),k(Xt,"id","divide"),k(jt,"class","language-solidity"),k(Kt,"id","faucet"),k(Jt,"class","language-solidity"),k(Qt,"id","mine-able-faucet"),Xd($t.src,vu="canary.png")||k($t,"src",vu),k($t,"alt","Replace the canary"),k($t,"title","Look, see, he's alright. He's fine."),k(gt,"class","language-solidity"),k(tn,"id","perpetuity"),k(nn,"class","language-solidity"),k(an,"id","record"),k(sn,"class","language-solidity"),k(en,"id","definitions"),k(on,"id","units"),k(cn,"id","satoshis"),k(pn,"id","blocks-time"),k(ln,"id","languages"),k(un,"id","bitcoinscript"),k(rn,"href","https://reference.cash/protocol/blockchain/script"),k(rn,"rel","nofollow"),k(kn,"id","cashscript"),k(hn,"href","https://cashscript.org/docs/basics/about"),k(hn,"rel","nofollow"),k(fn,"id","script"),k(mn,"id","unlocking-script"),k(yn,"href","https://reference.cash/protocol/blockchain/transaction/unlocking-script"),k(yn,"rel","nofollow"),k(bn,"id","locking-script"),k(En,"href","https://reference.cash/protocol/blockchain/transaction/locking-script"),k(En,"rel","nofollow"),k(_n,"id","op_return"),k(wn,"id","op_return-data"),k(Tn,"id","published"),k(xn,"id","unspent-transaction-output-utxo")},m(t,l){i(t,S,l),n(S,U),n(U,Pn),n(Pn,ot),n(ot,Oo),n(U,ct),n(ct,pt),n(pt,Io),n(ct,N),n(N,Cn),n(Cn,lt),n(lt,So),n(N,An),n(An,it),n(it,Uo),n(N,Bn),n(Bn,ut),n(ut,No),n(N,Rn),n(Rn,rt),n(rt,Fo),n(U,kt),n(kt,dt),n(dt,Vo),n(kt,b),n(b,Hn),n(Hn,ht),n(ht,Mo),n(b,Ln),n(Ln,ft),n(ft,zo),n(b,qn),n(qn,mt),n(mt,Yo),n(b,On),n(On,vt),n(vt,Go),n(b,In),n(In,yt),n(yt,Wo),n(b,Sn),n(Sn,bt),n(bt,Xo),n(U,Et),n(Et,_t),n(_t,jo),n(Et,V),n(V,Un),n(Un,wt),n(wt,Ko),n(V,Nn),n(Nn,Tt),n(Tt,Jo),n(V,Fn),n(Fn,xt),n(xt,Qo),i(t,Js,l),i(t,Dt,l),n(Dt,Zo),i(t,Qs,l),i(t,Vn,l),n(Vn,$o),i(t,Zs,l),i(t,Mn,l),n(Mn,go),i(t,$s,l),i(t,Pt,l),n(Pt,tc),i(t,gs,l),i(t,zn,l),n(zn,nc),i(t,te,l),i(t,Ct,l),n(Ct,ac),i(t,ne,l),i(t,Yn,l),n(Yn,sc),i(t,ae,l),i(t,M,l),n(M,fa),n(fa,At),n(At,ma),n(ma,ec),n(At,oc),n(At,va),n(va,cc),n(M,pc),n(M,F),n(F,Bt),n(Bt,ya),n(ya,lc),n(Bt,ic),n(Bt,ba),n(ba,uc),n(F,rc),n(F,Rt),n(Rt,Ea),n(Ea,kc),n(Rt,dc),n(Rt,_a),n(_a,hc),n(F,fc),n(F,Ht),n(Ht,wa),n(wa,mc),n(Ht,vc),n(Ht,Ta),n(Ta,yc),i(t,se,l),i(t,Lt,l),n(Lt,bc),i(t,ee,l),i(t,Gn,l),n(Gn,Ec),i(t,oe,l),i(t,z,l),n(z,xa),n(xa,qt),n(qt,Da),n(Da,_c),n(qt,wc),n(qt,Pa),n(Pa,Tc),n(z,xc),n(z,Ot),n(Ot,It),n(It,Ca),n(Ca,Dc),n(It,Pc),n(It,Aa),n(Aa,Cc),n(Ot,Ac),n(Ot,St),n(St,Ba),n(Ba,Bc),n(St,Rc),n(St,Ra),n(Ra,Hc),i(t,ce,l),i(t,Ut,l),n(Ut,Lc),i(t,pe,l),i(t,Wn,l),n(Wn,qc),i(t,le,l),i(t,Y,l),n(Y,Ha),n(Ha,Nt),n(Nt,La),n(La,Oc),n(Nt,Ic),n(Nt,qa),n(qa,Sc),n(Y,Uc),n(Y,Oa),n(Oa,Ft),n(Ft,Ia),n(Ia,Nc),n(Ft,Fc),n(Ft,Sa),n(Sa,Vc),i(t,ie,l),i(t,Vt,l),n(Vt,Mc),i(t,ue,l),i(t,Mt,l),n(Mt,zc),n(Mt,zt),n(zt,Yc),i(t,re,l),i(t,Xn,l),n(Xn,Gc),i(t,ke,l),i(t,Yt,l),n(Yt,Wc),i(t,de,l),i(t,Gt,l),n(Gt,Xc),i(t,he,l),i(t,jn,l),n(jn,jc),i(t,fe,l),i(t,f,l),n(f,Kc),n(f,Ua),n(Ua,Jc),n(f,Qc),n(f,Na),n(Na,Zc),n(f,$c),n(f,Fa),n(Fa,gc),n(f,tp),n(f,Va),n(Va,np),n(f,ap),i(t,me,l),i(t,Kn,l),n(Kn,sp),i(t,ve,l),i(t,Wt,l),Wt.innerHTML=Rd,i(t,ye,l),i(t,Xt,l),n(Xt,ep),i(t,be,l),i(t,Jn,l),n(Jn,op),i(t,Ee,l),i(t,m,l),n(m,cp),n(m,Ma),n(Ma,pp),n(m,lp),n(m,za),n(za,ip),n(m,up),n(m,Ya),n(Ya,rp),n(m,kp),n(m,Ga),n(Ga,dp),n(m,hp),i(t,_e,l),i(t,G,l),n(G,fp),n(G,Wa),n(Wa,mp),n(G,vp),i(t,we,l),i(t,jt,l),jt.innerHTML=Hd,i(t,Te,l),i(t,Kt,l),n(Kt,yp),i(t,xe,l),i(t,Qn,l),n(Qn,bp),i(t,De,l),i(t,v,l),n(v,Ep),n(v,Xa),n(Xa,_p),n(v,wp),n(v,ja),n(ja,Tp),n(v,xp),n(v,Ka),n(Ka,Dp),n(v,Pp),i(t,Pe,l),i(t,R,l),n(R,Cp),n(R,Ja),n(Ja,Ap),n(R,Bp),n(R,Qa),n(Qa,Rp),n(R,Hp),i(t,Ce,l),i(t,Jt,l),Jt.innerHTML=Ld,i(t,Ae,l),i(t,Qt,l),n(Qt,Lp),i(t,Be,l),i(t,Zn,l),n(Zn,qp),i(t,Re,l),i(t,H,l),n(H,Op),n(H,Za),n(Za,Ip),n(H,Sp),n(H,$a),n($a,Up),n(H,Np),i(t,He,l),i(t,y,l),n(y,Fp),n(y,ga),n(ga,Vp),n(y,Mp),n(y,ts),n(ts,zp),n(y,Yp),n(y,ns),n(ns,Gp),n(y,Wp),i(t,Le,l),i(t,Zt,l),n(Zt,$t),n(Zt,Xp),i(t,qe,l),i(t,gt,l),gt.innerHTML=qd,i(t,Oe,l),i(t,tn,l),n(tn,jp),i(t,Ie,l),i(t,$n,l),n($n,Kp),i(t,Se,l),i(t,L,l),n(L,Jp),n(L,as),n(as,Qp),n(L,Zp),n(L,ss),n(ss,$p),n(L,gp),i(t,Ue,l),i(t,nn,l),nn.innerHTML=Od,i(t,Ne,l),i(t,an,l),n(an,tl),i(t,Fe,l),i(t,gn,l),n(gn,nl),i(t,Ve,l),i(t,sn,l),sn.innerHTML=Id,i(t,Me,l),i(t,en,l),n(en,al),i(t,ze,l),i(t,on,l),n(on,sl),i(t,Ye,l),i(t,ta,l),n(ta,el),i(t,Ge,l),i(t,cn,l),n(cn,ol),i(t,We,l),i(t,na,l),n(na,cl),i(t,Xe,l),i(t,pn,l),n(pn,pl),i(t,je,l),i(t,aa,l),n(aa,ll),i(t,Ke,l),i(t,W,l),n(W,es),n(es,E),n(E,os),n(os,il),n(E,ul),n(E,cs),n(cs,rl),n(E,kl),n(E,ps),n(ps,dl),n(E,hl),n(E,ls),n(ls,fl),n(W,ml),n(W,d),n(d,_),n(_,is),n(is,vl),n(_,yl),n(_,us),n(us,bl),n(_,El),n(_,rs),n(rs,_l),n(_,wl),n(_,ks),n(ks,Tl),n(d,xl),n(d,w),n(w,ds),n(ds,Dl),n(w,Pl),n(w,hs),n(hs,Cl),n(w,Al),n(w,fs),n(fs,Bl),n(w,Rl),n(w,ms),n(ms,Hl),n(d,Ll),n(d,T),n(T,vs),n(vs,ql),n(T,Ol),n(T,ys),n(ys,Il),n(T,Sl),n(T,bs),n(bs,Ul),n(T,Nl),n(T,Es),n(Es,Fl),n(d,Vl),n(d,x),n(x,_s),n(_s,Ml),n(x,zl),n(x,ws),n(ws,Yl),n(x,Gl),n(x,Ts),n(Ts,Wl),n(x,Xl),n(x,xs),n(xs,jl),n(d,Kl),n(d,D),n(D,Ds),n(Ds,Jl),n(D,Ql),n(D,Ps),n(Ps,Zl),n(D,$l),n(D,Cs),n(Cs,gl),n(D,ti),n(D,As),n(As,ni),n(d,ai),n(d,P),n(P,Bs),n(Bs,si),n(P,ei),n(P,Rs),n(Rs,oi),n(P,ci),n(P,Hs),n(Hs,pi),n(P,li),n(P,Ls),n(Ls,ii),n(d,ui),n(d,C),n(C,qs),n(qs,ri),n(C,ki),n(C,Os),n(Os,di),n(C,hi),n(C,Is),n(Is,fi),n(C,mi),n(C,Ss),n(Ss,vi),n(d,yi),n(d,A),n(A,Us),n(Us,bi),n(A,Ei),n(A,Ns),n(Ns,_i),n(A,wi),n(A,Fs),n(Fs,Ti),n(A,xi),n(A,Vs),n(Vs,Di),n(d,Pi),n(d,B),n(B,Ms),n(Ms,Ci),n(B,Ai),n(B,zs),n(zs,Bi),n(B,Ri),n(B,Ys),n(Ys,Hi),n(B,Li),n(B,Gs),n(Gs,qi),i(t,Je,l),i(t,ln,l),n(ln,Oi),i(t,Qe,l),i(t,un,l),n(un,Ii),i(t,Ze,l),i(t,X,l),n(X,Si),n(X,rn),n(rn,Ui),n(X,Ni),i(t,$e,l),i(t,kn,l),n(kn,Fi),i(t,ge,l),i(t,dn,l),n(dn,hn),n(hn,Vi),n(dn,Mi),i(t,to,l),i(t,fn,l),n(fn,zi),i(t,no,l),i(t,mn,l),n(mn,Yi),i(t,ao,l),i(t,vn,l),n(vn,Gi),n(vn,yn),n(yn,Wi),i(t,so,l),i(t,bn,l),n(bn,Xi),i(t,eo,l),i(t,sa,l),n(sa,ji),i(t,oo,l),i(t,ea,l),n(ea,En),n(En,Ki),i(t,co,l),i(t,_n,l),n(_n,Ji),i(t,po,l),i(t,oa,l),n(oa,Qi),i(t,lo,l),i(t,wn,l),n(wn,Zi),i(t,io,l),i(t,q,l),n(q,$i),n(q,Ws),n(Ws,gi),n(q,tu),n(q,Xs),n(Xs,nu),n(q,au),i(t,uo,l),i(t,Tn,l),n(Tn,su),i(t,ro,l),i(t,ca,l),n(ca,eu),i(t,ko,l),i(t,pa,l),n(pa,ou),i(t,ho,l),i(t,xn,l),n(xn,cu),i(t,fo,l),i(t,la,l),n(la,pu),i(t,mo,l),i(t,ia,l),n(ia,lu)},p:mu,i:mu,o:mu,d(t){t&&a(S),t&&a(Js),t&&a(Dt),t&&a(Qs),t&&a(Vn),t&&a(Zs),t&&a(Mn),t&&a($s),t&&a(Pt),t&&a(gs),t&&a(zn),t&&a(te),t&&a(Ct),t&&a(ne),t&&a(Yn),t&&a(ae),t&&a(M),t&&a(se),t&&a(Lt),t&&a(ee),t&&a(Gn),t&&a(oe),t&&a(z),t&&a(ce),t&&a(Ut),t&&a(pe),t&&a(Wn),t&&a(le),t&&a(Y),t&&a(ie),t&&a(Vt),t&&a(ue),t&&a(Mt),t&&a(re),t&&a(Xn),t&&a(ke),t&&a(Yt),t&&a(de),t&&a(Gt),t&&a(he),t&&a(jn),t&&a(fe),t&&a(f),t&&a(me),t&&a(Kn),t&&a(ve),t&&a(Wt),t&&a(ye),t&&a(Xt),t&&a(be),t&&a(Jn),t&&a(Ee),t&&a(m),t&&a(_e),t&&a(G),t&&a(we),t&&a(jt),t&&a(Te),t&&a(Kt),t&&a(xe),t&&a(Qn),t&&a(De),t&&a(v),t&&a(Pe),t&&a(R),t&&a(Ce),t&&a(Jt),t&&a(Ae),t&&a(Qt),t&&a(Be),t&&a(Zn),t&&a(Re),t&&a(H),t&&a(He),t&&a(y),t&&a(Le),t&&a(Zt),t&&a(qe),t&&a(gt),t&&a(Oe),t&&a(tn),t&&a(Ie),t&&a($n),t&&a(Se),t&&a(L),t&&a(Ue),t&&a(nn),t&&a(Ne),t&&a(an),t&&a(Fe),t&&a(gn),t&&a(Ve),t&&a(sn),t&&a(Me),t&&a(en),t&&a(ze),t&&a(on),t&&a(Ye),t&&a(ta),t&&a(Ge),t&&a(cn),t&&a(We),t&&a(na),t&&a(Xe),t&&a(pn),t&&a(je),t&&a(aa),t&&a(Ke),t&&a(W),t&&a(Je),t&&a(ln),t&&a(Qe),t&&a(un),t&&a(Ze),t&&a(X),t&&a($e),t&&a(kn),t&&a(ge),t&&a(dn),t&&a(to),t&&a(fn),t&&a(no),t&&a(mn),t&&a(ao),t&&a(vn),t&&a(so),t&&a(bn),t&&a(eo),t&&a(sa),t&&a(oo),t&&a(ea),t&&a(co),t&&a(_n),t&&a(po),t&&a(oa),t&&a(lo),t&&a(wn),t&&a(io),t&&a(q),t&&a(uo),t&&a(Tn),t&&a(ro),t&&a(ca),t&&a(ko),t&&a(pa),t&&a(ho),t&&a(xn),t&&a(fo),t&&a(la),t&&a(mo),t&&a(ia)}}}class Qd extends zd{constructor(S){super(),Yd(this,S,null,jd,Gd,{})}}export{Qd as default};
//# sourceMappingURL=_page.md-c742d988.js.map
