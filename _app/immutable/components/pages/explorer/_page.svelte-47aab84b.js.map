{"version":3,"file":"_page.svelte-47aab84b.js","sources":["../../../../../../../../src/lib/LockingBytecodeDetails.svelte","../../../../../../../../node_modules/@cashscript/utils/dist/module/script.js","../../../../../../../../src/lib/TransactionDetail.svelte","../../../../../../../../src/routes/explorer/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n  import { base } from '$app/paths';\n\timport { load } from '$lib/machinery/loader-store.js';\n\timport { getUnspentOutputs } from '@unspent/phi';\n  import Address from './Address.svelte';\n\timport AddressBlockie from './AddressBlockie.svelte';\n\timport { chaingraphHost } from '$lib/store.js';;\n\timport { instantiateSha256, hexToBin, lockingBytecodeToCashAddress, lockingBytecodeToBase58Address } from '@bitauth/libauth';\n\n\texport let lockingBytecode;\n\tlet results;\n  let cashaddr= '';\n  let bytecodeDetails \n  let legacy=\"\"\n\tlet chaingraphHostValue = '';\n\n\tchaingraphHost.subscribe((value) => {\n\t\tchaingraphHostValue = value;\n\t});\n\n\tonMount(async () => {\n\t\tif (chaingraphHostValue.length > 0) {\n\t\t\tloadTx();\n\t\t}\n\t});\n\n\tconst loadTx = async () => {\n\t\tawait load({\n\t\t\tload: async () => {\n        const sha256Promise = instantiateSha256();\n\t\t\t\tresults = (await getUnspentOutputs(chaingraphHostValue, lockingBytecode)).search_output;\n        results = results.map(r => {\n          return{\n            txid : r.transaction_hash.slice(2),\n            vout : r.output_index,\n            satoshis : r.value_satoshis\n          }\n\n        })\n        let cashaddrResponse = lockingBytecodeToCashAddress(hexToBin(lockingBytecode), 'bitcoincash')\n        if(typeof cashaddrResponse === \"string\") cashaddr = cashaddrResponse\n        const sha256 = await sha256Promise;\n        let legacyResponse = lockingBytecodeToBase58Address(sha256, hexToBin(lockingBytecode), 'mainnet')\n        if(typeof legacyResponse === \"string\") legacy = legacyResponse\n\t\t\t}\n\t\t});\n\t};\n</script>\n<AddressBlockie size={35} lockingBytecode={lockingBytecode} />\n{#if cashaddr} \n<p>Cashaddress: <Address address={cashaddr} /></p>\n{/if}\n{#if legacy} \n<p>Legacy: </p>\n<pre>{legacy}</pre>\n{/if}\n\n\n{#if lockingBytecode}\n<h3>Unspent Transaction Outputs</h3>\n\t{#if results}\n\t\t{#each results as txo}\n\t\t\t<div> \n        <p><a style=\"line-break:anywhere;\" href=\"{base}/explorer?tx={txo.txid}\">{txo.txid}</a>:{ txo.vout}</p>\n        <p>+&nbsp;{txo.satoshis}</p>\n\t\t\t</div>\n\t\t{/each}\n\t{/if}\n{/if}\n","import { OpcodesBCH, encodeDataPush, parseBytecode, serializeAuthenticationInstructions, hexToBin, disassembleBytecodeBCH, flattenBinArray, } from '@bitauth/libauth';\nimport { decodeInt, encodeInt } from './data.js';\nimport OptimisationsEquivFile from './cashproof-optimisations.js';\nexport const Op = OpcodesBCH;\n// TODO: Replace this when these opcodes are in Libauth\nexport var IntrospectionOp;\n(function (IntrospectionOp) {\n    IntrospectionOp[IntrospectionOp[\"OP_INPUTINDEX\"] = 192] = \"OP_INPUTINDEX\";\n    IntrospectionOp[IntrospectionOp[\"OP_ACTIVEBYTECODE\"] = 193] = \"OP_ACTIVEBYTECODE\";\n    IntrospectionOp[IntrospectionOp[\"OP_TXVERSION\"] = 194] = \"OP_TXVERSION\";\n    IntrospectionOp[IntrospectionOp[\"OP_TXINPUTCOUNT\"] = 195] = \"OP_TXINPUTCOUNT\";\n    IntrospectionOp[IntrospectionOp[\"OP_TXOUTPUTCOUNT\"] = 196] = \"OP_TXOUTPUTCOUNT\";\n    IntrospectionOp[IntrospectionOp[\"OP_TXLOCKTIME\"] = 197] = \"OP_TXLOCKTIME\";\n    IntrospectionOp[IntrospectionOp[\"OP_UTXOVALUE\"] = 198] = \"OP_UTXOVALUE\";\n    IntrospectionOp[IntrospectionOp[\"OP_UTXOBYTECODE\"] = 199] = \"OP_UTXOBYTECODE\";\n    IntrospectionOp[IntrospectionOp[\"OP_OUTPOINTTXHASH\"] = 200] = \"OP_OUTPOINTTXHASH\";\n    IntrospectionOp[IntrospectionOp[\"OP_OUTPOINTINDEX\"] = 201] = \"OP_OUTPOINTINDEX\";\n    IntrospectionOp[IntrospectionOp[\"OP_INPUTBYTECODE\"] = 202] = \"OP_INPUTBYTECODE\";\n    IntrospectionOp[IntrospectionOp[\"OP_INPUTSEQUENCENUMBER\"] = 203] = \"OP_INPUTSEQUENCENUMBER\";\n    IntrospectionOp[IntrospectionOp[\"OP_OUTPUTVALUE\"] = 204] = \"OP_OUTPUTVALUE\";\n    IntrospectionOp[IntrospectionOp[\"OP_OUTPUTBYTECODE\"] = 205] = \"OP_OUTPUTBYTECODE\";\n})(IntrospectionOp || (IntrospectionOp = {}));\nexport const introspectionOpMapping = {\n    OP_INPUTINDEX: 'OP_UNKNOWN192',\n    OP_ACTIVEBYTECODE: 'OP_UNKNOWN193',\n    OP_TXVERSION: 'OP_UNKNOWN194',\n    OP_TXINPUTCOUNT: 'OP_UNKNOWN195',\n    OP_TXOUTPUTCOUNT: 'OP_UNKNOWN196',\n    OP_TXLOCKTIME: 'OP_UNKNOWN197',\n    OP_UTXOVALUE: 'OP_UNKNOWN198',\n    OP_UTXOBYTECODE: 'OP_UNKNOWN199',\n    OP_OUTPOINTTXHASH: 'OP_UNKNOWN200',\n    OP_OUTPOINTINDEX: 'OP_UNKNOWN201',\n    OP_INPUTBYTECODE: 'OP_UNKNOWN202',\n    OP_INPUTSEQUENCENUMBER: 'OP_UNKNOWN203',\n    OP_OUTPUTVALUE: 'OP_UNKNOWN204',\n    OP_OUTPUTBYTECODE: 'OP_UNKNOWN205',\n};\nexport const reverseIntrospectionOpMapping = Object.fromEntries(Object.entries(introspectionOpMapping).map(([k, v]) => ([v, k])));\nexport function scriptToAsm(script) {\n    return bytecodeToAsm(scriptToBytecode(script));\n}\nexport function asmToScript(asm) {\n    return bytecodeToScript(asmToBytecode(asm));\n}\nexport function scriptToBytecode(script) {\n    // Convert the script elements to AuthenticationInstructions\n    const instructions = script.map((opOrData) => {\n        if (typeof opOrData === 'number') {\n            return { opcode: opOrData };\n        }\n        return parseBytecode(encodeDataPush(opOrData))[0];\n    });\n    // Convert the AuthenticationInstructions to bytecode\n    return serializeAuthenticationInstructions(instructions);\n}\nexport function bytecodeToScript(bytecode) {\n    // Convert the bytecode to AuthenticationInstructions\n    const instructions = parseBytecode(bytecode);\n    // Convert the AuthenticationInstructions to script elements\n    const script = instructions.map((instruction) => ('data' in instruction ? instruction.data : instruction.opcode));\n    return script;\n}\nexport function asmToBytecode(asm) {\n    // Remove any duplicate whitespace\n    asm = asm.replace(/\\s+/g, ' ').trim();\n    // Replace introspection ops with OP_UNKNOWN... so Libauth gets it\n    asm = asm.split(' ').map((token) => { var _a; return (_a = introspectionOpMapping[token]) !== null && _a !== void 0 ? _a : token; }).join(' ');\n    // Convert the ASM tokens to AuthenticationInstructions\n    const instructions = asm.split(' ').map((token) => {\n        if (token.startsWith('OP_')) {\n            return { opcode: Op[token] };\n        }\n        return parseBytecode(encodeDataPush(hexToBin(token)))[0];\n    });\n    // Convert the AuthenticationInstructions to bytecode\n    return serializeAuthenticationInstructions(instructions);\n}\nexport function bytecodeToAsm(bytecode) {\n    // Convert the bytecode to libauth's ASM format\n    let asm = disassembleBytecodeBCH(bytecode);\n    // COnvert libauth's ASM format to BITBOX's\n    asm = asm.replace(/OP_PUSHBYTES_[^\\s]+/g, '');\n    asm = asm.replace(/OP_PUSHDATA[^\\s]+ [^\\s]+/g, '');\n    asm = asm.replace(/(^|\\s)0x/g, ' ');\n    // Replace OP_UNKNOWN... with the correct ops\n    asm = asm.split(' ').map((token) => { var _a; return (_a = reverseIntrospectionOpMapping[token]) !== null && _a !== void 0 ? _a : token; }).join(' ');\n    // Remove any duplicate whitespace\n    asm = asm.replace(/\\s+/g, ' ').trim();\n    return asm;\n}\nexport function countOpcodes(script) {\n    return script\n        .filter((opOrData) => typeof opOrData === 'number')\n        .filter((op) => op > Op.OP_16)\n        .length;\n}\nexport function calculateBytesize(script) {\n    return scriptToBytecode(script).byteLength;\n}\n// For encoding OP_RETURN data (doesn't require BIP62.3 / MINIMALDATA)\nexport function encodeNullDataScript(chunks) {\n    return flattenBinArray(chunks.map((chunk) => {\n        if (typeof chunk === 'number') {\n            return new Uint8Array([chunk]);\n        }\n        const pushdataOpcode = getPushDataOpcode(chunk);\n        return new Uint8Array([...pushdataOpcode, ...chunk]);\n    }));\n}\nfunction getPushDataOpcode(data) {\n    const { byteLength } = data;\n    if (byteLength === 0)\n        return Uint8Array.from([0x4c, 0x00]);\n    if (byteLength < 76)\n        return Uint8Array.from([byteLength]);\n    if (byteLength < 256)\n        return Uint8Array.from([0x4c, byteLength]);\n    throw Error('Pushdata too large');\n}\n/**\n * When cutting out the tx.bytecode preimage variable, the compiler does not know\n * the size of the final redeem scrip yet, because the constructor parameters still\n * need to get added. Because of this it does not know whether the VarInt is 1 or 3\n * bytes. During compilation, an OP_NOP is added at the spot where the bytecode is\n * cut out. This function replaces that OP_NOP and adds either 1 or 3 to the cut to\n * additionally cut off the VarInt.\n *\n * @param script incomplete redeem script\n * @returns completed redeem script\n */\nexport function replaceBytecodeNop(script) {\n    const index = script.findIndex((op) => op === Op.OP_NOP);\n    if (index < 0)\n        return script;\n    // Remove the OP_NOP\n    script.splice(index, 1);\n    // Retrieve size of current OP_SPLIT\n    let oldCut = script[index];\n    if (oldCut instanceof Uint8Array) {\n        oldCut = decodeInt(oldCut);\n    }\n    else if (oldCut === Op.OP_0) {\n        oldCut = 0;\n    }\n    else if (oldCut >= Op.OP_1 && oldCut <= Op.OP_16) {\n        oldCut -= 80;\n    }\n    else {\n        return script;\n    }\n    // Update the old OP_SPLIT by adding either 1 or 3 to it\n    script[index] = encodeInt(oldCut + 1);\n    const bytecodeSize = calculateBytesize(script);\n    if (bytecodeSize > 252) {\n        script[index] = encodeInt(oldCut + 3);\n    }\n    // Minimally encode\n    return asmToScript(scriptToAsm(script));\n}\nexport function generateRedeemScript(baseScript, encodedArgs) {\n    return replaceBytecodeNop([...encodedArgs, ...baseScript]);\n}\nexport function optimiseBytecode(script, runs = 1000) {\n    const optimisations = OptimisationsEquivFile\n        // Split by line and filter all line comments (#)\n        .split('\\n')\n        .map((equiv) => equiv.trim())\n        .filter((equiv) => !equiv.startsWith('#'))\n        // Join back the lines, and split on semicolon\n        .join('')\n        .split(';')\n        // Parse all optimisations in .equiv file\n        .map((equiv) => equiv.trim())\n        .map((equiv) => equiv.split('<=>').map((part) => part.trim()))\n        .filter((equiv) => equiv.length === 2);\n    for (let i = 0; i < runs; i += 1) {\n        const oldScript = script;\n        script = replaceOps(script, optimisations);\n        // Break on fixed point\n        if (scriptToAsm(oldScript) === scriptToAsm(script))\n            break;\n    }\n    return script;\n}\nfunction replaceOps(script, optimisations) {\n    let asm = scriptToAsm(script);\n    // Apply all optimisations in the cashproof file\n    optimisations.forEach(([pattern, replacement]) => {\n        asm = asm.replace(new RegExp(pattern, 'g'), replacement);\n    });\n    // Add optimisations that are not compatible with CashProof\n    // CashProof can't prove OP_IF without parameters\n    asm = asm.replace(/OP_NOT OP_IF/g, 'OP_NOTIF');\n    // CashProof can't prove OP_CHECKMULTISIG without specifying N\n    asm = asm.replace(/OP_CHECKMULTISIG OP_VERIFY/g, 'OP_CHECKMULTISIGVERIFY');\n    // CashProof can't prove bitwise operators\n    asm = asm.replace(/OP_SWAP OP_AND/g, 'OP_AND');\n    asm = asm.replace(/OP_SWAP OP_OR/g, 'OP_OR');\n    asm = asm.replace(/OP_SWAP OP_XOR/g, 'OP_XOR');\n    asm = asm.replace(/OP_DUP OP_AND/g, '');\n    asm = asm.replace(/OP_DUP OP_OR/g, '');\n    // Remove any double spaces as a result of opcode removal\n    asm = asm.replace(/\\s+/g, ' ').trim();\n    return asmToScript(asm);\n}\n//# sourceMappingURL=script.js.map","<script lang=\"ts\">\n \timport { base } from '$app/paths';\n\timport { onMount } from 'svelte';\n\timport { binToHex, binToBigIntUint64LE} from '@bitauth/libauth';\n\timport { bytecodeToAsm } from '@cashscript/utils';\n\timport List, { Item, Graphic, Meta, Text, PrimaryText, SecondaryText } from '@smui/list';\n\timport { hexToBin, decodeTransaction } from '@bitauth/libauth';\n\timport { getTransaction } from '@unspent/phi';\n\n\timport AddressBlockie from './AddressBlockie.svelte';\n  import { load } from '$lib/machinery/loader-store.js';\n\n\timport { chaingraphHost } from '$lib/store.js';\n\n\texport let txid;\n\tlet transaction;\n\tlet txObject;\n\tlet outputs;\n\tlet inputs;\n\tlet chaingraphHostValue = '';\n\n\tchaingraphHost.subscribe((value) => {\n\t\tchaingraphHostValue = value;\n\t});\n\n\tonMount(async () => {\n\t\tif (chaingraphHostValue.length > 0) {\n\t\t\tloadTx();\n\t\t}\n\t});\n\n\tconst loadTx = async () => {\n\t\tawait load({\n\t\t\tload: async () => {\n\t\t\t\ttransaction = (await getTransaction(chaingraphHostValue, txid))['transaction'].pop();\n\t\t\t\ttxObject = decodeTransaction(hexToBin(transaction.encoded_hex));\n\t\t\t\tif (typeof txObject === 'string') throw Error(txObject);\n\t\t\t\toutputs = txObject.outputs.map((o) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlockingBytecode: binToHex(o.lockingBytecode),\n\t\t\t\t\t\tsatoshis: binToBigIntUint64LE(o.satoshis)\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tinputs = txObject.inputs.map((i) => {\n\t\t\t\t\tconst asm = bytecodeToAsm(i.unlockingBytecode);\n\t\t\t\t\treturn {\n            asm: asm,\n            vout: i.outpointIndex,\n            outpointTransactionHash: binToHex(i.outpointTransactionHash)\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n</script>\n\n{#if txObject && transaction}\n\t{#if transaction.block_inclusions.length >= 1}\n\t\t<p>block: {transaction.block_inclusions[0].block.height}</p>\n\t{:else}\n  <p>Unconfirmed</p>\n  {/if}\n  \n\t<p>version: {transaction.version}</p>\n\t<p>size: {transaction.size_bytes}</p>\n\t<p>locktime: {transaction.locktime}</p>\n\n\t<p>fee: {transaction.fee_satoshis}</p>\n\t<h3>Inputs:</h3>\n  <p>Input Total Value: {transaction.input_value_satoshis}</p>\n\t{#if inputs}\n\t\t{#each inputs as i}\n\t\t\t<p>asm:</p><pre>{ i.asm}</pre> \n\t\t\t<p>outpoint:<a style=\"line-break:anywhere;\" href=\"{base}/explorer?tx={i.outpointTransactionHash}\">{i.outpointTransactionHash}</a></p>\n\t\t\t<p>vout:{ i.vout}</p>\n\t\t{/each}\n\t{/if}\n\t{#if outputs}\n\t\t<h3>Outputs:</h3>\n\t\t{#each outputs as o}\n      <AddressBlockie size={40} lockingBytecode={o.lockingBytecode} />\n\t\t\t<p><a style=\"line-break:anywhere;\" href=\"{base}/explorer?lockingBytecode={o.lockingBytecode}\">{o.lockingBytecode}</a></p>\n\t\t\t<p>+&nbsp;{o.satoshis}</p>\n\t\t{/each}\n\t{/if}\n{/if}\n","<script lang=\"ts\">\n\timport Paper, { Title, Content } from '@smui/paper';\n  import { deriveLockingBytecodeHex } from '@unspent/phi';\n\timport LockingBytecodeDetail from '$lib/LockingBytecodeDetails.svelte';\n\timport TransactionDetail from '$lib/TransactionDetail.svelte';\n\texport let data: any;\n  if(data.cashaddr){\n     data.lockingBytecode = deriveLockingBytecodeHex(data.cashaddr)\n  }\n</script>\n<svelte:head>\n\t<title>Explorer</title>\n\t<meta name=\"description\" content=\"View Blockchain Data\" />\n</svelte:head>\n<section>\n<Paper class=\"box\">\n\t<Title style=\"display: flex; justify-content: space-between; \">\n\t\t<span>\n\t\t\t{#if data.tx}\n\t\t\t\tTransaction\n\t\t\t{/if}\n\t\t\t{#if data.lockingBytecode}\n\t\t\t\tLocking Bytecode\n\t\t\t{/if}\n\t\t</span>\n\t</Title>\n\t<Content>\n\t\t{#if data.tx}\n    <pre>{data.tx}</pre>\n\t\t\t<TransactionDetail bind:txid={data.tx} />\n\t\t{/if}\n\t\t{#if data.lockingBytecode}\n    <pre>{data.lockingBytecode}</pre>\n\t\t\t<LockingBytecodeDetail bind:lockingBytecode={data.lockingBytecode} />\n\t\t{/if}\n\t</Content>\n</Paper>\n</section>"],"names":["ctx","insert_hydration","target","p","anchor","pre","create_if_block_1","h3","i","t0_value","t2_value","t5_value","base","div","append_hydration","p0","a","p1","dirty","set_data","t0","t2","t5","create_if_block_3","create_if_block_2","create_if_block","lockingBytecode","$$props","results","cashaddr","legacy","chaingraphHostValue","chaingraphHost","value","onMount","loadTx","load","sha256Promise","instantiateSha256","$$invalidate","getUnspentOutputs","r","cashaddrResponse","lockingBytecodeToCashAddress","hexToBin","sha256","legacyResponse","lockingBytecodeToBase58Address","IntrospectionOp","introspectionOpMapping","reverseIntrospectionOpMapping","k","v","bytecodeToAsm","bytecode","asm","disassembleBytecodeBCH","token","_a","t8_value","t11_value","t16_value","p2","p3","p4","current","t8","t11","t16","t1_value","t1","t4_value","t7_value","t4","t7","each_blocks","addressblockie_changes","if_block","txid","transaction","txObject","outputs","inputs","getTransaction","decodeTransaction","o","binToHex","binToBigIntUint64LE","if_block0","if_block1","span","transactiondetail_props","transactiondetail_changes","lockingbytecodedetail_props","lockingbytecodedetail_changes","meta","section","data","deriveLockingBytecodeHex","$$self"],"mappings":"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"}